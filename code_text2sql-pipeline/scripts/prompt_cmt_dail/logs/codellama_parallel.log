INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: How many singers do we have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the total number of singers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show name, country, age for all singers ordered by age from the oldest to the youngest. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names, countries, and ages for every singer in descending order of age? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the average, minimum, and maximum age of all singers from France? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the average, minimum, and maximum age for all French singers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the name and the release year of the song by the youngest singer. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names and release years for all the songs of the youngest singer? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are all distinct countries where singers above age 20 are from? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are  the different countries with singers above age 20? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show all countries and the number of singers in each country. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: How many singers are from each country? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: List all song names by singers above the average age. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are all the song names by singers who are older than average? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show location and name for all stadiums with a capacity between 5000 and 10000. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the locations and names of all stations with capacity between 5000 and 10000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the average and the maximum capacity of all stadiums? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the average and maximum capacities for all stations? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the name and capacity for the stadium with highest average attendance? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the name and capacity for the stadium with the highest average attendance? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: How many concerts are there in year 2014 or 2015? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: How many concerts occurred in 2014 or 2015? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the stadium name and the number of concerts in each stadium. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: For each stadium, how many concerts play there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the stadium name and capacity with most number of concerts in year 2014 or after. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the name and capacity of the stadium  with the most concerts after 2013? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Which year has most number of concerts? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the year that had the most concerts? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the stadium names without any concert. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of the stadiums without any concerts? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show countries where a singer above age 40 and a singer below 30 are from. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show names for all stadiums except for stadiums having a concert in year 2014. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of all stadiums that did not have a concert in 2014? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the name and theme for all concerts and the number of singers in each concert. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names, themes, and number of singers for each and every concert? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: List singer names and number of concerts for each singer. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of the singers and number of concerts for each person? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: List all singer names in concerts in year 2014. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of the singers who performed in a concert in 2014? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: what is the name and nation of the singer who have a song having 'Hey' in its name? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Find the number of concerts happened in the stadium with the highest capacity. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE stadium (stadium_id NUMBER PRIMARY KEY, location TEXT, name TEXT, capacity NUMBER, highest NUMBER, lowest NUMBER, average NUMBER);

 CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, country TEXT, song_name TEXT, song_release_year TEXT, age NUMBER, is_male OTHERS);

 CREATE TABLE concert (concert_id NUMBER PRIMARY KEY, concert_name TEXT, theme TEXT, stadium_id TEXT, year TEXT, FOREIGN KEY (stadium_id) REFERENCES stadium(stadium_id));

 CREATE TABLE singer_in_concert (concert_id NUMBER PRIMARY KEY, singer_id TEXT, FOREIGN KEY (concert_id) REFERENCES concert(concert_id), FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the number of concerts that occurred in the stadium with the largest capacity? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the number of pets whose weight is heavier than 10. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: How many pets have a greater weight than 10? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the weight of the youngest dog. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: How much does the youngest dog weigh? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the maximum weight for each type of pet. List the maximum weight and pet type. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: List the maximum weight and type for each type of pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find number of pets owned by students who are older than 20. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: How many pets are owned by students that have an age greater than 20? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the number of dog pets that are raised by female students (with sex F). */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: How many dog pets are raised by female students? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the number of distinct type of pets. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: How many different types of pet are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the first name of students who have cat or dog pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What are the first names of every student who has a cat or dog as a pet? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the name of students who have both cat and dog pets. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What are the students' first names who have both cats and dogs as pets? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the major and age of students who do not have a cat pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What major is every student who does not own a cat as a pet, and also how old are they? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the id of students who do not have a cat pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What are the ids of the students who do not own cats as pets? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the first name and age of students who have a dog but do not have a cat as a pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the first name of every student who has a dog but does not have a cat? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the type and weight of the youngest pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What type of pet is the youngest animal, and how much does it weigh? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the id and weight of all pets whose age is older than 1. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the id and weight of every pet who is older than 1? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the average and maximum age for each type of pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the average and maximum age for each pet type? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the average weight for each pet type. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the average weight for each type of pet? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the first name and age of students who have a pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What are the different first names and ages of the students who do have pets? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the id of the pet owned by student whose last name is ‘Smith’. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the id of the pet owned by the student whose last name is 'Smith'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the number of pets for each student who has any pet and student id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: For students who have pets, how many pets does each student have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the first name and gender of student who have more than one pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the first name and gender of the all the students who have more than one pet? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the last name of the student who has a cat that is age 3. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the last name of the student who has a cat that is 3 years old? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: Find the average age of students who do not have any pet. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE student (student_id NUMBER PRIMARY KEY, last_name TEXT, first_name TEXT, age NUMBER, sex TEXT, major NUMBER, advisor NUMBER, city_code TEXT);

 CREATE TABLE has_pet (student_id NUMBER, pet_id NUMBER, FOREIGN KEY (student_id) REFERENCES student(student_id), FOREIGN KEY (pet_id) REFERENCES pets(pet_id));

 CREATE TABLE pets (pet_id NUMBER PRIMARY KEY, pet_type TEXT, pet_age NUMBER, weight NUMBER);


/* Answer the following: What is the average age for all students who do not own any pets? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many continents are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of continents? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many countries does each continent have? List the continent id, continent name and the number of countries. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: For each continent, list its id, name, and how many countries it has? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many countries are listed? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many countries exist? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many models does each car maker produce? List maker full name, id and the number. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the full name of each car maker, along with its id and how many models it produces? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which model of the car has the minimum horsepower? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the model of the car with the smallest amount of horsepower? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Find the model of the car whose weight is below the average weight. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the model for the car with a weight smaller than the average? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Find the name of the makers that produced some cars in the year of 1970? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the name of the different car makers who produced a car in 1970? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Find the make and production time of the cars that were produced in the earliest year? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the maker of the carr produced in the earliest year and what year was it? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which distinct car models are the produced after 1980? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the different models for the cards produced after 1980? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many car makers are there in each continents? List the continent name and the count. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the name of each continent and how many car makers are there in each one? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which of the countries has the most car makers? List the country name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the name of the country with the most car makers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many car models are produced by each maker? List the count and the maker full name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of car models that are produced by each maker and what is the id and full name of each maker? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the accelerate of the car make amc hornet sportabout (sw)? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How much does the car accelerate that makes amc hornet sportabout (sw)? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many car makers are there in france? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of makers of care in France? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many car models are produced in the usa? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the count of the car models produced in the United States? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average miles per gallon(mpg) of the cars with 4 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average miles per gallon of all the cards with 4 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the smallest weight of the car produced with 8 cylinders on 1974? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the minimu weight of the car with 8 cylinders produced in 1974? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are all the makers and models? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the makers and models? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the countries having at least one car maker? List name and id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the names and ids of all countries with at least one car maker? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of the cars with horsepower more than 150? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of cars with a horsepower greater than 150? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average weight of cars each year? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average weight and year for each year? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which countries in europe have at least 3 car manufacturers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the names of all European countries with at least 3 manufacturers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the maximum horsepower and the make of the car models with 3 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the largest amount of horsepower for the models with 3 cylinders and what make is it? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which model saves the most gasoline? That is to say, have the maximum miles per gallon. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the car wmodel with the highest mpg? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average horsepower of the cars before 1980? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average horsepower for all cards produced before 1980? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average edispl of the cars of model volvo? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the average edispl for all volvos? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the maximum accelerate for different number of cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the maximum accelerate for all the different cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which model has the most version(make) of cars? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What model has the most different versions? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many cars have more than 4 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of cars with more than 4 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: how many cars were produced in 1980? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: In 1980, how many cars were made? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many car models were produced by the maker with full name American Motor Company? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of car models created by the car maker American Motor Company? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which makers designed more than 3 car models? List full name and the id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the names and ids of all makers with more than 3 models? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the different models created by either the car maker General Motors or weighed more than 3500? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: In which years cars were produced weighing no less than 3000 and no more than 4000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the horsepower of the car with the largest accelerate? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the horsepower of the car with the greatest accelerate? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: For model volvo, how many cylinders does the car with the least accelerate have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: For a volvo model, how many cylinders does the version with least accelerate have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many cars have a larger accelerate than the car with the largest horsepower? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of cars with a greater accelerate than the one with the most horsepower? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many countries has more than 2 car makers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of countries with more than 2 car makers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: How many cars has over 6 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the number of carsw ith over 6 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: For the cars with 4 cylinders, which model has the largest horsepower? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: For all of the 4 cylinder cars, which model has the most horsepower? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Among the cars that do not have the minimum horsepower, what are the make ids and names of al those with less than 4 cylinders? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which models are lighter than 3500 but not built by the 'Ford Motor Company'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the name of the countries where there is not a single car maker? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the names of the countries with no car makers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: Which are the car makers which produce at least 2 models and more than 3 car makes? List the id and the maker. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE continents (cont_id NUMBER PRIMARY KEY, continent TEXT);

 CREATE TABLE countries (country_id NUMBER PRIMARY KEY, country_name TEXT, continent NUMBER, FOREIGN KEY (continent) REFERENCES continents(cont_id));

 CREATE TABLE car_makers (id NUMBER PRIMARY KEY, maker TEXT, full_name TEXT, country TEXT, FOREIGN KEY (country) REFERENCES countries(country_id));

 CREATE TABLE model_list (model_id NUMBER PRIMARY KEY, maker NUMBER, model TEXT, FOREIGN KEY (maker) REFERENCES car_makers(id));

 CREATE TABLE car_names (make_id NUMBER PRIMARY KEY, model TEXT, make TEXT, FOREIGN KEY (model) REFERENCES model_list(model));

 CREATE TABLE cars_data (id NUMBER PRIMARY KEY, mpg TEXT, cylinders NUMBER, edispl NUMBER, horsepower TEXT, weight NUMBER, accelerate NUMBER, year NUMBER, FOREIGN KEY (id) REFERENCES car_names(make_id));


/* Answer the following: What are the ids and names of all countries that either have more than 3 car makers or produce fiats? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which country does Airline "JetBlue Airways" belong to? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What country is Jetblue Airways affiliated with? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What is the abbreviation of Airline "JetBlue Airways"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which abbreviation corresponds to Jetblue Airways? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: List all airline names and their abbreviations in "USA". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are the airline names and abbreviations for airlines in the USA? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: List the airport code and name in the city of Anthony. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the airport code and airport name corresonding to the city Anthony. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many airlines do we have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What is the total number of airlines? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many airports do we have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Return the number of  airports. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights do we have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Return the number of flights. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airline has abbreviation 'UAL'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the airline with abbreviation 'UAL'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many airlines are from USA? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Return the number of airlines in the USA. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which city and country is the Alton airport at? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the city and country for the Alton airport. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What is the airport name for airport 'AKO'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Return the name of the airport with code 'AKO'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are airport names at City 'Aberdeen'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are the names of airports in Aberdeen? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights depart from 'APG'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Count the number of flights departing from 'APG'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights have destination ATO? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Count the number of flights into ATO. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights depart from City Aberdeen? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Return the number of flights departing from Aberdeen. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights arriving in Aberdeen city? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Return the number of flights arriving in Aberdeen. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights fly from Aberdeen to Ashley? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights does airline 'JetBlue Airways' have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the number of Jetblue Airways flights. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many 'United Airlines' flights go to Airport 'ASY'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Count the number of United Airlines flights arriving in ASY Airport. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many 'United Airlines' flights depart from Airport 'AHD'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Return the number of United Airlines flights leaving from AHD Airport. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many United Airlines flights go to City 'Aberdeen'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Count the number of United Airlines flights that arrive in Aberdeen. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which city has most number of arriving flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which city has the most frequent destination airport? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which city has most number of departing flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which city is the most frequent source airport? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What is the code of airport that has the highest number of flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What is the airport code of the airport with the most flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What is the code of airport that has fewest number of flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the code of the airport with the least flights. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airline has most number of flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What airline serves the most flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Find the abbreviation and country of the airline that has fewest number of flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What is the abbreviation of the airilne has the fewest flights and what country is it in? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are airlines that have some flight departing from airport 'AHD'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airlines have a flight with source airport AHD? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are airlines that have flights arriving at airport 'AHD'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airlines have a flight with destination airport AHD? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Find all airlines that have flights from both airports 'APG' and 'CVO'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airlines have departing flights from both APG and CVO airports? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Find all airlines that have flights from airport 'CVO' but not from 'APG'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airlines have departures from CVO but not from APG airports? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Find all airlines that have at least 10 flights. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airlines have at least 10 flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Find all airlines that have fewer than 200 flights. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airlines have less than 200 flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are flight numbers of Airline "United Airlines"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which flight numbers correspond to United Airlines flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are flight numbers of flights departing from Airport "APG"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the flight numbers of flights leaving from APG. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are flight numbers of flights arriving at Airport "APG"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the flight numbers of flights landing at APG. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are flight numbers of flights departing from City "Aberdeen "? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the flight numbers of flights leaving from Aberdeen. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: What are flight numbers of flights arriving at City "Aberdeen"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Give the flight numbers of flights arriving in Aberdeen. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Find the number of flights landing in the city of Aberdeen or Abilene. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: How many flights land in Aberdeen or Abilene? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Find the name of airports which do not have any flight in and out. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE airlines (airline_id NUMBER PRIMARY KEY, airline_name TEXT, abbreviation TEXT, country TEXT);

 CREATE TABLE airports (city TEXT, airport_code TEXT PRIMARY KEY, airport_name TEXT, country TEXT, country_abbrev TEXT);

 CREATE TABLE flights (airline NUMBER PRIMARY KEY, flight_number NUMBER, source_airport TEXT, destination_airport TEXT, FOREIGN KEY (source_airport) REFERENCES airports(airport_code), FOREIGN KEY (destination_airport) REFERENCES airports(airport_code));


/* Answer the following: Which airports do not have departing or arriving flights? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: How many employees are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Count the number of employees */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Sort employee names by their age in ascending order. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: List the names of employees and sort in ascending order of age. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: What is the number of employees from each city? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Count the number of employees for each city. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Which cities do more than one employee under age 30 come from? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the cities that have more than one employee under age 30. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the number of shops in each location. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: How many shops are there in each location? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the manager name and district of the shop whose number of products is the largest. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: What are the manager name and district of the shop that sells the largest number of products? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: find the minimum and maximum number of products of all stores. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: What are the minimum and maximum number of products across all the shops? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Return the name, location and district of all shops in descending order of number of products. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Sort all the shops by number products in descending order, and return the name, location and district of each shop. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the names of stores whose number products is more than the average number of products. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Which shops' number products is above the average? Give me the shop names. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: find the name of employee who was awarded the most times in the evaluation. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Which employee received the most awards in evaluations? Give me the employee name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the name of the employee who got the highest one time bonus. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Which employee received the biggest bonus? Give me the employee name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the names of employees who never won any award in the evaluation. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: What are the names of the employees who never received any evaluation? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: What is the name of the shop that is hiring the largest number of employees? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Which shop has the most employees? Give me the shop name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the name of the shops that do not hire any employee. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Which shops run with no employees? Find the shop names */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the number of employees hired in each shop; show the shop name as well. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: For each shop, return the number of employees working there and the name of the shop. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: What is total bonus given in all evaluations? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the total amount of bonus given in all the evaluations. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Give me all the information about hiring. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: What is all the information about hiring? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Which district has both stores with less than 3000 products and stores with more than 10000 products? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: How many different store locations are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE employee (employee_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, city TEXT);

 CREATE TABLE shop (shop_id NUMBER PRIMARY KEY, name TEXT, location TEXT, district TEXT, number_products NUMBER, manager_name TEXT);

 CREATE TABLE hiring (shop_id NUMBER, employee_id NUMBER PRIMARY KEY, start_from TEXT, is_full_time OTHERS, FOREIGN KEY (shop_id) REFERENCES shop(shop_id), FOREIGN KEY (employee_id) REFERENCES employee(employee_id));

 CREATE TABLE evaluation (employee_id TEXT PRIMARY KEY, year_awarded TEXT, bonus NUMBER, FOREIGN KEY (employee_id) REFERENCES employee(employee_id));


/* Answer the following: Count the number of distinct store locations. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: How many documents do we have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Count the number of documents. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: List document IDs, document names, and document descriptions for all documents. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids, names, and descriptions for all documents? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the document name and template id for document with description with the letter 'w' in it? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the names and template ids for documents that contain the letter w in their description. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the document id, template id and description for document named "Robbin CV"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the document id, template id, and description for the document with the name Robbin CV. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: How many different templates do all document use? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Count the number of different templates used for documents. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: How many documents are using the template with type code 'PPT'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Count the number of documents that use the PPT template type. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all template ids and number of documents using each template. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are all different template ids used for documents, and how many times were each of them used? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the id and type code for the template used by the most documents? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the id and type code of the template that is used for the greatest number of documents. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show ids for all templates that are used by more than one document. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the template ids of any templates used in more than a single document? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show ids for all templates not used by any document. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids for templates that are not used in any documents? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: How many templates do we have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Count the number of templates. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show template ids, version numbers, and template type codes for all templates. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids, version numbers, and type codes for each template? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all distinct template type codes for all templates. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the different template type codes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids of templates with template type code PP or PPT? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the ids of templates that have the code PP or PPT. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: How many templates have template type code CV? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Count the number of templates of the type CV. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the version number and template type code for the template with version number later than 5? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the version numbers and template type codes of templates with a version number greater than 5. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all template type codes and number of templates for each. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the different template type codes, and how many templates correspond to each? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Which template type code has most number of templates? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the type code of the template type that the most templates belong to. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all template type codes with less than three templates. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the codes of template types that have fewer than 3 templates? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What the smallest version number and its template type code? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the lowest version number, along with its corresponding template type code. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the template type code of the template used by document with the name "Data base"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the template type code of the template that is used by a document named Data base. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all document names using templates with template type code BK. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the names of documents that use templates with the code BK? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all template type codes and the number of documents using each type. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the different template type codes, and how many documents use each type? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Which template type code is used by most number of documents? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the code of the template type that is most commonly used in documents. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all template type codes that are not used by any document. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the codes of template types that are not used for any document? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all template type codes and descriptions. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the type codes and descriptions for all template types? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the template type descriptions for template type code "AD". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the template type description of the template type with the code AD. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the template type code for template type description "Book". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the type code of the template type with the description "Book". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the distinct template type descriptions for the templates ever used by any document? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the different descriptions for templates that have been used in a document. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the template ids with template type description "Presentation". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the ids corresponding to templates with the description 'Presentation'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: How many paragraphs in total? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Count the number of paragraphs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: How many paragraphs for the document with name 'Summer Show'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Count the number of paragraphs in the document named 'Summer Show'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show paragraph details for paragraph with text 'Korea'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the details for the paragraph that includes the text 'Korea'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all paragraph ids and texts for the document with name 'Welcome to NY'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all paragraph texts for the document "Customer reviews". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the paragraph texts for the document with the name 'Customer reviews'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all document ids and the number of paragraphs in each document. Order by document id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show all document ids, names and the number of paragraphs in each document. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids and names of each document, as well as the number of paragraphs in each? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: List all document ids with at least two paragraphs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids of documents that have 2 or more paragraphs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the document id and name with greatest number of paragraphs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the id and name of the document with the most paragraphs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the document id with least number of paragraphs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Return the id of the document with the fewest paragraphs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What is the document id with 1 to 2 paragraphs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Give the ids of documents that have between one and two paragraphs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: Show the document id with paragraph text 'Brazil' and 'Ireland'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_template_types (template_type_code TEXT PRIMARY KEY, template_type_description TEXT);

 CREATE TABLE templates (template_id NUMBER PRIMARY KEY, version_number NUMBER, template_type_code TEXT, date_effective_from TIME, date_effective_to TIME, template_details TEXT, FOREIGN KEY (template_type_code) REFERENCES reference_template_types(template_type_code));

 CREATE TABLE documents (document_id NUMBER PRIMARY KEY, template_id NUMBER, document_name TEXT, document_description TEXT, other_details TEXT, FOREIGN KEY (template_id) REFERENCES templates(template_id));

 CREATE TABLE paragraphs (paragraph_id NUMBER PRIMARY KEY, document_id NUMBER, paragraph_text TEXT, other_details TEXT, FOREIGN KEY (document_id) REFERENCES documents(document_id));


/* Answer the following: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: How many teachers are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What is the total count of teachers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: List the names of teachers in ascending order of age. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the teachers ordered by ascending age? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the age and hometown of teachers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What is the age and hometown of every teacher? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: List the name of teachers whose hometown is not "Little Lever Urban District". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the teachers whose hometown is not "Little Lever Urban District"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show the name of teachers aged either 32 or 33? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the teachers who are aged either 32 or 33? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What is the hometown of the youngest teacher? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Where is the youngest teacher from? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show different hometown of teachers and the number of teachers from each hometown. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: For each hometown, how many teachers are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: List the most common hometown of teachers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What is the most commmon hometowns for teachers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show the hometowns shared by at least two teachers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the towns from which at least two teachers come from? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show names of teachers and the courses they are arranged to teach. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What is the name of each teacher and what course they teach? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show the name of the teacher for the math course. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the people who teach math courses? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show names of teachers and the number of courses they teach. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the teachers and how many courses do they teach? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: Show names of teachers that teach at least two courses. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the teachers who teach at least two courses? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: List the names of teachers who have not been arranged to teach courses. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE course (course_id NUMBER PRIMARY KEY, staring_date TEXT, course TEXT);

 CREATE TABLE teacher (teacher_id NUMBER PRIMARY KEY, name TEXT, age TEXT, hometown TEXT);

 CREATE TABLE course_arrange (course_id NUMBER PRIMARY KEY, teacher_id NUMBER, grade NUMBER, FOREIGN KEY (course_id) REFERENCES course(course_id), FOREIGN KEY (teacher_id) REFERENCES teacher(teacher_id));


/* Answer the following: What are the names of the teachers whose courses have not been arranged? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: How many visitors below age 30 are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What is the average age of the visitors whose membership level is not higher than 4? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: Find the id and name of the museum that has the most staff members? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: Find the average number of staff working for the museums that were open before 2009. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What are the opening year and staff number of the museum named Plaza Museum? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: find the id, name and age for visitors who visited some museums more than once. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What are the id and name of the museum visited most times? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What is the name of the museum that had no visitor yet? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: Find the name and age of the visitor who bought the most tickets at once. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What are the average and maximum number of tickets bought in all visits? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What is the total ticket expense of the visitors whose membership level is 1? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: Find the number of visitors who did not visit any museum opened after 2010. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE museum (museum_id NUMBER PRIMARY KEY, name TEXT, num_of_staff NUMBER, open_year TEXT);

 CREATE TABLE customer (customer_id NUMBER PRIMARY KEY, name TEXT, level_of_membership NUMBER, age NUMBER);

 CREATE TABLE visit (museum_id NUMBER PRIMARY KEY, customer_id TEXT, num_of_ticket NUMBER, total_spent NUMBER, FOREIGN KEY (museum_id) REFERENCES museum(museum_id), FOREIGN KEY (customer_id) REFERENCES customer(customer_id));


/* Answer the following: How many museums were opened after 2013 or before 2008? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the total number of players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many players are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the total number of matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Count the number of matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: List the first name and birth date of all players from the country with code USA. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the first names and birth dates of players from the USA? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the average age of losers and winners of all matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the average ages of losers and winners across matches? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the average rank of winners in all matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the average rank for winners in all matches? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the highest rank of losers in all matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the best rank of losers across all matches? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: find the number of distinct country codes of all players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many distinct countries do players come from? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the number of distinct name of losers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many different loser names are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the name of tourney that has more than 10 matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the names of tournaments that have more than 10 matches? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: List the names of all winners who played in both 2013 and 2016. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the names of players who won in both 2013 and 2016? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: List the number of all matches who played in years of 2013 or 2016. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many matches were played in 2013 or 2016? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the first names and country codes for players who won both the WTA Championships and the Australian Open? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the first name and country code of the oldest player. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the first name and country code of the oldest player? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: List the first and last name of all players in the order of birth date. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the full names of all players, sorted by birth date? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: List the first and last name of all players who are left / L hand in the order of birth date. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the full names of all left handed players, in order of birth date? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the first name and country code of the player who did the most number of tours. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the first name and country code of the player with the most tours? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the year that has the most number of matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Which year had the most matches? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the name and rank points of the winner who won the most times. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the name of the winner who has won the most matches, and how many rank points does this player have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the name of the winner with the most rank points who participated in the Australian Open tournament? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: find the names of loser and winner who played in the match with greatest number of minutes. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the names of the winner and loser who played in the longest match? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the average ranking for each player and their first name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the first names of all players, and their average rankings? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the total ranking points for each player and their first name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the first names of all players, and their total ranking points? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: find the number of players for each country. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many players are from each country? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: find the code of the country where has the greatest number of players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the code of the country with the most players? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the codes of countries that have more than 50 players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the codes of countries with more than 50 players? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the total number of tours for each ranking date. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many total tours were there for each ranking date? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the number of matches happened in each year. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many matches were played in each year? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the name and rank of the 3 youngest winners across all matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What are the names and ranks of the three youngest winners across all matches? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many different winners both participated in the WTA Championships and were left handed? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the number of left handed winners who participated in the WTA Championships. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the first name, country code and birth date of the winner who has the highest rank points in all matches. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: What is the first name, country code, and birth date of the player with the most winner rank points across all matches? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: Find the number of players for each hand type. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE players (player_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, hand TEXT, birth_date TIME, country_code TEXT);

 CREATE TABLE matches (best_of NUMBER, draw_size NUMBER, loser_age NUMBER, loser_entry TEXT, loser_hand TEXT, loser_ht NUMBER, loser_id NUMBER, loser_ioc TEXT, loser_name TEXT, loser_rank NUMBER, loser_rank_points NUMBER, loser_seed NUMBER, match_num NUMBER, minutes NUMBER, round TEXT, score TEXT, surface TEXT, tourney_date TIME, tourney_id TEXT, tourney_level TEXT, tourney_name TEXT, winner_age NUMBER, winner_entry TEXT, winner_hand TEXT, winner_ht NUMBER, winner_id NUMBER, winner_ioc TEXT, winner_name TEXT, winner_rank NUMBER, winner_rank_points NUMBER, winner_seed NUMBER, year NUMBER, FOREIGN KEY (loser_id) REFERENCES players(player_id), FOREIGN KEY (winner_id) REFERENCES players(player_id));

 CREATE TABLE rankings (ranking_date TIME, ranking NUMBER, player_id NUMBER, ranking_points NUMBER, tours NUMBER, FOREIGN KEY (player_id) REFERENCES players(player_id));


/* Answer the following: How many players are there for each hand type? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: How many ships ended up being 'Captured'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: List the name and tonnage ordered by in descending alphaetical order for the names. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: List the name, date and result of each battle. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What is maximum and minimum death toll caused each time? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What is the average number of injuries caused each time? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What are the death and injury situations caused by the ship with tonnage 't'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What are the name and results of the battles when the bulgarian commander is not 'Boril' */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What are the different ids and names of the battles that lost any 'Brig' type shipes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What are the ids and names of the battles that led to more than 10 people killed in total. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What is the ship id and name that caused most total injuries? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: How many different results are there for the battles? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: How many battles did not lose any ship with tonnage '225'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta' */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE battle (id NUMBER PRIMARY KEY, name TEXT, date TEXT, bulgarian_commander TEXT, latin_commander TEXT, result TEXT);

 CREATE TABLE ship (lost_in_battle NUMBER, id NUMBER PRIMARY KEY, name TEXT, tonnage TEXT, ship_type TEXT, location TEXT, disposition_of_ship TEXT, FOREIGN KEY (lost_in_battle) REFERENCES battle(id));

 CREATE TABLE death (caused_by_ship_id NUMBER, id NUMBER PRIMARY KEY, note TEXT, killed NUMBER, injured NUMBER, FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id));


/* Answer the following: What are the notes of the death events which has substring 'East'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: what are all the addresses including line 1 and line 2? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the first and second line for all addresses? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many courses in total are listed? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many courses are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How is the math course described? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the descriptions for all the math courses? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the zip code of the address in the city Port Chelsea? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the zip code for Port Chelsea? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Which department offers the most number of degrees? List department name and id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: For each department id, what is the name of the department with the most number of degrees? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many departments offer any degree? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many different departments offer degrees? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many different degree names are offered? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many different degrees are offered? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many degrees does the engineering department offer? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many degrees does the engineering department have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the names and descriptions of all the sections? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the names and descriptions for all the sections? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the names and id of courses having at most 2 sections? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the names and ids of every course with less than 2 sections? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: List the section_name in reversed lexicographical order. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the names of the sections in reverse alphabetical order? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the semester which most student registered in? Show both the name and the id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: For each semester, what is the name and id of the one with the most students registered? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the description of the department whose name has the substring the computer? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the department description for the one whose name has the word computer? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the first, middle, and last names for everybody enrolled in a Bachelors program? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Find the kind of program which most number of students are enrolled in? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the degree summary name that has the most number of students enrolled? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Find the program which most number of students are enrolled in. List both the id and the summary. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the program id and the summary of the degree that has the most students enrolled? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Which semesters do not have any student enrolled? List the semester name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the name of the semester with no students enrolled? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are all the course names of the courses which ever have students enrolled in? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the names of all courses that have some students enrolled? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What's the name of the course with most number of enrollments? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the name of the course with the most students enrolled? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the last name of the students who live in North Carolina but have not registered in any degree programs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Show the date and id of the transcript with at least 2 course results. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the date and id of the transcript with at least 2 courses listed? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the phone number of the man with the first name Timmothy and the last name Ward? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the mobile phone number of the student named Timothy Ward? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Who is the first student to register? List the first name, middle name and last name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the first, middle, and last name of the first student to register? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Who is the earliest graduate of the school? List the first name, middle name and last name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the first, middle, and last name of the earliest school graduate? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Whose permanent address is different from his or her current address? List his or her first name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the first name of the student whose permanent address is different from his or her current one? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Which address holds the most number of students currently? List the address id and all lines. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the id, line 1, and line 2 of the address with the most students? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: On average, when were the transcripts printed? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the average transcript date? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: When is the first transcript released? List the date and details. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the earliest date of a transcript release, and what details can you tell me? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many transcripts are released? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many transcripts are listed? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the last transcript release date? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: When was the last transcript released? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Show the date of the transcript which shows the least number of results, also list the id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the date and id of the transcript with the least number of results? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Find the semester when both Master students and Bachelor students got enrolled in. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the id of the semester that had both Masters and Bachelors students enrolled? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: How many different addresses do the students currently live? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the different addresses that have students living there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: List all the student details in reversed lexicographical order. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What other details can you tell me about students in reverse alphabetical order? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Describe the section h. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What is the description for the section named h? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE addresses (address_id NUMBER PRIMARY KEY, line_1 TEXT, line_2 TEXT, line_3 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, other_address_details TEXT);

 CREATE TABLE courses (course_id NUMBER PRIMARY KEY, course_name TEXT, course_description TEXT, other_details TEXT);

 CREATE TABLE departments (department_id NUMBER PRIMARY KEY, department_name TEXT, department_description TEXT, other_details TEXT);

 CREATE TABLE degree_programs (degree_program_id NUMBER PRIMARY KEY, department_id NUMBER, degree_summary_name TEXT, degree_summary_description TEXT, other_details TEXT, FOREIGN KEY (department_id) REFERENCES departments(department_id));

 CREATE TABLE sections (section_id NUMBER PRIMARY KEY, course_id NUMBER, section_name TEXT, section_description TEXT, other_details TEXT, FOREIGN KEY (course_id) REFERENCES courses(course_id));

 CREATE TABLE semesters (semester_id NUMBER PRIMARY KEY, semester_name TEXT, semester_description TEXT, other_details TEXT);

 CREATE TABLE students (student_id NUMBER PRIMARY KEY, current_address_id NUMBER, permanent_address_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, ssn TEXT, date_first_registered TIME, date_left TIME, other_student_details TEXT, FOREIGN KEY (current_address_id) REFERENCES addresses(address_id), FOREIGN KEY (permanent_address_id) REFERENCES addresses(address_id));

 CREATE TABLE student_enrolment (student_enrolment_id NUMBER PRIMARY KEY, degree_program_id NUMBER, semester_id NUMBER, student_id NUMBER, other_details TEXT, FOREIGN KEY (degree_program_id) REFERENCES degree_programs(degree_program_id), FOREIGN KEY (semester_id) REFERENCES semesters(semester_id), FOREIGN KEY (student_id) REFERENCES students(student_id));

 CREATE TABLE student_enrolment_courses (student_course_id NUMBER PRIMARY KEY, course_id NUMBER, student_enrolment_id NUMBER, FOREIGN KEY (course_id) REFERENCES courses(course_id), FOREIGN KEY (student_enrolment_id) REFERENCES student_enrolment(student_enrolment_id));

 CREATE TABLE transcripts (transcript_id NUMBER PRIMARY KEY, transcript_date TIME, other_details TEXT);

 CREATE TABLE transcript_contents (student_course_id NUMBER, transcript_id NUMBER, FOREIGN KEY (student_course_id) REFERENCES student_enrolment_courses(student_course_id), FOREIGN KEY (transcript_id) REFERENCES transcripts(transcript_id));


/* Answer the following: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List the title of all cartoons in alphabetical order. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the titles of the cartoons sorted alphabetically? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List all cartoon directed by "Ben Jones". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the names of all cartoons directed by Ben Jones? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: How many cartoons were written by "Joseph Kuhr"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the number of cartoones written by Joseph Kuhr? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: list all cartoon titles and their directors ordered by their air date */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the name and directors of all the cartoons that are ordered by air date? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List the title of all cartoon directed by "Ben Jones" or "Brandon Vietti". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: Which country has the most of TV Channels? List the country and number of TV Channels it has. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the country with the most number of TV Channels and how many does it have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List the number of different series names and contents in the TV Channel table. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: How many different series and contents are listed in the TV Channel table? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the content of TV Channel with serial name "Sky Radio"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the content of the series Sky Radio? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the Package Option of TV Channel with serial name "Sky Radio"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the Package Options of the TV Channels whose series names are Sky Radio? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: How many TV Channel using language English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: How many TV Channels use the English language? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List the language used least number of TV Channel. List language and number of TV Channel. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the languages used by the least number of TV Channels and how many channels use it? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List each language and the number of TV Channels using it. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: For each language, list the number of TV Channels that use it. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the TV Channel that shows the cartoon "The Rise of the Blue Beetle!"? List the TV Channel's series name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the series name of the TV Channel that shows the cartoon "The Rise of the Blue Beetle"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List the title of all  Cartoons showed on TV Channel with series name "Sky Radio". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the title of all the cartools that are on the TV Channel with the series name "Sky Radio"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List the Episode of all TV series sorted by rating. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are all of the episodes ordered by ratings? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List top 3 highest Rating  TV series. List the TV series's Episode and Rating. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are 3 most highly rated episodes in the TV series table and what were those ratings? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is minimum and maximum share of TV series? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the maximum and minimum share for the TV series? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the air date of TV series with Episode "A Love of a Lifetime"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: When did the episode "A Love of a Lifetime" air? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is Weekly Rank of TV series with Episode "A Love of a Lifetime"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the weekly rank for the episode "A Love of a Lifetime"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the TV Channel of TV series with Episode "A Love of a Lifetime"? List the TV Channel's series name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the name of the series that has the episode "A Love of a Lifetime"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: List the Episode of all  TV series showed on TV Channel with series name "Sky Radio". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the episode for the TV series named "Sky Radio"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: Find the number of cartoons directed by each of the listed directors. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: How many cartoons did each director create? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: Find the production code and channel of the most recently aired cartoon. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the produdction code and channel of the most recent cartoon? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: Find the package choice and series name of the TV channel that has high definition TV. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the package options and the name of the series for the TV Channel that supports high definition TV? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: which countries' tv channels are playing some cartoon written by Todd Casey? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the countries that have cartoons on TV that were written by Todd Casey? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: which countries' tv channels are not playing any cartoon written by Todd Casey? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the countries that are not playing cartoons written by Todd Casey? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: find the pixel aspect ratio and nation of the tv channels that do not use English. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What is the pixel aspect ratio and country of origin for all TV channels that do not use English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: find id of the tv channels that from the countries where have more than two tv channels. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the ids of all tv channels that have more than 2 TV channels? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: find the id of tv channels that do not play any cartoon directed by Ben Jones. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: find the package option of the tv channel that do not have any cartoon directed by Ben Jones. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE tv_channel (id TEXT PRIMARY KEY, series_name TEXT, country TEXT, language TEXT, content TEXT, pixel_aspect_ratio_par TEXT, hight_definition_tv TEXT, pay_per_view_ppv TEXT, package_option TEXT);

 CREATE TABLE tv_series (id NUMBER PRIMARY KEY, episode TEXT, air_date TEXT, rating TEXT, share NUMBER, 18_49_rating_share TEXT, viewers_m TEXT, weekly_rank NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));

 CREATE TABLE cartoon (id NUMBER PRIMARY KEY, title TEXT, directed_by TEXT, written_by TEXT, original_air_date TEXT, production_code NUMBER, channel TEXT, FOREIGN KEY (channel) REFERENCES tv_channel(id));


/* Answer the following: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: How many poker players are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Count the number of poker players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: List the earnings of poker players in descending order. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the earnings of poker players, ordered descending by value? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: List the final tables made and the best finishes of poker players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the final tables made and best finishes for all poker players? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What is the average earnings of poker players? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the average earnings across all poker players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What is the money rank of the poker player with the highest earnings? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the money rank of the player with the greatest earnings. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What is the maximum number of final tables made among poker players with earnings less than 200000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the maximum final tables made across all poker players who have earnings below 200000. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the names of poker players? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the names of all the poker players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the names of poker players whose earnings is higher than 300000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Give the names of poker players who have earnings above 300000. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: List the names of poker players ordered by the final tables made in ascending order. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the names of poker players, ordered ascending by the number of final tables they have made? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What is the birth date of the poker player with the lowest earnings? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the birth date of the poker player with the lowest earnings. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What is the money rank of the tallest poker player? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the money rank of the poker player with the greatest height. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What is the average earnings of poker players with height higher than 200? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Give average earnings of poker players who are taller than 200. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the names of poker players in descending order of earnings? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the names of poker players sorted by their earnings descending. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are different nationalities of people and the corresponding number of people from each nation? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: How many people are there of each nationality? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What is the most common nationality of people? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Give the nationality that is most common across all people. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the nationalities that are shared by at least two people? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Return the nationalities for which there are two or more people. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: List the names and birth dates of people in ascending alphabetical order of name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the names and birth dates of people, ordered by their names in alphabetical order? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Show names of people whose nationality is not "Russia". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the names of people who are not from Russia? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: List the names of people that are not poker players. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: What are the names of people who do not play poker? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: How many distinct nationalities are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE poker_player (poker_player_id NUMBER PRIMARY KEY, people_id NUMBER, final_table_made NUMBER, best_finish NUMBER, money_rank NUMBER, earnings NUMBER, FOREIGN KEY (people_id) REFERENCES people(people_id));

 CREATE TABLE people (people_id NUMBER PRIMARY KEY, nationality TEXT, name TEXT, birth_date TEXT, height NUMBER);


/* Answer the following: Count the number of different nationalities. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: How many states are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: List the contestant numbers and names, ordered by contestant name descending. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: List the vote ids, phone numbers and states of all votes. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What are the maximum and minimum values of area codes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What is last date created of votes from the state 'CA'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What are the names of the contestants whose names are not 'Jessie Alloway' */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What are the distinct states and create time of all votes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What are the contestant numbers and names of the contestants who had at least two votes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What are the number of votes from state 'NY' or 'CA'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: How many contestants did not get voted? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What is the area code in which the most voters voted? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE area_code_state (area_code NUMBER PRIMARY KEY, state TEXT);

 CREATE TABLE contestants (contestant_number NUMBER PRIMARY KEY, contestant_name TEXT);

 CREATE TABLE votes (vote_id NUMBER PRIMARY KEY, phone_number NUMBER, state TEXT, contestant_number NUMBER, created TIME, FOREIGN KEY (state) REFERENCES area_code_state(state), FOREIGN KEY (contestant_number) REFERENCES contestants(contestant_number));


/* Answer the following: Return the names the contestants whose names contain the substring 'Al'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names of all the countries that became independent after 1950? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the names of the nations that were founded after 1950. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many countries have a republic as their form of government? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many countries have governments that are republics? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total surface area of the countries in the Caribbean region? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How much surface area do the countires in the Carribean cover together? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which continent is Anguilla in? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the continent name which Anguilla belongs to? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which region is the city Kabul located in? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What region is Kabul in? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which language is the most popular in Aruba? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What language is predominantly spoken in Aruba? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the population and life expectancies in Brazil? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give me Brazil’s population and life expectancies. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the region and population of Angola? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What region does Angola belong to and what is its population? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the average expected life expectancy for countries in the region of Central Africa? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How long is the people’s average life expectancy in Central Africa? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the name of country that has the shortest life expectancy in Asia? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the name of the country in Asia with the lowest life expectancy. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total population and maximum GNP in Asia? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many people live in Asia, and what is the largest GNP among them? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the average life expectancy in African countries that are republics? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the average life expectancy for countries in Africa which are republics? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total surface area of the continents Asia and Europe? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the total surface area covered by countries in Asia or Europe. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many people live in Gelderland district? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total population of Gelderland district? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the average GNP and total population in all nations whose government is US territory? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the mean GNP and total population of nations which are considered US territory. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many unique languages are spoken in the world? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the number of distinct languages used around the world? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many type of governments are in Africa? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many different forms of governments are there in Africa? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total number of languages used in Aruba? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many languages are spoken in Aruba? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many official languages does Afghanistan have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many official languages are spoken in Afghanistan? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is name of the country that speaks the largest number of languages? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the name of the nation that uses the greatest amount of languages. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which continent has the most diverse languages? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which continent speaks the most languages? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many countries speak both English and Dutch? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the number of nations that use English and Dutch? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names of nations speak both English and French? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the names of nations that speak both English and French. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names of nations where both English and French are official languages? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the names of countries with English and French as official languages. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the number of distinct continents where Chinese is spoken? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many continents speak Chinese? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the regions that use English or Dutch? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which regions speak Dutch or English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the countries where either English or Dutch is the official language? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which countries have either English or Dutch as an official language? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which language is the most popular on the Asian continent? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the language that is used by the largest number of Asian nations? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which languages are spoken by only one country in republic governments? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What languages are only used by a single country with a republic government? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Find the city with the largest population that uses English. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the most populace city that speaks English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Find the name, population and expected life length of asian country with the largest area? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the name, population, and life expectancy of the largest Asian country by land? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is average life expectancy in the countries where English is not the official language? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the mean life expectancy of countries in which English is not the official language. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total number of people living in the nations that do not use English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many people live in countries that do not speak English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the official language spoken in the country whose head of state is Beatrix? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the official language used in the country the name of whose head of state is Beatrix. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total number of unique official languages spoken in the countries that are founded before 1930? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: For the countries founded before 1930, what is the total number of distinct official languages? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the countries that have greater surface area than any country in Europe? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which countries have greater area than that of any country in Europe? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the African countries that have a  population less than any country in Asia? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which African countries have a smaller population than that of any country in Asia? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which Asian countries have a population that is larger than any country in Africa? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the Asian countries which have a population larger than that of any country in Africa? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the country codes for countries that do not speak English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the country codes for countries that do not speak English. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the country codes of countries where people use languages other than English? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the country codes for countries in which people speak langauges that are not English. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the codes of the countries that do not speak English and whose government forms are not Republic? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the codes of countries that do not speak English and do not have Republics for governments. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which cities are in European countries where English is not the official language? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names of cities in Europe for which English is not the official language? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Whic`h unique cities are in  Asian countries where Chinese is the official language? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the different names of cities that are in Asia and for which Chinese is the official language. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the name, independence year, and surface area of the country with the smallest population? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the name, year of independence, and surface area of the country that has the lowest population. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the population, name and leader of the country with the largest area? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the name, population, and head of state for the country that has the largest area. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names of countries that speak more than 2 languages, as well as how many languages they speak? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Find the number of cities in each district whose population is greater than the average population of cities? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: How many cities in each district have a population that is above the average population across all cities? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Find the government form name and total population for each government form whose average life expectancy is longer than 72. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names and areas of countries with the top 5 largest area? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the names and surface areas of the 5 largest countries. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are names of countries with the top 3 largest population? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the names of the 3 most populated countries. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names of the nations with the 3 lowest populations? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the names of the 3 countries with the fewest people. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: how many countries are in Asia? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Count the number of countries in Asia. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the names of the countries that are in the continent of Europe and have a population of 80000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the names of countries that are in Europe and have a population equal to 80000. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000？ */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the total population and average surface area corresponding to countries in Noth America that have a surface area greater than 3000. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the cities whose population is between 160000 and 900000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the names of cities that have a population between 160000 and 900000. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Which language is spoken by the largest number of countries? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Give the language that is spoken in the most countries. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the language spoken by the largest percentage of people in each country? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What is the total number of countries where Spanish is spoken by the largest percentage of people? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Count the number of countries for which Spanish is the predominantly spoken language. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: What are the codes of countries where Spanish is spoken by the largest percentage of people? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE city (id NUMBER PRIMARY KEY, name TEXT, country_code TEXT, district TEXT, population NUMBER, FOREIGN KEY (country_code) REFERENCES country(code));

 CREATE TABLE sqlite_sequence (name TEXT, seq TEXT);

 CREATE TABLE country (code TEXT PRIMARY KEY, name TEXT, continent TEXT, region TEXT, surface_area NUMBER, indepdent_year NUMBER, population NUMBER, life_expectancy NUMBER, gnp NUMBER, gnp_old NUMBER, local_name TEXT, government_form TEXT, head_of_state TEXT, capital NUMBER, code2 TEXT);

 CREATE TABLE countrylanguage (countrycode TEXT PRIMARY KEY, language TEXT, is_official TEXT, percentage NUMBER, FOREIGN KEY (countrycode) REFERENCES country(code));


/* Answer the following: Return the codes of countries for which Spanish is the predominantly spoken language. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: How many conductors are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Count the number of conductors. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: List the names of conductors in ascending order of age. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the names of conductors, ordered by age? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the names of conductors whose nationalities are not "USA"? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Return the names of conductors that do not have the nationality "USA". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the record companies of orchestras in descending order of years in which they were founded? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Return the record companies of orchestras, sorted descending by the years in which they were founded. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What is the average attendance of shows? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Return the average attendance across all shows. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the maximum and minimum share of performances whose type is not "Live final". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Return the maximum and minimum shares for performances that do not have the type "Live final". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: How many different nationalities do conductors have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Count the number of different nationalities of conductors. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: List names of conductors in descending order of years of work. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the names of conductors, sorted descending by the number of years they have worked? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: List the name of the conductor with the most years of work. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What is the name of the conductor who has worked the greatest number of years? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Show the names of conductors and the orchestras they have conducted. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the names of conductors as well as the corresonding orchestras that they have conducted? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Show the names of conductors that have conducted more than one orchestras. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the names of conductors who have conducted at more than one orchestra? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Show the name of the conductor that has conducted the most number of orchestras. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What is the name of the conductor who has conducted the most orchestras? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Please show the name of the conductor that has conducted orchestras founded after 2008. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the names of conductors who have conducted orchestras founded after the year 2008? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Please show the different record companies and the corresponding number of orchestras. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: How many orchestras does each record company manage? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Please show the record formats of orchestras in ascending order of count. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the major record formats of orchestras, sorted by their frequency? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: List the record company shared by the most number of orchestras. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What is the record company used by the greatest number of orchestras? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: List the names of orchestras that have no performance. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the orchestras that do not have any performances? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Show the record companies shared by orchestras founded before 2003 and after 2003. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Find the number of orchestras whose record format is "CD" or "DVD". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Count the number of orchestras that have CD or DVD as their record format. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: Show the years in which orchestras that have given more than one performance are founded. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE conductor (conductor_id NUMBER PRIMARY KEY, name TEXT, age NUMBER, nationality TEXT, year_of_work NUMBER);

 CREATE TABLE orchestra (orchestra_id NUMBER PRIMARY KEY, orchestra TEXT, conductor_id NUMBER, record_company TEXT, year_of_founded NUMBER, major_record_format TEXT, FOREIGN KEY (conductor_id) REFERENCES conductor(conductor_id));

 CREATE TABLE performance (performance_id NUMBER PRIMARY KEY, orchestra_id NUMBER, type TEXT, date TEXT, official_ratings_(millions) NUMBER, weekly_rank TEXT, share TEXT, FOREIGN KEY (orchestra_id) REFERENCES orchestra(orchestra_id));

 CREATE TABLE show (show_id NUMBER, performance_id NUMBER, if_first_show OTHERS, result TEXT, attendance NUMBER, FOREIGN KEY (performance_id) REFERENCES performance(performance_id));


/* Answer the following: What are years of founding for orchestras that have had more than a single performance? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: How many high schoolers are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Count the number of high schoolers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names and grades of each high schooler. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names and grades for each high schooler? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show all the grades of the high schoolers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What is the grade of each high schooler? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What grade is Kyle in? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Return the grade for the high schooler named Kyle. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names of all high schoolers in grade 10. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of all high schoolers in grade 10? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the ID of the high schooler named Kyle. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What is Kyle's id? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: How many high schoolers are there in grade 9 or 10? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Count the number of high schoolers in grades 9 or 10. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the number of high schoolers for each grade. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: How many high schoolers are in each grade? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Which grade has the most high schoolers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Return the grade that has the greatest number of high schoolers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show me all grades that have at least 4 students. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Which grades have 4 or more high schoolers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the student IDs and numbers of friends corresponding to each. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: How many friends does each student have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names of high school students and their corresponding number of friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of the high schoolers and how many friends does each have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What is the name of the high schooler who has the greatest number of friends? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Return the name of the high school student with the most friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names of high schoolers who have at least 3 friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of high schoolers who have 3 or more friends? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names of all of the high schooler Kyle's friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Return the names of friends of the high school student Kyle. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: How many friends does the high school student Kyle have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Count the number of friends Kyle has. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show ids of all students who do not have any friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the ids of high school students who do not have friends? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show names of all high school students who do not have any friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of students who have no friends? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the ids of high schoolers who have friends and are also liked by someone else. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the ids of students who both have friends and are liked? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show name of all students who have some friends and also are liked by someone else. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of high schoolers who both have friends and are liked? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Count the number of likes for each student id. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: How many likes correspond to each student id? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names of high schoolers who have likes, and numbers of likes for each. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of high schoolers who have likes, and how many likes does each have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What is the name of the high schooler who has the greatest number of likes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Give the name of the student with the most likes. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names of students who have at least 2 likes. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of students who have 2 or more likes? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Show the names of students who have a grade higher than 5 and have at least 2 friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: How many likes does Kyle have? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Return the number of likes that the high schooler named Kyle has. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Find the average grade of all students who have some friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What is the average grade of students who have friends? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: Find the minimum grade of students who have no friends. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE high_schooler (id NUMBER PRIMARY KEY, name TEXT, grade NUMBER);

 CREATE TABLE friend (student_id NUMBER PRIMARY KEY, friend_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (friend_id) REFERENCES high_schooler(id));

 CREATE TABLE likes (student_id NUMBER PRIMARY KEY, liked_id NUMBER, FOREIGN KEY (student_id) REFERENCES high_schooler(id), FOREIGN KEY (liked_id) REFERENCES high_schooler(id));


/* Answer the following: What is the lowest grade of students who do not have any friends? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which states have both owners and professionals living there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the states where both owners and professionals live. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What is the average age of the dogs who have gone through any treatments? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the average age of the dogs who went through treatments. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which dogs have not cost their owner more than 1000 for treatment? List the dog names. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the names of the dogs for which the owner spent more than 1000 for treatment? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which first names are used for professionals or owners but are not used as dog names? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the first names that are used for professionals or owners but are not used as dog names. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which professional did not operate any treatment on dogs? List the professional's id, role and email. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Give me the id, role and email of the professionals who did not perform any treatment on dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which owner owns the most dogs? List the owner id, first name and last name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Return the owner id, first name and last name of the owner who has the most dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which professionals have done at least two treatments? List the professional's id, role, and first name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the id, role, and first name of the professionals who have performed two or more treatments? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What is the name of the breed with the most dogs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which breed do the most dogs have? Give me the breed name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What is the description of the treatment type that costs the least money in total? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Give me the description of the treatment type whose total cost is the lowest. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which professionals have done at least two types of treatments? List the professional id and cell phone. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the id and cell phone of the professionals who operate two or more types of treatments. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the first name and last name of the professionals who have done treatment with cost below average? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the date of each treatment, together with the first name of the professional who operated it. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the date and the operating professional's first name of each treatment? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the cost of each treatment and the corresponding treatment type description. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the cost and treatment type description of each treatment? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List each owner's first name, last name, and the size of his for her dog. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are each owner's first name, last name, and the size of their dog? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List pairs of the owner's first name and the dogs's name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are each owner's first name and their dogs's name? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the names of the dogs of the rarest breed and the treatment dates of them. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which dogs are of the rarest breed? Show their names and treatment dates. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the first names of owners living in Virginia and the names of dogs they own. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the arriving date and the departing date of the dogs who have gone through a treatment? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the arriving date and the departing date of the dogs that received a treatment. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the last name of the owner owning the youngest dog. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Who owns the youngest dog? Give me his or her last name. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the arriving date and the departing date of all the dogs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the arrival date and the departure date for all the dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How many dogs went through any treatments? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Count the number of dogs that went through a treatment. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How many professionals have performed any treatment to dogs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the number of professionals who have ever treated dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How many dogs have an age below the average? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Count the number of dogs of an age below the average. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How much does the most recent treatment cost? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Show me the cost of the most recently performed treatment. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How many dogs have not gone through any treatment? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Tell me the number of dogs that have received any treatment. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How many owners temporarily do not have any dogs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the number of owners who do not own any dogs at this moment. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How many professionals did not operate any treatment on dogs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the number of professionals who have not treated any dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What is the average age of all the dogs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Compute the average age of all the dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What is the age of the oldest dog? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Tell me the age of the oldest dog. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How much does each charge type costs? List both charge type and amount. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List each charge type and its amount. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: How much does the most expensive charge type costs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What is the charge amount of the most expensive charge type? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the email, cell phone and home phone of all the professionals. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are the email, cell phone and home phone of each professional? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are all the possible breed type and size type combinations? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: Find the distinct breed type and size type combinations for dogs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: List the first name of all the professionals along with the description of the treatment they have done. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE breeds (breed_code TEXT PRIMARY KEY, breed_name TEXT);

 CREATE TABLE charges (charge_id NUMBER PRIMARY KEY, charge_type TEXT, charge_amount NUMBER);

 CREATE TABLE sizes (size_code TEXT PRIMARY KEY, size_description TEXT);

 CREATE TABLE treatment_types (treatment_type_code TEXT PRIMARY KEY, treatment_type_description TEXT);

 CREATE TABLE owners (owner_id NUMBER PRIMARY KEY, first_name TEXT, last_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE dogs (dog_id NUMBER PRIMARY KEY, owner_id NUMBER, abandoned_yes_or_no TEXT, breed_code TEXT, size_code TEXT, name TEXT, age TEXT, date_of_birth TIME, gender TEXT, weight TEXT, date_arrived TIME, date_adopted TIME, date_departed TIME, FOREIGN KEY (owner_id) REFERENCES owners(owner_id), FOREIGN KEY (breed_code) REFERENCES breeds(breed_code), FOREIGN KEY (size_code) REFERENCES sizes(size_code));

 CREATE TABLE professionals (professional_id NUMBER PRIMARY KEY, role_code TEXT, first_name TEXT, street TEXT, city TEXT, state TEXT, zip_code TEXT, last_name TEXT, email_address TEXT, home_phone TEXT, cell_number TEXT);

 CREATE TABLE treatments (treatment_id NUMBER PRIMARY KEY, dog_id NUMBER, professional_id NUMBER, treatment_type_code TEXT, date_of_treatment TIME, cost_of_treatment NUMBER, FOREIGN KEY (dog_id) REFERENCES dogs(dog_id), FOREIGN KEY (professional_id) REFERENCES professionals(professional_id), FOREIGN KEY (treatment_type_code) REFERENCES treatment_types(treatment_type_code));


/* Answer the following: What are each professional's first name and description of the treatment they have performed? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: How many singers are there? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the count of singers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: List the name of singers in ascending order of net worth. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of singers ordered by ascending net worth? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the birth year and citizenship of singers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the birth years and citizenships of the singers? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: List the name of singers whose citizenship is not "France". */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of the singers who are not French citizens? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the name of singers whose birth year is either 1948 or 1949? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of the singers whose birth years are either 1948 or 1949? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the name of the singer with the largest net worth? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the name of the singer who is worth the most? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show different citizenship of singers and the number of singers of each citizenship. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: For each citizenship, how many singers are from that country? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Please show the most common citizenship of singers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the msot common singer citizenship? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show different citizenships and the maximum net worth of singers of each citizenship. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: For each citizenship, what is the maximum net worth? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show titles of songs and names of singers. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the song titles and singer names? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show distinct names of singers that have songs with sales more than 300000. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: what are the different names of the singers that have sales more than 300000? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the names of singers that have more than one song. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the names of the singers that have more than one songs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the names of singers and the total sales of their songs. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: For each singer name, what is the total sales for their songs? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: List the name of singers that do not have any song. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What is the sname of every sing that does not have any song? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: Show the citizenship shared by singers with birth year before 1945 and after 1955. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE singer (singer_id NUMBER PRIMARY KEY, name TEXT, birth_year NUMBER, net_worth_millions NUMBER, citizenship TEXT);

 CREATE TABLE song (song_id NUMBER PRIMARY KEY, title TEXT, singer_id NUMBER, sales NUMBER, highest_position NUMBER, FOREIGN KEY (singer_id) REFERENCES singer(singer_id));


/* Answer the following: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_feature_types (feature_type_code TEXT PRIMARY KEY, feature_type_name TEXT);

 CREATE TABLE reference_property_types (property_type_code TEXT PRIMARY KEY, property_type_description TEXT);

 CREATE TABLE other_available_features (feature_id NUMBER PRIMARY KEY, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, FOREIGN KEY (feature_type_code) REFERENCES reference_feature_types(feature_type_code));

 CREATE TABLE properties (property_id NUMBER PRIMARY KEY, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, FOREIGN KEY (property_type_code) REFERENCES reference_property_types(property_type_code));

 CREATE TABLE other_property_features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, FOREIGN KEY (property_id) REFERENCES properties(property_id), FOREIGN KEY (feature_id) REFERENCES other_available_features(feature_id));


/* Answer the following: How many available features are there in total? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_feature_types (feature_type_code TEXT PRIMARY KEY, feature_type_name TEXT);

 CREATE TABLE reference_property_types (property_type_code TEXT PRIMARY KEY, property_type_description TEXT);

 CREATE TABLE other_available_features (feature_id NUMBER PRIMARY KEY, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, FOREIGN KEY (feature_type_code) REFERENCES reference_feature_types(feature_type_code));

 CREATE TABLE properties (property_id NUMBER PRIMARY KEY, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, FOREIGN KEY (property_type_code) REFERENCES reference_property_types(property_type_code));

 CREATE TABLE other_property_features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, FOREIGN KEY (property_id) REFERENCES properties(property_id), FOREIGN KEY (feature_id) REFERENCES other_available_features(feature_id));


/* Answer the following: What is the feature type name of feature AirCon? */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_feature_types (feature_type_code TEXT PRIMARY KEY, feature_type_name TEXT);

 CREATE TABLE reference_property_types (property_type_code TEXT PRIMARY KEY, property_type_description TEXT);

 CREATE TABLE other_available_features (feature_id NUMBER PRIMARY KEY, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, FOREIGN KEY (feature_type_code) REFERENCES reference_feature_types(feature_type_code));

 CREATE TABLE properties (property_id NUMBER PRIMARY KEY, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, FOREIGN KEY (property_type_code) REFERENCES reference_property_types(property_type_code));

 CREATE TABLE other_property_features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, FOREIGN KEY (property_id) REFERENCES properties(property_id), FOREIGN KEY (feature_id) REFERENCES other_available_features(feature_id));


/* Answer the following: Show the property type descriptions of properties belonging to that code. */
SELECT 
INFO:root:/* Given the following database schema: */
CREATE TABLE reference_feature_types (feature_type_code TEXT PRIMARY KEY, feature_type_name TEXT);

 CREATE TABLE reference_property_types (property_type_code TEXT PRIMARY KEY, property_type_description TEXT);

 CREATE TABLE other_available_features (feature_id NUMBER PRIMARY KEY, feature_type_code TEXT, feature_name TEXT, feature_description TEXT, FOREIGN KEY (feature_type_code) REFERENCES reference_feature_types(feature_type_code));

 CREATE TABLE properties (property_id NUMBER PRIMARY KEY, property_type_code TEXT, date_on_market TIME, date_sold TIME, property_name TEXT, property_address TEXT, room_count NUMBER, vendor_requested_price NUMBER, buyer_offered_price NUMBER, agreed_selling_price NUMBER, apt_feature_1 TEXT, apt_feature_2 TEXT, apt_feature_3 TEXT, fld_feature_1 TEXT, fld_feature_2 TEXT, fld_feature_3 TEXT, hse_feature_1 TEXT, hse_feature_2 TEXT, hse_feature_3 TEXT, oth_feature_1 TEXT, oth_feature_2 TEXT, oth_feature_3 TEXT, shp_feature_1 TEXT, shp_feature_2 TEXT, shp_feature_3 TEXT, other_property_details TEXT, FOREIGN KEY (property_type_code) REFERENCES reference_property_types(property_type_code));

 CREATE TABLE other_property_features (property_id NUMBER, feature_id NUMBER, property_feature_description TEXT, FOREIGN KEY (property_id) REFERENCES properties(property_id), FOREIGN KEY (feature_id) REFERENCES other_available_features(feature_id));


/* Answer the following: What are the names of properties that are either houses or apartments with more than 1 room? */
SELECT 
