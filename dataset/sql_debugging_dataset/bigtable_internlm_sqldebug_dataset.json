[
    {
        "id": "1",
        "new_question": "What is the eligible free rate for K-12 students in Maya Lin School? In the database, eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_0",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `School Name` = 'Maya Lin'",
        "error_sql": " SELECT Percent ( % ) Eligible Free ( K - 12 ) FROM frpm WHERE School Name = \"Maya Lin School\"  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"%\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "2",
        "new_question": "Please list the lowest three eligible free rates for K-12 students in continuation schools.In the database, Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_1",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (K-12)` / `Enrollment (K-12)` IS NOT NULL ORDER BY `Free Meal Count (K-12)` / `Enrollment (K-12)` ASC LIMIT 3",
        "error_sql": " SELECT T1.School Name ,  T2.Free Meal Count (K-12) / T2.Enrollment (K-12) FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.School Code WHERE T1.School Type = \"Continuation\" ORDER BY T2.Free Meal Count (K-12) / T2.Enrollment (K-12) LIMIT 3  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Count\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "3",
        "new_question": "How many schools in Kings offer over 400 free meals but less than 800 free meals to students aged 5-17?",
        "source": "bird_question_21",
        "new_query": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Kings' AND `Free Meal Count (Ages 5-17)` > 400 AND `Free Meal Count (Ages 5-17)` < 800",
        "error_sql": " SELECT count(*) FROM frpm WHERE County Code  =  \"Kings\" AND Free Meal Count (Ages 5-17)  >  400 AND Free Meal Count (Ages 5-17)  <  800  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Code\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "4",
        "new_question": "Which school in Alameda has the highest average math score? In the database, AvgScrMath means average math score.",
        "source": "bird_question_22",
        "new_query": "SELECT sname FROM satscores WHERE cname = 'Alameda' AND sname IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1",
        "error_sql": " SELECT sname FROM satscores WHERE cds IN ( SELECT CDSCode FROM schools WHERE County = \"Alameda\" ) ORDER BY AvgScrMath DESC LIMIT 1  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "5",
        "new_question": "Which different county has the highest number of merged schools? Please provide the name of the city where each school is located.In the database, 'Merged' was mentioned in schools.StatusType.",
        "source": "bird_question_49",
        "new_query": "SELECT DISTINCT County, School, City FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Merged' AND school IS NOT NULL",
        "error_sql": " SELECT T1.School FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.School Code WHERE T2.Charter School  =  'Yes' AND T1.StatusType  =  'Merged'  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Code\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "6",
        "new_question": "What is the ratio of the number of closed schools to the number of merged schools in California that have mailing state addresses? In the database, Ratio = count(closed schools) / count(merged schools)",
        "source": "bird_question_55",
        "new_query": "SELECT CAST(SUM(CASE WHEN StatusType = 'Closed' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN StatusType = 'Merged' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "error_sql": " SELECT count(DISTINCT T1.School) / count(DISTINCT T2.School) FROM schools AS T1 JOIN schools AS T2 ON T1.School = T2.School WHERE T1.StatusType = \"Closed\" AND T2.StatusType = \"Merged\" AND T1.State <> \"\" AND T2.State <> \"\";  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "7",
        "new_question": "What is the city and website of the school with a postal code of 95203-3704? Please indicate the name of the school.",
        "source": "bird_question_58",
        "new_query": "SELECT City, Website, School FROM schools WHERE Zip = '95203-3704'",
        "error_sql": " SELECT City ,  Website FROM schools WHERE Zip = \"95203-3704\"  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "8",
        "new_question": "Which city are the schools managed by Mike Larson and Dante Alvarez located in respectively?",
        "source": "bird_question_59",
        "new_query": "SELECT City FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "error_sql": " SELECT T1.City FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.School Code WHERE T2.School Name IN ('Mike Larson', 'Dante Alvarez')  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Code\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "9",
        "new_question": "In chartered schools with charter number 0665, what are the names of all the administrators? Including the county where the school is located and the type of school status.In the database, Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name.",
        "source": "bird_question_63",
        "new_query": "SELECT AdmFName1, AdmLName1, County, StatusType FROM schools WHERE Charter = 1 AND CharterNum = '0665'",
        "error_sql": " SELECT T1.AdmFName1 ,  T1.AdmLName1 ,  T1.AdmFName2 ,  T1.AdmLName2 ,  T1.AdmFName3 ,  T1.AdmLName3 ,  T2.County ,  T2.SchoolStatusType FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.SchoolCode WHERE T1.CharterNum = 0665 AND T1.Charter = 1  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.County",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "10",
        "new_question": "What is the total amount of High School District closure in 1989 in the county of Fresno?",
        "source": "bird_question_67",
        "new_query": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND County = 'Fresno' AND DOCType = 'High School District'",
        "error_sql": " SELECT count(*) FROM schools WHERE StatusType  =  \"Closed\" AND OpenDate  <  1989 AND ClosedDate  >  1989 AND County  =  \"Fresno\" AND School  LIKE  \"%High%\"  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "11",
        "new_question": "How many active and merged District Community Day Schools are there in the city of Clovis?",
        "source": "bird_question_70",
        "new_query": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Merged' OR StatusType = 'Active') AND City = 'Clovis'",
        "error_sql": " SELECT count(*) FROM schools WHERE StatusType  =  \"Active\" AND StatusType  =  \"Merged\" AND CommunityDaySchool  =  \"Yes\" AND City  =  \"Clovis\"  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: CommunityDaySchool",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "12",
        "new_question": "What is the administrator's first name that oversees the school with Charter number 00D8? Indicate the street, the city where the school is situated, and the name of the school.",
        "source": "bird_question_86",
        "new_query": "SELECT AdmFName1, Street, City, School FROM schools WHERE CharterNum = '00D8'",
        "error_sql": " SELECT T1.AdmFName1 FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.School Code WHERE T2.Charter School Number = \"00D8\"  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Code\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "13",
        "new_question": "How many owner and disponent dispositions are there from client number 20 to client number 30?",
        "source": "bird_question_172",
        "new_query": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE client_id BETWEEN 20 AND 30",
        "error_sql": " SELECT count(*) FROM disp WHERE client_id BETWEEN 20 AND 30;  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "14",
        "new_question": "How many  triple-bond molecules are there? In the database, triple type bonds refers to bond_type = '#'.",
        "source": "bird_question_202",
        "new_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "error_sql": " SELECT count(DISTINCT molecule_id) FROM bond WHERE bond_type = '#' GROUP BY molecule_id HAVING count(*)  >=  3  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "15",
        "new_question": "In how many molecules is there no bromine? In the database, atoms with no bromine refers to element ! = 'br'.",
        "source": "bird_question_203",
        "new_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM atom AS T WHERE T.element <> 'br'",
        "error_sql": " SELECT count(DISTINCT molecule_id) FROM atom WHERE element != 'br' GROUP BY molecule_id HAVING count(*) = (SELECT count(*) FROM atom WHERE molecule_id = atom.molecule_id)  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "16",
        "new_question": "What are the atom IDs that have the same atom ID 2 of TR000_2? In the database, TR000_2 is the atom id; atom ID 2 refers to atom_id2.",
        "source": "bird_question_224",
        "new_query": "SELECT T.atom_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "error_sql": " SELECT atom_id FROM connected WHERE atom_id2 = (SELECT atom_id FROM atom WHERE molecule_id = \"TR000_2\")  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "17",
        "new_question": "What is the ID of bond that molecule TR000 has when involved in any bonds?In the database, ID of bond refers to bond_id; TR000 is the molecule id.",
        "source": "bird_question_229",
        "new_query": "SELECT DISTINCT T.bond_id FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "error_sql": " SELECT bond_id FROM connected WHERE atom_id = (SELECT atom_id FROM atom WHERE molecule_id = 'TR000')  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "18",
        "new_question": "Give me the bond ID of the double bond type.In the database, double bond refers to bond_type = '='.",
        "source": "bird_question_275",
        "new_query": "SELECT DISTINCT T.bond_id FROM bond AS T WHERE T.bond_type = '='",
        "error_sql": " SELECT bond_id FROM bond WHERE bond_type = \" = \"  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "19",
        "new_question": "Determine the percentage of single bonds formed in all compounds containing the molecule TR013. In the database, TR013 is the molecule id; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(all bond_id)) as percent where molecule_id = 'TR013'.",
        "source": "bird_question_287",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR013'",
        "error_sql": " SELECT count(*) FROM bond WHERE molecule_id = 'TR013' AND bond_type = ' - ';  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate"
    },
    {
        "id": "20",
        "new_question": "How many the black cards available without powerful foils? In the database, 'black' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null.",
        "source": "bird_question_341",
        "new_query": "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "error_sql": " SELECT count(*) FROM cards WHERE borderColor = \"black\" AND cardKingdomFoilId NOT IN ( SELECT cardKingdomFoilId FROM cards WHERE cardKingdomId IS NOT NULL )  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "21",
        "new_question": "List the names and availability of cards that consume more face conversion magic points. In the database, more converted mana for the face refers to Max(faceConvertedManaCost).",
        "source": "bird_question_342",
        "new_query": "SELECT name,availability FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "error_sql": " SELECT name ,  availability FROM cards WHERE max(faceConvertedManaCost) > 0  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: misuse of aggregate function max()",
            "error_type": [
                "OperationalError",
                "misuse of aggregate"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "22",
        "new_question": "List the types and availability of cards painted by artist Aaron Boyd for card art? In the database, 'Aaron Boyd' is artist.",
        "source": "bird_question_354",
        "new_query": "SELECT type,availability FROM cards WHERE artist = 'Aaron Boyd'",
        "error_sql": " SELECT T1.type ,  T1.availability FROM cards AS T1 JOIN card_art AS T2 ON T1.id = T2.card_id JOIN artists AS T3 ON T2.artist_id = T3.id WHERE T3.name = \"Aaron Boyd\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such table: card_art",
            "error_type": [
                "OperationalError",
                "no such table"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "23",
        "new_question": "What is the name of the card with the multiverse number 150317? In the database, multiverse number 150317 refers to multiverseid = 150317.",
        "source": "bird_question_422",
        "new_query": "SELECT name FROM foreign_data WHERE multiverseid = 150317",
        "error_sql": " SELECT name FROM cards WHERE multiverseId = 150317  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "24",
        "new_question": "What are the names of card games in French? In the database, French refer to language.",
        "source": "bird_question_440",
        "new_query": "SELECT DISTINCT name FROM foreign_data WHERE language = 'French'",
        "error_sql": " SELECT name FROM cards WHERE language  =  \"French\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: language",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "25",
        "new_question": "What are the tags on the post titled 'What is normality?'?In the database, 'What is normality?' is the Title of post; tags refers to Tags",
        "source": "bird_question_572",
        "new_query": "SELECT Tags FROM posts WHERE Title = 'What is normality?'",
        "error_sql": " SELECT T1.TagName  FROM tags AS T1 JOIN posts AS T2 ON T1.Id = T2.Tags  WHERE T2.Title = \"What is normality?\"  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "26",
        "new_question": "How many the contents of comments with a score of 10?In the database, score of 10 refers to Score = 10; contents of comments refers to Text.",
        "source": "bird_question_573",
        "new_query": "SELECT COUNT(Text) FROM comments WHERE Score = 10",
        "error_sql": " SELECT Text FROM comments WHERE Score = 10  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "27",
        "new_question": "What are the comments posted by user ID 37?",
        "source": "bird_question_588",
        "new_query": "SELECT Text FROM comments WHERE UserId = 37",
        "error_sql": " SELECT * FROM comments WHERE UserId = 37  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "28",
        "new_question": "What is the location of Bahrain International Circuit?",
        "source": "bird_question_910",
        "new_query": "SELECT location FROM circuits WHERE name = 'Bahrain International Circuit'",
        "error_sql": " SELECT location FROM circuits WHERE circuitId = 102  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "29",
        "new_question": "List the driver IDs for position number 1.",
        "source": "bird_question_966",
        "new_query": "SELECT driverId FROM driverStandings WHERE position = 1",
        "error_sql": " SELECT driverId FROM results WHERE position = 1  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "30",
        "new_question": "Please list the mailing address of all the charter schools in Livermore Valley Joint Unified.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm.",
        "source": "bird_question_2",
        "new_query": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Livermore Valley Joint Unified' AND T1.`Charter School (Y/N)` = 1",
        "error_sql": " SELECT MailStreet ,  MailStrAbr ,  MailCity ,  MailZip FROM schools WHERE Charter = 1 AND District = \"Livermore Valley Joint Unified\"  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "31",
        "new_question": "What is the type the school with the highest FRPM count for K-12 students?",
        "source": "bird_question_3",
        "new_query": "SELECT T2.School Type FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "error_sql": " SELECT School Type FROM frpm ORDER BY FRPM Count (K-12) DESC LIMIT 1  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Count\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "32",
        "new_question": "Please list the phone numbers of the direct charter-funded schools that are opened before 1985/1/1.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the frpm.",
        "source": "bird_question_4",
        "new_query": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate < '1985-01-01'",
        "error_sql": " SELECT T1.Phone FROM schools AS T1 JOIN frpm AS T2 ON T1.CDSCode = T2.School Code WHERE T1.CharterNum = \"0\" AND T1.OpenDate < \"1985-01-01\"  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Code\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "33",
        "new_question": "Please list the schools with an average score in Write above 450 in the SAT test are exclusively virtual?In the database, Exclusively virtual refers to Virtual = 'F'.",
        "source": "bird_question_5",
        "new_query": "SELECT DISTINCT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrWrite > 450",
        "error_sql": " SELECT cname ,  sname FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE Virtual = 'F' AND AvgScrWrite > 450  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "34",
        "new_question": "What is the the mailing address of the school that has the highest number of test takers with an SAT score of over 1500?",
        "source": "bird_question_7",
        "new_query": "SELECT T2.MailStreet FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "error_sql": " SELECT MailStreet ,  MailStrAbr ,  MailCity ,  MailZip FROM schools JOIN satscores ON schools.CDSCode = satscores.cds ORDER BY NumGE1500 DESC LIMIT 1  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "35",
        "new_question": "What is the number of SAT test takers of the schools with the highest FRPM count for students aged 5-17?",
        "source": "bird_question_8",
        "new_query": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (Ages 5-17)` DESC LIMIT 1 )",
        "error_sql": " SELECT NumTstTakr FROM satscores WHERE cds = (SELECT CDSCode FROM frpm ORDER BY FRPMCount_Ages_5_17 DESC LIMIT 1)  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: FRPMCount_Ages_5_17",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "36",
        "new_question": "Among the schools with an SAT excellence rate of over 0.9, what is the lowest eligible free rate for students aged 5-17?In the database, Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`.",
        "source": "bird_question_12",
        "new_query": "SELECT MIN(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.9",
        "error_sql": " SELECT Percent ( % ) Eligible Free ( Ages 5-17 ) FROM frpm WHERE Enrollment ( Ages 5-17 ) > 0 INTERSECT SELECT Percent ( % ) Eligible Free ( Ages 5-17 ) FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE NumGE1500 / NumTstTakr > 0.9  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"%\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "37",
        "new_question": "Please list the number of SAT test takers of the schools with the top 3 SAT excellence rate.In the database, Excellence rate = NumGE1500 / NumTstTakr.",
        "source": "bird_question_13",
        "new_query": "SELECT T2.NumTstTakr FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "error_sql": " SELECT NumTstTakr FROM satscores ORDER BY NumGE1500 / NumTstTakr DESC LIMIT 3  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "38",
        "new_question": "List the top three schools, by descending order, from the highest to the lowest, the most number of free meal (Ages 5-17). Please give their NCES school identification number.",
        "source": "bird_question_14",
        "new_query": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Free Meal Count (Ages 5-17)` DESC LIMIT 3",
        "error_sql": " SELECT NCESDist FROM frpm ORDER BY Free Meal Count ( Ages 5 - 17 ) DESC LIMIT 3  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Meal\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "39",
        "new_question": "Which active district has the highest average score in Math?",
        "source": "bird_question_15",
        "new_query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "error_sql": " SELECT District FROM satscores GROUP BY District ORDER BY AvgScrMath DESC LIMIT 1  ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: District",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "40",
        "new_question": "In the carcinogenic molecules, how many contain chlorine atoms?In the database, carcinogenic molecules refers to label = '+'; chlorine atoms refers to element = 'cl'.",
        "source": "bird_question_196",
        "new_query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '+'",
        "error_sql": " SELECT count(*) FROM atom WHERE element = 'cl' AND molecule_id IN (SELECT molecule_id FROM molecule WHERE label = '+')  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "41",
        "new_question": "Calculate the max number of hydrogen ygen atoms in single-bonded molecules.In the database, single-bonded molecules refers to bond_type = '-' ; average number of hydrogen ygen atom = AVG(element = 'h').",
        "source": "bird_question_197",
        "new_query": "SELECT MAX(hydrogen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS hydrogen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'h'  GROUP BY T1.molecule_id) AS hydrogen_count",
        "error_sql": " SELECT max(AVG(element = 'h')) FROM atom WHERE bond_type = '-'  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.OperationalError: misuse of aggregate function AVG()",
            "error_type": [
                "OperationalError",
                "misuse of aggregate"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate"
    },
    {
        "id": "42",
        "new_question": "In the molecule containing oxygen atoms, how many are carcinogenic?In the database, carcinogenic refers to label = '+'; oxygen atoms refers to element = 'o'.",
        "source": "bird_question_199",
        "new_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "error_sql": " SELECT count(*) FROM molecule WHERE label = '+' INTERSECT SELECT count(*) FROM atom WHERE element = 'o'  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "43",
        "new_question": "Name the card and artist with the most ruling information. Also state the border color of card.In the database, with the most ruling information refers to Max(count(rulings.uuid)).",
        "source": "bird_question_349",
        "new_query": "SELECT T1.name, T1.artist, T1.borderColor FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.artist ORDER BY COUNT(DISTINCT T1.uuid) DESC LIMIT 1",
        "error_sql": " SELECT T1.name ,  T1.artist ,  T1.borderColor FROM cards AS T1 JOIN rulings AS T2 ON T1.id = T2.cardId GROUP BY T1.id ORDER BY count(T2.uuid) DESC LIMIT 1  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.cardId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "44",
        "new_question": "State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.",
        "source": "bird_question_350",
        "new_query": "SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "error_sql": " SELECT type FROM cards WHERE name = \"Annul\" AND number = 29  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "45",
        "new_question": "How many cards which have alternative language in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_351",
        "new_query": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": " SELECT count(*) FROM foreign_data WHERE language = \"Japanese\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "46",
        "new_question": "Calculate the percentage of the cards availabe in Japanese.In the database, 'Japanese' is the language; percentage = Divide(Sum(id where language = 'Japanese'), Count(id)) *100.",
        "source": "bird_question_352",
        "new_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "error_sql": " SELECT Sum(id) / Count(id) * 100 FROM cards WHERE language = \"Japanese\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: language",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "47",
        "new_question": "List all the sets available in Italian translation. State the type of cards per set.In the database, Italian translation refers to language = 'Italian'.",
        "source": "bird_question_353",
        "new_query": "SELECT T1.name, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "error_sql": " SELECT setCode ,  type FROM sets JOIN set_translations ON sets.id = set_translations.setId WHERE set_translations.language = 'Italian'  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: set_translations.setId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "48",
        "new_question": "What are the translation for the set that card 'Angel of Mercy' is in?In the database, 'Angel of Mercy' is the name of card.",
        "source": "bird_question_360",
        "new_query": "SELECT translation FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "error_sql": " SELECT translation FROM set_translations WHERE setCode = (SELECT setCode FROM cards WHERE name = \"Angel of Mercy\")  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "49",
        "new_question": "What is the format of card 'Cloudchaser Eagle'?In the database, 'Cloudchaser Eagle' is the name of card.",
        "source": "bird_question_364",
        "new_query": "SELECT DISTINCT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "error_sql": " SELECT format FROM legalities WHERE uuid = 'c0d8a5e6-4f12-41b3-9a7d-d71db8e6c06d';  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "50",
        "new_question": "List down the name of artists for cards in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_381",
        "new_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": " SELECT name FROM cards WHERE language = \"Japanese\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: language",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "51",
        "new_question": "List down the count of artists for cards that only available in paper and Japanese language?In the database, available in paper refers to availability = 'paper'; 'Japanese' is the language.",
        "source": "bird_question_382",
        "new_query": "SELECT COUNT(T1.artist) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "error_sql": " SELECT count(DISTINCT artist) FROM cards WHERE availability = \"paper\" AND language = \"Japanese\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: language",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "52",
        "new_question": "What are the color of cards that have future frame version and what are the legality status of these cards?In the database, future frame version refers to frameVersion = 'future'.",
        "source": "bird_question_386",
        "new_query": "SELECT colors FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "error_sql": " SELECT T1.colorIdentity ,  T1.legalities FROM cards AS T1 JOIN legalities AS T2 ON T1.multiverseId = T2.uuid WHERE T1.frameVersion = \"future\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.legalities",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "53",
        "new_question": "What are the cards for set OGW? State the artist for these cards.In the database, set OGW refers to setCode = 'OGW'.",
        "source": "bird_question_387",
        "new_query": "SELECT id, artist FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "error_sql": " SELECT T1.name ,  T1.artist FROM cards AS T1 JOIN sets AS T2 ON T1.setCode = T2.code WHERE T2.code = \"OGW\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "54",
        "new_question": "What are the cards in set 10E with converted mana of 5 have translation and what are the translation?In the database, set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5.",
        "source": "bird_question_388",
        "new_query": "SELECT id, translation FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "error_sql": " SELECT T1.name ,  T2.translation FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T1.setCode = \"10E\" AND T1.convertedManaCost = 5  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "55",
        "new_question": "List down the name of cards with original types of Creature - Elf and the information of rulings for these cards.In the database, Creature - Elf is the originalType.",
        "source": "bird_question_389",
        "new_query": "SELECT T1.id, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "error_sql": " SELECT T1.name ,  T2.text FROM cards AS T1 JOIN rulings AS T2 ON T1.id = T2.cardId WHERE T1.originalType LIKE \"%Creature - Elf%\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.cardId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "56",
        "new_question": "What are the border color text of cards from ID 1-20? What are the format of these cards?In the database, ID 1-20 refers to id BETWEEN 1 AND 20.",
        "source": "bird_question_390",
        "new_query": "SELECT T1.borderColor, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "error_sql": " SELECT T1.borderColor ,  T1.format FROM cards AS T1 JOIN legalities AS T2 ON T1.multiverseId = T2.multiverseid WHERE T1.id BETWEEN 1 AND 20  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.format",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "57",
        "new_question": "Pick 3 cards with rarity of uncommon, list down the artists for these cards according to ascending order of it's ruling date.In the database, uncommon refers to rarity = 'uncommon'.",
        "source": "bird_question_392",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "error_sql": " SELECT T1.artist FROM cards AS T1 JOIN rulings AS T2 ON T1.id = T2.cardId WHERE T1.rarity = \"uncommon\" ORDER BY T2.date ASC LIMIT 3  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.cardId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "58",
        "new_question": "Lists availability of cards in German.In the database, German refer to language; availability refer to the availability where subtypes is not null AND supertypes is not null",
        "source": "bird_question_407",
        "new_query": "SELECT T1.availability FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "error_sql": " SELECT T1.name FROM cards AS T1 JOIN set_translations AS T2 ON T1.setCode = T2.setCode WHERE T2.language = \"German\" AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "59",
        "new_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its all types.In the database, available in paper refers to availability = 'paper'.",
        "source": "bird_question_410",
        "new_query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "error_sql": " SELECT TYPE FROM cards WHERE artist = \"Erica Yang\" AND availability = \"paper\" AND legalities.status != \"banned\" AND cards.uuid IN (SELECT cardUUID FROM legalities) AND cards.legalities_id = legalities.id AND legalities.format = \"pauper\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: legalities.status",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "60",
        "new_question": "What is the foreign text of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?In the database, in French refers to language = 'French'; black border color refers to borderColor = 'black'.",
        "source": "bird_question_412",
        "new_query": "SELECT text FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "error_sql": " SELECT t.text FROM foreign_data AS t JOIN cards AS c ON t.multiverseid = c.multiverseId WHERE c.layout = 'normal' AND c.borderColor = 'black' AND c.type = 'Creature' AND c.artist = 'Matthew D. Wilson' AND t.language = 'French'  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "61",
        "new_question": "What translation is the set of 180 cards that belongs to the Ravnica block translated into?In the database, set of 180 cards refers to baseSetSize = 180.",
        "source": "bird_question_414",
        "new_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "error_sql": " SELECT translation FROM set_translations WHERE setCode = \"RNA\" AND language != \"en\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "62",
        "new_question": "What is the code of set number 5 and its translation?In the database, set number 5 refers to id = 5.",
        "source": "bird_question_428",
        "new_query": "SELECT T1.code, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "error_sql": " SELECT code ,  translation FROM sets AS T1 JOIN set_translations AS T2 ON T1.id = T2.setCode WHERE T1.id = 5  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "63",
        "new_question": "Please list top two sets of cards with their release date that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "source": "bird_question_430",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "error_sql": " SELECT TOP 2 name FROM sets WHERE id IN (SELECT setCode FROM set_translations WHERE language = \"Italian\" AND block = \"Shadowmoor\") ORDER BY releaseDate  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"2\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "64",
        "new_question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set release date in your response.In the database, available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'.",
        "source": "bird_question_431",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "error_sql": " SELECT name ,  releaseDate FROM sets WHERE isForeignOnly = 1 AND isFoilOnly = 1 AND language = 'Japanese'  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: language",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "challenging"
    },
    {
        "id": "65",
        "new_question": "State the name of the set with release date of 07/13/2007?",
        "source": "bird_question_441",
        "new_query": "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "error_sql": " SELECT name FROM sets WHERE releaseDate = \"07/13/2007\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "66",
        "new_question": "Mention the base set size and translation of the set that was in block named 'Masques' and 'Mirage'.",
        "source": "bird_question_442",
        "new_query": "SELECT DISTINCT T1.baseSetSize, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
        "error_sql": " SELECT baseSetSize ,  translation FROM sets AS T1 JOIN set_translations AS T2 ON T1.id = T2.setCode WHERE T1.block IN ( 'Masques' ,  'Mirage' )  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "67",
        "new_question": "Give the code of sets have expansion type of 'box'?In the database, code of sets refers to setCode.",
        "source": "bird_question_443",
        "new_query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'box' GROUP BY T2.setCode",
        "error_sql": " SELECT setCode FROM sets WHERE type = \"box\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: setCode",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "68",
        "new_question": "Name the artist for the card that has boros watermark? List out the type of this card.",
        "source": "bird_question_444",
        "new_query": "SELECT DISTINCT T1.artist, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "error_sql": " SELECT TYPE FROM cards WHERE watermark = \"Boros\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "69",
        "new_question": "What is the language and type of the card that has colorpie watermark? List out the type of this card.",
        "source": "bird_question_445",
        "new_query": "SELECT DISTINCT T2.language, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "error_sql": " SELECT TYPE FROM cards WHERE watermark = \"colorpie\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "70",
        "new_question": "Give the translation of sets have expansion commander type?In the database, translation of sets refers to translation.",
        "source": "bird_question_447",
        "new_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "error_sql": " SELECT translation FROM set_translations WHERE setCode IN (SELECT code FROM sets WHERE type = \"Commander\")  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "71",
        "new_question": "Name the foreign name of the card that has abzan watermark? List out the artist of this card.",
        "source": "bird_question_448",
        "new_query": "SELECT DISTINCT T1.name, T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "error_sql": " SELECT T1.name ,  T1.artist FROM cards AS T1 JOIN foreign_data AS T2 ON T1.id = T2.multiverseid WHERE T2.text LIKE \"%abzan%\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "72",
        "new_question": "For the user whose display name is 'DatEpicCoderGuyWhoPrograms', what is his/her badge's user id?In the database, 'DatEpicCoderGuyWhoPrograms' is the DisplayName.",
        "source": "bird_question_570",
        "new_query": "SELECT T2.UserId FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "error_sql": " SELECT TOP 1 Id FROM users WHERE DisplayName = \"DatEpicCoderGuyWhoPrograms\"  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"1\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "73",
        "new_question": "What is the overall rating of the football player Franco Zennaro?",
        "source": "bird_question_1045",
        "new_query": "SELECT DISTINCT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "error_sql": " SELECT overall_rating FROM Player_Attributes WHERE player_api_id = \"Franco Zennaro\"  ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "74",
        "new_question": "Which of these players performs the best in heading accuracy, Alexis, Ariel Borysiuk or Arouna Kone? List the corresponding values.",
        "source": "bird_question_1085",
        "new_query": "SELECT t1.player_name, t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "error_sql": " SELECT Player_Attributes.heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = \"Alexis\" UNION SELECT Player_Attributes.heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = \"Ariel Borysiuk\" UNION SELECT Player_Attributes.heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE Player.player_name = \"Arouna Kone\"  ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate"
    },
    {
        "id": "75",
        "new_question": "Which client possesses a gold type card, give his/her client id.",
        "source": "bird_question_103",
        "new_query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold'",
        "error_sql": " SELECT client_id FROM card WHERE type = \"gold\"  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "76",
        "new_question": "For the client who applied 98832 USD loan in 1996/1/3, what was his/her district_id?",
        "source": "bird_question_113",
        "new_query": "SELECT T3.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "error_sql": " SELECT T1.district_id FROM client AS T1 JOIN loan AS T2 ON T1.client_id = T2.client_id WHERE T2.amount = 98832 AND T2.date = \"1996-01-03\"  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "77",
        "new_question": "State the district and region for loan ID with status A. In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "new_query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status = 'A'",
        "error_sql": " SELECT A2 ,  A3 FROM loan WHERE loan_id = \"A\"  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: A2",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "78",
        "new_question": "Provide the account ID, district and region for loan duration greater than 24 months. In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "new_query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration > 24",
        "error_sql": " SELECT account_id ,  A2 ,  A3 FROM district WHERE A2 IN ( SELECT T1.A2 FROM district AS T1 JOIN loan AS T2 ON T1.district_id = T2.district_id WHERE T2.duration > 24 )  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: account_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "79",
        "new_question": "List the loan ID, district and average salary for loan with payments more than USD2,000. In the database, A2 refers to the names of districts, A11 refers to average salary",
        "source": "bird_question_124",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.payments > 2000",
        "error_sql": " SELECT loan_id ,  A2 ,  A11 FROM district WHERE A2 IN ( SELECT T1.district_id FROM account AS T1 JOIN loan AS T2 ON T1.account_id = T2.account_id GROUP BY T1.district_id HAVING sum(T2.payments) > 2000 )  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: loan_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "80",
        "new_question": "List the client_id of the account holders in South Bohemia that still do not own credit cards. In the database, A3 contains the region names; South Bohemia is one of region names.",
        "source": "bird_question_130",
        "new_query": "SELECT T3.client_id FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "error_sql": " SELECT client_id FROM account WHERE district_id = (SELECT district_id FROM district WHERE A3 = \"South Bohemia\") EXCEPT SELECT card_id FROM card  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "81",
        "new_question": "When is the latest loan by male borrowers? In the database, Male refers to gender = 'M'",
        "source": "bird_question_132",
        "new_query": "SELECT MAX(T3.date) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'",
        "error_sql": " SELECT date FROM loan WHERE gender = \"M\" ORDER BY date DESC LIMIT 1  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: gender",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "82",
        "new_question": "Which districts have transactions with average balance greater than -30,300 in 1997?",
        "source": "bird_question_141",
        "new_query": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING AVG(T3.balance) > -30000",
        "error_sql": " SELECT district_id FROM trans WHERE YEAR(date) = 1997 GROUP BY district_id HAVING avg(balance) > -30300  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: district_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "83",
        "new_question": "What is the gender of account owner number 130?",
        "source": "bird_question_174",
        "new_query": "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "error_sql": " SELECT gender FROM client WHERE client_id = (SELECT client_id FROM account WHERE account_id = 130)  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "84",
        "new_question": "Please provide a list of female clients and whose account branch is in East Bohemia, along with their IDs.",
        "source": "bird_question_180",
        "new_query": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND T1.gender = 'F'",
        "error_sql": " SELECT client_id FROM client WHERE gender = \"Female\" AND district_id IN ( SELECT district_id FROM district WHERE A2 = \"East Bohemia\" )  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "85",
        "new_question": "Provide the IDs and gender of the client with high level credit card, which is eligible for loans. In the database, when type is gold, the credit card is high-level",
        "source": "bird_question_194",
        "new_query": "SELECT T1.client_id, T3.gender FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "error_sql": " SELECT client_id ,  gender FROM client JOIN card ON client.client_id = card.client_id WHERE card.type = \"gold\"  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: card.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "86",
        "new_question": "Lists the artist of all Creature-type cards with legal status. In the database, legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature'.",
        "source": "bird_question_406",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "error_sql": " SELECT T1.artist FROM cards AS T1 JOIN legalities AS T2 ON T1.multiverseid = T2.uuid WHERE T2.status = \"legal\" AND T1.types = \"Creature\"  ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "87",
        "new_question": "Among posts by user with Id 15 and 20, which one has higher popularity? In the database, Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'",
        "source": "bird_question_634",
        "new_query": "SELECT T1.Id FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.Id = 15 OR T1.Id = 20 GROUP BY T1.Id ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "error_sql": " SELECT MAX(t.ViewCount) FROM posts AS t JOIN users AS u ON t.OwnerUserId = u.Id WHERE u.DisplayName = \"Noah Snyder\" OR u.DisplayName = \"Harvey Motulsky\"  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "challenging"
    },
    {
        "id": "88",
        "new_question": "How many comments did Neil McGuigan get in his posts after 2010-07-20? In the database, negative comment refers to score < 60; DisplayName = 'Neil McGuigan'",
        "source": "bird_question_636",
        "new_query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.CreationDate > '2010-07-20'",
        "error_sql": " SELECT count(*) FROM comments AS T1 JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CreationDate > \"2010-07-20\" AND T1.UserDisplayName = \"Neil McGuigan\" AND T1.Score < 60  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.CreationDate",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "89",
        "new_question": "State all the tags used by Mark Meckes in his posts that has at least five answers. In the database, DisplayName = 'Mark Meckes'",
        "source": "bird_question_637",
        "new_query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.AnswerCount >= 5",
        "error_sql": " SELECT T1.TagName FROM tags AS T1 JOIN posts AS T2 ON T1.Id = T2.Tags WHERE T2.OwnerDisplayName = \"Mark Meckes\" AND T2.AnswerCount  >=  5  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "90",
        "new_question": "Mention the display name and website url of the user who owned the excerpt post with hypothesis-testing tag. In the database, user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing'",
        "source": "bird_question_654",
        "new_query": "SELECT T3.DisplayName, T3.WebsiteUrl FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "error_sql": " SELECT DisplayName ,  WebsiteUrl FROM users WHERE Id = ( SELECT OwnerUserId FROM tags WHERE TagName = \"hypothesis-testing\" )  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: OwnerUserId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "91",
        "new_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who own it. In the database, views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets'",
        "source": "bird_question_685",
        "new_query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "error_sql": " SELECT ViewCount ,  DisplayName FROM posts WHERE Body = \"Computer Game Datasets\"  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: DisplayName",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "92",
        "new_question": "What is the gender of the dumbest superhero? In the database, the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'.",
        "source": "bird_question_736",
        "new_query": "SELECT T1.gender_id FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "error_sql": " SELECT T1.gender FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value = (SELECT MIN(T3.attribute_value) FROM hero_attribute AS T3 JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = \"Intelligence\")  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.gender",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "93",
        "new_question": "What are the publisher of the superheroes with the power of death touch? In the database, publisher of the superheroes refers to publisher_id; the power of death touch refers to power_name = 'Death Touch'",
        "source": "bird_question_739",
        "new_query": "SELECT T1.publisher_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "error_sql": " SELECT T1.publisher_name FROM publisher AS T1 JOIN superhero AS T2 ON T1.id = T2.publisher_id JOIN hero_power AS T3 ON T2.id = T3.hero_id JOIN superpower AS T4 ON T3.power_id = T4.id WHERE T4.power_name = \"Death Touch\"  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "94",
        "new_question": "For the Bahrain Grand Prix with 3 rounds, how many drivers not finished the game? In the database, drivers who finished the race refers to time has records",
        "source": "bird_question_862",
        "new_query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.round = 3 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "error_sql": " SELECT count(DISTINCT driverId) FROM results WHERE raceId = (SELECT raceId FROM races WHERE name = \"Bahrain Grand Prix\" AND round IN (1,2,3)) AND time IS NULL  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "95",
        "new_question": "What is the nationality of the driver who finished second in the San Marino Grand Prix in 2006? In the database, finished second refers to position = 2.",
        "source": "bird_question_874",
        "new_query": "SELECT T3.nationality FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "error_sql": " SELECT nationality FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE results.position = 2 AND races.raceId = (SELECT raceId FROM races WHERE name = \"San Marino Grand Prix\" AND YEAR = 2006)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: races.raceId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "96",
        "new_question": "Name all drivers in the 2010 Singapore Grand Prix order by their points.",
        "source": "bird_question_891",
        "new_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.points ASC",
        "error_sql": " SELECT driverId FROM constructorResults WHERE raceId = 1025 ORDER BY points  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: driverId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "97",
        "new_question": "What is the best lap time recorded? List the code of driver and race with such recorded lap time. In the database, the best lap time refers to min(time).",
        "source": "bird_question_894",
        "new_query": "SELECT T2.milliseconds, T1.code, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "error_sql": " SELECT T1.driverId ,  T1.raceId FROM lapTimes AS T1 JOIN results AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T1.time = (SELECT min(T1.time) FROM lapTimes AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "98",
        "new_question": "State the race and date of race in which Alex Yoong was in track number less than 10. In the database, track number less than 10 refers to position < 10.",
        "source": "bird_question_902",
        "new_query": "SELECT T1.name, T1.date FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10",
        "error_sql": " SELECT raceId ,  date FROM races WHERE YEAR = (SELECT YEAR FROM drivers WHERE forename = \"Alex\" AND surname = \"Yoong\") AND position < 10  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: position",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "99",
        "new_question": "Which was Lewis Hamilton first race? What was his position recorded for his first race event? In the database, first race refers to min(Year).",
        "source": "bird_question_906",
        "new_query": "SELECT T1.name, T2.position FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "error_sql": " SELECT T1.name ,  T2.position FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.forename = \"Lewis\" AND T1.surname = \"Hamilton\" ORDER BY T2.raceid ASC LIMIT 1  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "100",
        "new_question": "Please list the year of Formula_1 races that Lewis Hamilton participated, remove duplicates.",
        "source": "bird_question_929",
        "new_query": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "error_sql": " SELECT DISTINCT T1.year FROM races AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = \"Lewis\" AND T2.surname = \"Hamilton\"  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.driverId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "101",
        "new_question": "What was the fastest lap time for Lewis Hamilton in the 2008 Australian Grand Prix?",
        "source": "bird_question_936",
        "new_query": "SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "error_sql": " SELECT fastestLapTime FROM results WHERE driverId = 36 AND raceId = 702  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "102",
        "new_question": "On what year did the youngest driver had his first qualifying race? where can I know more about the race? In the database, youngest driver refers to Max (year(dob)).",
        "source": "bird_question_981",
        "new_query": "SELECT T3.year, T3.url FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": " SELECT year FROM drivers WHERE driverId = (SELECT driverId FROM qualifying ORDER BY dob LIMIT 1)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: year",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "103",
        "new_question": "How many drivers born after 1980-01-01 have been disqualified from the race. In the database, disqualified refers to statusID = 2.",
        "source": "bird_question_982",
        "new_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.dob >= '1980-01-01'",
        "error_sql": " SELECT count(*) FROM drivers WHERE dob > \"1980-01-01\" AND driverId IN (SELECT driverId FROM results WHERE statusId = 2)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "104",
        "new_question": "What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)",
        "source": "bird_question_995",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.year = 2008",
        "error_sql": " SELECT AVG(points) FROM results WHERE driverId = 3 AND raceId IN (SELECT raceId FROM races WHERE YEAR = 2008)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "105",
        "new_question": "Please list the name and country of the circuits whose lap record is 1:29.488. In the database, lap records means the fastest time recorded which refers to time.",
        "source": "bird_question_1017",
        "new_query": "SELECT T3.name, T3.country FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "error_sql": " SELECT name ,  country FROM circuits WHERE lat = (SELECT circuitId FROM qualifying ORDER BY time LIMIT 1)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: time",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "106",
        "new_question": "State the birthday of players who came from Belgium. In the database, Belgium is name of country",
        "source": "bird_question_1126",
        "new_query": "SELECT t3.birthday FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "error_sql": " SELECT birthday FROM Player WHERE country_id = (SELECT id FROM Country WHERE name = \"Belgium\")  ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "107",
        "new_question": "Which country's players have the lowest average heights?",
        "source": "bird_question_1128",
        "new_query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.height) ASC LIMIT 1",
        "error_sql": " SELECT Country.name FROM Player JOIN Country ON Player.country_id = Country.id GROUP BY Country.name ORDER BY avg(Player.height) ASC LIMIT 1  ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "108",
        "new_question": "What type of event has the lowest cost?",
        "source": "bird_question_1389",
        "new_query": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "error_sql": " SELECT type FROM event ORDER BY cost ASC LIMIT 1  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: cost",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple"
    },
    {
        "id": "109",
        "new_question": "Please list the segment of the gas stations with transactions taken place in June, 2013. In the database, June 2013 refers to '201306'.",
        "source": "bird_question_1501",
        "new_query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "error_sql": " SELECT T1.Segment FROM gasstations AS T1 JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Date >= \"20130601\" AND T2.Date <= \"20130630\"  ",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "110",
        "new_question": "Please list the chains of the gas stations with transactions comprise customer whose segment is KAM.",
        "source": "bird_question_1502",
        "new_query": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Segment = 'KAM'",
        "error_sql": " SELECT ChainID FROM gasstations WHERE Segment = \"KAM\" INTERSECT SELECT ChainID FROM transactions_1k WHERE CustomerID IN (SELECT CustomerID FROM customers WHERE Segment = \"KAM\")  ",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: ChainID",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "simple"
    },
    {
        "id": "111",
        "new_question": "What is the consumption by customer '38508' at the gas stations? How much had the customer consumed in January 2012? In the database, January 2012 refers '201201' in the table transactions_1k",
        "source": "bird_question_1529",
        "new_query": "SELECT SUM(T3.Consumption) , SUM(IIF(T3.Date = '201201', T3.Consumption, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '31543' AND T2.GasStationID = '3704'",
        "error_sql": " SELECT sum(Amount) FROM transactions_1k WHERE CustomerID = '38508' AND Date >= '201201' AND Date < '201202'  ",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "112",
        "new_question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What is his/her Segment? In the database, average price per single item = price / amount",
        "source": "bird_question_1531",
        "new_query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "error_sql": " SELECT TOP 1 CustomerID ,  Segment ,  Avg(Price) FROM transactions_1k GROUP BY CustomerID ORDER BY Sum(Amount) DESC  ",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"1\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "113",
        "new_question": "How many events with the status 'Open' of the Student_Club did Sacha Harrison attend?",
        "source": "bird_question_1321",
        "new_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND T1.status = 'Open'",
        "error_sql": " SELECT count(*) FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.status = \"Open\" AND T1.event_name = \"Student_Club\" AND T2.link_to_member = (SELECT member_id FROM member WHERE first_name = \"Sacha\" AND last_name = \"Harrison\")  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "114",
        "new_question": "Was each expense in the event with type 'Meeting' approved? In the database, approved = True means expenses was approved; approved = False means expenses was not approved",
        "source": "bird_question_1338",
        "new_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "error_sql": " SELECT expense_description FROM expense WHERE link_to_event IN (SELECT event_id FROM event WHERE type = \"Meeting\") AND approved = True  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "115",
        "new_question": "Who are the account holders from district with the id 18 and own credit cards and also have loans?",
        "source": "bird_question_146",
        "new_query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.district_id = 18",
        "error_sql": " SELECT T1.client_id FROM client AS T1 JOIN card AS T2 ON T1.client_id = T2.client_id JOIN loan AS T3 ON T1.client_id = T3.client_id WHERE T1.district_id = 18 AND T2.type = \"credit\" AND T3.status = \"open\"  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "116",
        "new_question": "What is the total amount withdrawals in cash transactions that the client with the id 3356 makes.In the database, operation = 'VYBER' refers to withdrawal in cash.",
        "source": "bird_question_159",
        "new_query": "SELECT SUM(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "error_sql": " SELECT sum(amount) FROM trans WHERE account_id = 3356 AND operation = 'VYBER'  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "117",
        "new_question": "What was the growth rate of the total amount of loans across all accounts for a client from district with the id 73?",
        "source": "bird_question_169",
        "new_query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.district_id = 73 AND T3.type = 'OWNER'",
        "error_sql": " SELECT (sum(loan.amount) - sum(loan.amount)) / sum(loan.amount) FROM loan JOIN client ON loan.client_id = client.client_id WHERE client.district_id = 73  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: loan.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "challenging"
    },
    {
        "id": "118",
        "new_question": "What is the average score of posts posted by Matt Parker and have more than 4 votes? In the database, more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker'.",
        "source": "bird_question_635",
        "new_query": "SELECT AVG(T3.Score) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "error_sql": " SELECT Avg ( T1.Score ) FROM posts AS T1 JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = \"Matt Parker\" AND T1.Id IN ( SELECT PostId FROM votes GROUP BY PostId HAVING Count ( * ) > 4 )  ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "119",
        "new_question": "List the superheroes with blue eyes and have the super power of 'Agility'.In the database, blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of 'Agility' refers to power_name = 'Agility'.",
        "source": "bird_question_723",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "error_sql": " SELECT superhero_name FROM superhero WHERE eye_colour_id = ( SELECT id FROM colour WHERE colour = \"Blue\" ) AND TYPE_OF_POWER IN ( SELECT power_name FROM superpower WHERE power_name = \"Agility\" )  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: TYPE_OF_POWER",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "120",
        "new_question": "Among the superheroes from Marvel Comics, How many of them have the super power of 'Super Strength'?In the database, the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of 'Super Strength' refers to power_name = 'Super Strength'.",
        "source": "bird_question_730",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics' AND T3.power_name = 'Super Strength'",
        "error_sql": " SELECT count(*) FROM superhero WHERE publisher_name = \"Marvel Comics\" AND id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = \"Super Strength\"))  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: publisher_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging"
    },
    {
        "id": "121",
        "new_question": "Which publisher published the most intelligent superhero? In the database, the most intelligent superhero refers to attribute_name = 'Intelligence' where MAX(attribute_value).",
        "source": "bird_question_732",
        "new_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Intelligence' ORDER BY T3.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT T1.publisher_name FROM publisher AS T1 JOIN superhero AS T2 ON T1.id = T2.publisher_id JOIN hero_attribute AS T3 ON T2.id = T3.hero_id WHERE T3.attribute_name = \"Intelligence\" ORDER BY T3.attribute_value DESC LIMIT 1  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T3.attribute_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "122",
        "new_question": "How many male superheroes have a intelligence value bigger than 95? In the database, male refers to gender = 'Male';intelligence value bigger than 100 refers to attribute_name = 'Intelligence' AND attribute_value > 95.",
        "source": "bird_question_740",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value >  AND T4.gender = 'Male'",
        "error_sql": " SELECT count(*) FROM hero_attribute AS T1 JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.gender_id = \"Male\" AND T1.attribute_name = \"Intelligence\" AND T1.attribute_value > 95  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.attribute_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "123",
        "new_question": "How many superpowers does female superheroes have? In the database, female refers to gender = 'Female'.",
        "source": "bird_question_751",
        "new_query": "SELECT COUNT(T3.power_name) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Female'",
        "error_sql": " SELECT count(DISTINCT superpower_id) FROM hero_power WHERE hero_id IN (SELECT id FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = \"Female\"))  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: superpower_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "124",
        "new_question": "Which superhero has the lowest combat published by Dark Horse Comics? In the database, lowest combat refers to MIN(attribute_value) WHERE attribute_name = 'Combat'.",
        "source": "bird_question_769",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Combat' ORDER BY T2.attribute_value ASC LIMIT 1",
        "error_sql": " SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = \"Dark Horse Comics\") AND hero_attribute_id = (SELECT MIN(hero_attribute_id) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = \"Combat\"))  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: hero_attribute_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging"
    },
    {
        "id": "125",
        "new_question": "List the distinct race of the brown-haired male superhero. In the database, brown-haired refers to colour.colour = 'brown' WHERE hair_colour_id = colour.id; male refers to gender = 'male'.",
        "source": "bird_question_817",
        "new_query": "SELECT DISTINCT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Brown' AND T4.gender = 'Male'",
        "error_sql": " SELECT DISTINCT race_id FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = \"male\") AND hair_colour_id = (SELECT id FROM colour WHERE colour = \"brown\")  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "126",
        "new_question": "List thr superhero name of female superheroes who has the ability of Phoenix Force. In the database,ability of Phoenix Force refers to power_name = 'Phoenix Force'.",
        "source": "bird_question_825",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force' AND T4.gender = 'Female'",
        "error_sql": " SELECT superhero_name FROM superhero WHERE gender_id = (SELECT id FROM gender WHERE gender = \"Female\") AND id IN (SELECT hero_id FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = \"Powers\" ) AND attribute_value = \"Phoenix Force\")  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "127",
        "new_question": "How many times did Michael Schumacher won from races hosted in the location of Shanghai?In the database, win from races refers to wins=1.",
        "source": "bird_question_903",
        "new_query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.location = 'Shanghai'",
        "error_sql": " SELECT count(*) FROM races AS t1 JOIN results AS t2 ON t1.raceId = t2.raceId JOIN drivers AS t3 ON t2.driverId = t3.driverId WHERE t1.location = \"Shanghai\" AND t3.forename = \"Michael\" AND t3.surname = \"Schumacher\" AND t2.wins = 1  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: t1.location",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "128",
        "new_question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, When did he get into the pit stop at that same race?In the database, lap record means the fastest time recorded which refers to time.",
        "source": "bird_question_1016",
        "new_query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.time FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
        "error_sql": " SELECT TIME(pitStops.time) FROM pitStops JOIN drivers ON pitStops.driverId = drivers.driverId JOIN races ON pitStops.raceId = races.raceId WHERE races.name = \"Austrian Grand Prix\" AND drivers.surname = (SELECT TOP 1 drivers.surname FROM drivers JOIN laptimes ON drivers.driverid = laptimes.driverid JOIN races ON laptimes.raceid = races.raceid WHERE races.name = \"Austrian Grand Prix\" ORDER BY laptimes.milliseconds LIMIT 1)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"1\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "129",
        "new_question": "Locate players with crossing scores of 70 and above, state the country of these players.In the database, crossing scores of 70 and above refers to crossing > 69.",
        "source": "bird_question_1127",
        "new_query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.crossing > 69",
        "error_sql": " SELECT T1.player_name ,  T1.country_id FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.id = T2.player_api_id WHERE T2.crossing > 69  ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate"
    },
    {
        "id": "130",
        "new_question": "Among the students majored in interior design, who have attended the event located at 'MU 215'? In the database, majored in interior design refers to major_name = 'Interior Design'.",
        "source": "bird_question_1382",
        "new_query": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.location = 'MU 215' AND T1.major_name = 'Interior Design'",
        "error_sql": " SELECT first_name , last_name FROM member WHERE major_name = \"Interior Design\" INTERSECT SELECT first_name , last_name FROM attendance WHERE location = \"MU 215\"  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: first_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "131",
        "new_question": "Which student has been entrusted to manage the budget for the event with status 'Open'?",
        "source": "bird_question_1387",
        "new_query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.status = 'Open'",
        "error_sql": " SELECT T1.first_name ,  T1.last_name FROM member AS T1 JOIN budget AS T2 ON T1.member_id = T2.link_to_member WHERE T2.event_status = \"Open\"  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.link_to_member",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "132",
        "new_question": "List the members who incurred expenses in more than one event with the type 'Meeting', ordered by the amount from low to high.",
        "source": "bird_question_1451",
        "new_query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.type = 'Meeting' GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY T1.cost",
        "error_sql": " SELECT first_name ,  last_name FROM member WHERE member_id IN ( SELECT link_to_member FROM expense WHERE link_to_event IN ( SELECT event_id FROM event WHERE type = \"Meeting\" ) GROUP BY link_to_member HAVING count(*)  >  1 ) ORDER BY amount  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "133",
        "new_question": "Write the phone of students who received funds on the date of 9/9/2019 and include the amount received.In the database, amount of funds received refers to amount, received funds on date refers to date_received.",
        "source": "bird_question_1464",
        "new_query": "SELECT DISTINCT T3.phone, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "error_sql": " SELECT phone ,  amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE date_received = \"9/9/2019\"  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "134",
        "new_question": "Among the female superheroes from Marvel Comics, how many of them have blue eyes? In the database, the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; female refers to gender = 'Female'",
        "source": "bird_question_728",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue' AND T4.gender = 'Female'",
        "error_sql": " SELECT Count ( * ) FROM superhero WHERE publisher_name = \"Marvel Comics\" AND gender = \"Female\" AND eye_colour_id = ( SELECT colour.id FROM colour WHERE colour.colour = \"Blue\" )  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: publisher_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "135",
        "new_question": "Provide the hair colour of the human superhero who is 185 cm tall and published by Universal Studios.",
        "source": "bird_question_758",
        "new_query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T1.height_cm = 185 AND T2.race = 'Human' AND T4.publisher_name = 'Universal Studios'",
        "error_sql": " SELECT hair_colour_id FROM superhero WHERE race_id = 1 AND publisher_id = 4 AND height_cm = 185  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "136",
        "new_question": "What is the hero's full name and publisher with the highest attribute in strength? In the database, strength attribute refers to attribute_name = 'Strength'.",
        "source": "bird_question_766",
        "new_query": "SELECT T1.full_name, T4.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT T1.full_name ,  T1.publisher_id FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_id = (SELECT attribute_id FROM attribute WHERE attribute_name = \"strength\") ORDER BY T2.attribute_value DESC LIMIT 1  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "137",
        "new_question": "List the name and race of superheroes with flight power.",
        "source": "bird_question_771",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.power_name = 'Flight'",
        "error_sql": " SELECT superhero_name ,  race FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = \"Flight\"  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: race",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "138",
        "new_question": "Provide superheroes' names and hair colours who have the adaptation power. In the database, hair colour refers to colour where hair_colour_id = colour.id, adaptation power refers to power_name = 'Adaptation'.",
        "source": "bird_question_778",
        "new_query": "SELECT T1.superhero_name, T4.colour FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T3.power_name = 'Adaptation'",
        "error_sql": " SELECT superhero_name ,  hair_colour_id FROM superhero WHERE id IN (SELECT hero_id FROM hero_power WHERE power_id IN (SELECT id FROM superpower WHERE power_name = \"adaptation\"))  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "139",
        "new_question": "Among the superheroes with the race of god/eternal, how many of them are male and are published by ABC Studios?",
        "source": "bird_question_793",
        "new_query": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T1.race_id = 21 AND T1.gender_id = 1 AND T4.publisher_name = 'ABC Studios'",
        "error_sql": " SELECT count(*) FROM superhero WHERE race_id = 1 AND gender_id = 1 AND publisher_id = 2  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "140",
        "new_question": "Which hero was the fastest? What is his/her race?",
        "source": "bird_question_794",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT T1.superhero_name ,  T1.race_id FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_id = (SELECT attribute_id FROM attribute WHERE attribute_name = \"Speed\") ORDER BY T2.attribute_value DESC LIMIT 1  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "141",
        "new_question": "What is the race and the gender of the superhero with maximum attribute value?In the database,maximum attribute value refers to MAX(attribute_value).",
        "source": "bird_question_810",
        "new_query": "SELECT T3.race, T4.gender FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT T1.race_id ,  T1.gender_id FROM superhero AS T1 JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "142",
        "new_question": "Among the bad superheroes, what is the percentage of female superheroes with black eyes? In the database, black eyes refers to colour = 'Black' and eye_colour_id = colour.id.",
        "source": "bird_question_818",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T2.alignment = 'Bad' AND T4.colour = 'Black'",
        "error_sql": " SELECT count(*) * 100.0 / (SELECT count(*) FROM superhero WHERE alignment_id = 2) FROM superhero WHERE gender_id = 2 AND eye_colour_id = (SELECT id FROM colour WHERE colour = 'Black') AND alignment_id = 2  ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging"
    },
    {
        "id": "143",
        "new_question": "List the name of drivers who finished first in the Yas Marina Circuit in 2010.In the database,finished first refers to position = 1.",
        "source": "bird_question_874",
        "new_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId WHERE T1.year = 2010 AND T4.name = 'Yas Marina Circuit' AND T2.position = 1",
        "error_sql": " SELECT name FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON races.raceId = results.raceId WHERE races.name = \"Yas Marina Circuit\" AND YEAR = 2010 AND position = 1  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "144",
        "new_question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50 and the status were finished?",
        "source": "bird_question_962",
        "new_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50 AND T4.status = 'Finished', 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.year BETWEEN 2000 AND 2005",
        "error_sql": " SELECT count(*) FROM drivers WHERE dob  <  2005 AND dob  >  1985 INTERSECT SELECT count(*) FROM lapTimes WHERE lap  >  50 INTERSECT SELECT count(*) FROM results WHERE statusId =  1  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "145",
        "new_question": "On what year did the youngest driver had his first qualifying race? State the result in terms of points about him in the race.In the database,youngest driver refers to Max (year(dob));",
        "source": "bird_question_981",
        "new_query": "SELECT T3.year, T4.points FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId INNER JOIN results as T4 on T2.driverId = T4.driverId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": " SELECT T1.year FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId ORDER BY T1.dob ASC LIMIT 1  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.year",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "146",
        "new_question": "List the website of the constructor of the drivers whose status is collision in the 2009 Singapore Grand Prix.",
        "source": "bird_question_990",
        "new_query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T4.status = 'Collision'",
        "error_sql": " SELECT T1.url FROM constructors AS T1 JOIN drivers AS T2 ON T1.constructorId = T2.constructorId JOIN results AS T3 ON T2.driverId = T3.driverId WHERE T3.raceId = (SELECT raceId FROM races WHERE name = \"Singapore Grand Prix\" AND YEAR = 2009) AND T3.statusId = (SELECT statusId FROM status WHERE status = \"Collision\")  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.constructorId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "147",
        "new_question": "Which constructor scored most points from Baku City Circuit between 2010 and 2020? List the score, name and nationality of this Team.",
        "source": "bird_question_994",
        "new_query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.name = 'Baku City Circuit' AND T3.year BETWEEN 2010 AND 2020 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "error_sql": " SELECT constructorId ,  name ,  nationality FROM constructors JOIN constructorResults ON constructors.constructorId = constructorResults.constructorId JOIN races ON constructorResults.raceId = races.raceId WHERE races.circuitId = ( SELECT circuitId FROM circuits WHERE name = \"Baku City Circuit\" ) AND YEAR >= 2010 AND YEAR <= 2020 ORDER BY constructorResults.points DESC LIMIT 1  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: constructorId",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "148",
        "new_question": "What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).",
        "source": "bird_question_995",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T4.location = 'Monte-Carlo'",
        "error_sql": " SELECT AVG(points) FROM constructorResults WHERE constructorId = 10 AND circuitId IN (SELECT circuitId FROM circuits WHERE location LIKE \"%Monte-Carlo%\")  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: circuitId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "149",
        "new_question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and her constructor's name and the id of the race to which he/she first joined.In the database,full name refers to forename+surname; youngest racer = MAX(dob).",
        "source": "bird_question_1002",
        "new_query": "SELECT T1.forename, T1.surname, T1.nationality, T3.raceId, T5.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId INNER JOIN constructorResults AS T4 on T3.raceId = T4.raceId INNER JOIN constructors AS T5 on T4.constructorId = T5.constructorId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "error_sql": " SELECT forename ,  surname ,  nationality ,  constructorId ,  raceId FROM drivers WHERE dob = (SELECT MAX(dob) FROM drivers)  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: constructorId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "150",
        "new_question": "Please provide name of events for members who have paid more than 50 dollar.In the database,have paid more than 50 dollar refers to cost > 50.",
        "source": "bird_question_1436",
        "new_query": "SELECT DISTINCT T4.event_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event as T4 ON T3.link_to_event = T4.event_id WHERE T1.cost > 50",
        "error_sql": " SELECT T1.event_name FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.cost > 50  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple"
    },
    {
        "id": "151",
        "new_question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event, provide the major name of him. In the database,approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'.",
        "source": "bird_question_1437",
        "new_query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event, T4.major_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN major as T4 on T2.link_to_major = T4.major_id WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "error_sql": " SELECT T1.first_name ,  T1.last_name ,  T2.major_name FROM member AS T1 JOIN major AS T2 ON T1.link_to_major = T2.major_id JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.approved = \"true\" AND T3.expense_date BETWEEN \"2019-01-10\" AND \"2019-11-19\"  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "152",
        "new_question": "What is the name and major of members who had to spend more than a hundred dollars on an expense? which county does his/her from?",
        "source": "bird_question_1449",
        "new_query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name, T4.county FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN zip_code AS T4 on T1.zip = T4.zip_code WHERE T3.cost > 100",
        "error_sql": " SELECT T1.first_name ,  T1.last_name ,  T1.major ,  T2.county FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost > 100  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.major",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "153",
        "new_question": "For events with less than average parking cost, list the events name and the link to their member.In the database,less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'.",
        "source": "bird_question_1453",
        "new_query": "SELECT T1.event_name, T4.link_to_member FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN attendance as T4 on T1.event_id = T4.link_to_event WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "error_sql": " SELECT T1.event_name ,  T2.link_to_member FROM event AS T1 JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_id IN (SELECT T1.event_id FROM event AS T1 JOIN expense AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = \"Parking\" AND T2.cost < (SELECT (SUM(T2.cost) / COUNT(T2.expense_id)) FROM expense AS T2 JOIN event AS T1 ON T2.link_to_event = T1.event_id WHERE T1.category = \"Parking\"))  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.category",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "154",
        "new_question": "List the full name and the major name of the top five members who spend the most money in the descending order of spending.",
        "source": "bird_question_1456",
        "new_query": "SELECT T3.first_name, T3.last_name, T4.major_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id INNER JOIN major as T4 on T3.link_to_major = T4.major_id ORDER BY T2.spent DESC LIMIT 5",
        "error_sql": " SELECT T1.first_name ,  T1.last_name ,  T1.major_name FROM member AS T1 JOIN expense AS T2 ON T1.member_id = T2.link_to_member GROUP BY T1.member_id ORDER BY sum(T2.cost) DESC LIMIT 5  ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.major_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "155",
        "new_question": "How many female accounts in the south Bohemia region are eligible for loans?In the database, A3 contains the data of region.",
        "source": "bird_question_90",
        "new_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'south Bohemia' AND T3.district_id = ( SELECT district_id FROM client WHERE gender = 'F')",
        "error_sql": " SELECT count(*) FROM client WHERE gender  =  \"female\" AND district_id  =  3  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "156",
        "new_question": "When is the birthday of a client who applied 98832 USD loan in East Bohemia in 1996/1/3?",
        "source": "bird_question_113",
        "new_query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832 AND T3.district_id = (SELECT district_id FROM district WHERE A3 = 'east Bohemia' )",
        "error_sql": " SELECT birth_date FROM client WHERE client_id = (SELECT client_id FROM loan WHERE amount = 98832 AND district_id = (SELECT district_id FROM district WHERE A14 = \"East Bohemia\") AND date = \"1996-01-03\")  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "157",
        "new_question": "State the district and type of loan ID '4990'.In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "new_query": "SELECT T2.A2, T2.A3, T4.'type'  FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.account_id = T4.account_id INNER JOIN loan AS T3 ON T4.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "error_sql": " SELECT T1.A2 ,  T1.A3 FROM district AS T1 JOIN loan AS T2 ON T1.district_id = T2.district_id WHERE T2.loan_id = 4990  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T2.district_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "158",
        "new_question": "Provide the account ID, user gender，district and region for loan amount greater than USD300,000.In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "new_query": "SELECT T1.account_id, T2.A2, T2.A3, T4.gender FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T4 ON T4.district_id = T1.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "error_sql": " SELECT T1.account_id ,  T2.gender ,  T3.A2 ,  T3.A3 FROM account AS T1 JOIN client AS T2 ON T1.client_id = T2.client_id JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.frequency = \"loan\" AND T1.amount > 300000  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: T1.amount",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "159",
        "new_question": "List the loan ID, bank, district and average salary loan with duration of 60 months.In the database, A3 refers to regions; A11 refers to average salary.",
        "source": "bird_question_124",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11, T4.bank_to FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN 'order' AS T4 ON T4.account_id = T1.account_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "error_sql": " SELECT loan_id ,  bank ,  A3 ,  A11 FROM loan JOIN district ON loan.district_id = district.district_id WHERE duration = 60  ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: bank",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    }
]
