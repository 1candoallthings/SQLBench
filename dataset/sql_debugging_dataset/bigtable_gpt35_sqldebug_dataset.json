[
    {
        "id": "1",
        "question": "What is the eligible free rate for K-12 students in Maya Lin School? In the database, eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_0",
        "query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `School Name` = 'Maya Lin'",
        "error_sql": "SELECT \"Percent (%) Eligible Free (K-12)\" FROM frpm WHERE \"School Name\" = 'Maya Lin School';",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "2",
        "question": "Please list the lowest three eligible free rates for K-12 students in continuation schools.In the database, Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_1",
        "query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (K-12)` / `Enrollment (K-12)` IS NOT NULL ORDER BY `Free Meal Count (K-12)` / `Enrollment (K-12)` ASC LIMIT 3",
        "error_sql": "SELECT \"Eligible Free (K-12)\"  FROM frpm  WHERE \"School Type\" = \"Continuation\"  ORDER BY \"Percent (%) Eligible Free (K-12)\" ASC  LIMIT 3;",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "3",
        "question": "How many schools in Kings offer over 400 free meals but less than 800 free meals to students aged 5-17?",
        "source": "bird_question_21",
        "query": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Kings' AND `Free Meal Count (Ages 5-17)` > 400 AND `Free Meal Count (Ages 5-17)` < 800",
        "error_sql": "SELECT COUNT(*)  FROM schools  WHERE County = 'Kings'  AND \"Free Meal Count (Ages 5-17)\" > 400  AND \"Free Meal Count (Ages 5-17)\" < 800;",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "4",
        "question": "Which school in Alameda has the highest average math score? In the database, AvgScrMath means average math score.",
        "source": "bird_question_22",
        "query": "SELECT sname FROM satscores WHERE cname = 'Alameda' AND sname IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1",
        "error_sql": "SELECT School Name FROM satscores WHERE cname = 'Alameda' ORDER BY AvgScrMath DESC LIMIT 1;",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: School",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "5",
        "question": "Which different county has the highest number of merged schools? Please provide the name of the city where each school is located.In the database, 'Merged' was mentioned in schools.StatusType.",
        "source": "bird_question_49",
        "query": "SELECT DISTINCT County, School, City FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Merged' AND school IS NOT NULL",
        "error_sql": "SELECT County, City FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(DISTINCT School) DESC LIMIT 1;",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "7",
        "question": "What is the ratio of the number of closed schools to the number of merged schools in California that have mailing state addresses? In the database, Ratio = count(closed schools) / count(merged schools)",
        "source": "bird_question_55",
        "query": "SELECT CAST(SUM(CASE WHEN StatusType = 'Closed' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN StatusType = 'Merged' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "error_sql": "SELECT COUNT(*) AS closed_schools_count FROM schools WHERE StatusType = 'Closed' AND MailState = 'CA';  SELECT COUNT(*) AS merged_schools_count FROM schools WHERE StatusType = 'Merged' AND MailState = 'CA';",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "8",
        "question": "Of all the schools with a mailing state address in California, how many schools are located in Colusa County? In the database, mailing state address in California means MailState = 'CA'.",
        "source": "bird_question_56",
        "query": "SELECT COUNT(CDSCode) FROM schools WHERE County = 'Colusa' AND MailState = 'CA'",
        "error_sql": "SELECT COUNT(*)  FROM schools  WHERE County = 'Colusa County' AND MailState = 'CA';",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "11",
        "question": "In chartered schools with charter number 0665, what are the names of all the administrators? Including the county where the school is located and the type of school status.In the database, Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name.",
        "source": "bird_question_63",
        "query": "SELECT AdmFName1, AdmLName1, County, StatusType FROM schools WHERE Charter = 1 AND CharterNum = '0665'",
        "error_sql": "SELECT schools.\"CharterNum\", schools.\"County\", schools.\"School\", schools.\"StatusType\", schools.\"AdmFName1\", schools.\"AdmLName1\", schools.\"AdmFName2\", schools.\"AdmLName2\", schools.\"AdmFName3\", schools.\"AdmLName3\" FROM schools WHERE schools.\"CharterNum\" = '0665' AND schools.\"Charter\" = '1'",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "12",
        "question": "What is the total amount of High School District closure in 1989 in the county of Fresno?",
        "source": "bird_question_67",
        "query": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND County = 'Fresno' AND DOCType = 'High School District'",
        "error_sql": "SELECT COUNT(*)  FROM schools  WHERE StatusType = 'Closed'  AND District = 'Fresno'  AND HighGrade = '12'  AND ClosedDate LIKE '%1989%'",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: HighGrade",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "13",
        "question": "How many active and merged District Community Day Schools are there in the city of Clovis?",
        "source": "bird_question_70",
        "query": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Merged' OR StatusType = 'Active') AND City = 'Clovis'",
        "error_sql": "SELECT COUNT(*)  FROM schools  WHERE City = 'Clovis'  AND (StatusType = 'Active' OR StatusType = 'Merged')  AND GSoffered = 'District Community Day'",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "15",
        "question": "List the accounts and the transaction amount with the earliest transaction date in 1995?",
        "source": "bird_question_101",
        "query": "SELECT account_id, amount FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "error_sql": "SELECT account_id, MIN(amount)  FROM trans  WHERE date LIKE '1995%'  GROUP BY account_id",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "16",
        "question": "How many owner and disponent dispositions are there from client number 20 to client number 30?",
        "source": "bird_question_172",
        "query": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE client_id BETWEEN 20 AND 30",
        "error_sql": "SELECT COUNT(*)  FROM disp  WHERE client_id >= 20 AND client_id <= 30;",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "19",
        "question": "What molecules contain silicon? In the database, silicon refers to element = 'si'.",
        "source": "bird_question_205",
        "query": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'si'",
        "error_sql": "SELECT molecule_id, label FROM molecule WHERE molecule_id IN (     SELECT molecule_id     FROM atom     WHERE element = 'si' )",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "26",
        "question": "Determine the percentage of single bonds formed in all compounds containing the molecule TR013. In the database, TR013 is the molecule id; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(all bond_id)) as percent where molecule_id = 'TR013'.",
        "source": "bird_question_287",
        "query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR013'",
        "error_sql": "SELECT (SUM(bond_type = ' - ') * 100.0 / COUNT(bond_id)) as percent  FROM bond  WHERE molecule_id = 'TR013';",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate"
    },
    {
        "id": "27",
        "question": "How many the black cards available without powerful foils? In the database, 'black' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null.",
        "source": "bird_question_341",
        "query": "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "error_sql": "SELECT COUNT(*)  FROM cards  WHERE borderColor = 'black'  AND cardKingdomFoilId IS NULL  AND cardKingdomId IS NULL;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "29",
        "question": "List the types and availability of cards painted by artist Aaron Boyd for card art? In the database, 'Aaron Boyd' is artist.",
        "source": "bird_question_354",
        "query": "SELECT type,availability FROM cards WHERE artist = 'Aaron Boyd'",
        "error_sql": "SELECT types, availability FROM cards WHERE artist = 'Aaron Boyd'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "34",
        "question": "What are the names of card games in French? In the database, French refer to language.",
        "source": "bird_question_440",
        "query": "SELECT DISTINCT name FROM foreign_data WHERE language = 'French'",
        "error_sql": "SELECT DISTINCT name FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'French' AND sets.type = 'game'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "48",
        "question": "List the driver IDs for position number 1.",
        "source": "bird_question_966",
        "query": "SELECT driverId FROM driverStandings WHERE position = 1",
        "error_sql": "SELECT driverId FROM results WHERE position = 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "49",
        "question": "What is the height of the tallest player? Indicate his name and api id.In the database, tallest player refers to MAX(height).",
        "source": "bird_question_1021",
        "query": "SELECT player_name, player_api_id FROM Player ORDER BY height DESC LIMIT 1",
        "error_sql": "SELECT player_name, player_api_id, height FROM Player WHERE height = (SELECT MAX(height) FROM Player);",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "50",
        "question": "Please list the mailing address of all the charter schools in Livermore Valley Joint Unified.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm.",
        "source": "bird_question_2",
        "query": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Livermore Valley Joint Unified' AND T1.`Charter School (Y/N)` = 1",
        "error_sql": "SELECT MailStreet, MailCity, MailZip, MailState FROM schools WHERE Charter = 1 AND City = 'Livermore Valley Joint Unified';",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "51",
        "question": "What is the type the school with the highest FRPM count for K-12 students?",
        "source": "bird_question_3",
        "query": "SELECT T2.School Type FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "error_sql": "SELECT School Type FROM frpm WHERE FRPM Count (K-12) = (SELECT MAX(FRPM Count (K-12)) FROM frpm)",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Count\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "52",
        "question": "Please list the phone numbers of the direct charter-funded schools that are opened before 1985/1/1.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the frpm.",
        "source": "bird_question_4",
        "query": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate < '1985-01-01'",
        "error_sql": "SELECT Phone  FROM schools  WHERE Charter = 1  AND OpenDate < '1985-01-01'",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "55",
        "question": "What is the the mailing address of the school that has the highest number of test takers with an SAT score of over 1500?",
        "source": "bird_question_7",
        "query": "SELECT T2.MailStreet FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "error_sql": "SELECT MailStreet, MailCity, MailZip, MailState FROM schools WHERE CDSCode IN (     SELECT cds     FROM satscores     WHERE NumTstTakr > 0 AND AvgScrRead > 1500     ORDER BY NumTstTakr DESC     LIMIT 1 )",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "56",
        "question": "What is the number of SAT test takers of the schools with the highest FRPM count for students aged 5-17?",
        "source": "bird_question_8",
        "query": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (Ages 5-17)` DESC LIMIT 1 )",
        "error_sql": "SELECT NumTstTakr FROM satscores WHERE cds IN (     SELECT CDSCode     FROM frpm     WHERE [Percent (%) Eligible FRPM (Ages 5-17)] = (         SELECT MAX([Percent (%) Eligible FRPM (Ages 5-17)])         FROM frpm     ) )",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "57",
        "question": "Among the schools with an SAT excellence rate of over 0.9, what is the lowest eligible free rate for students aged 5-17?In the database, Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`.",
        "source": "bird_question_12",
        "query": "SELECT MIN(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.9",
        "error_sql": "SELECT MIN(`Percent (%) Eligible Free (Ages 5-17)`)  FROM frpm  JOIN satscores ON frpm.CDSCode = satscores.cds  WHERE satscores.NumGE1500 / satscores.NumTstTakr > 0.9",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "58",
        "question": "Please list the number of SAT test takers of the schools with the top 3 SAT excellence rate.In the database, Excellence rate = NumGE1500 / NumTstTakr.",
        "source": "bird_question_13",
        "query": "SELECT T2.NumTstTakr FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "error_sql": "SELECT NumTstTakr FROM satscores ORDER BY (NumGE1500 / NumTstTakr) DESC LIMIT 3;",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "59",
        "question": "List the top three schools, by descending order, from the highest to the lowest, the most number of free meal (Ages 5-17). Please give their NCES school identification number.",
        "source": "bird_question_14",
        "query": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Free Meal Count (Ages 5-17)` DESC LIMIT 3",
        "error_sql": "SELECT NCESSchool FROM schools ORDER BY \"Free Meal Count (Ages 5-17)\" DESC LIMIT 3;",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "60",
        "question": "Which active district has the highest average score in Math?",
        "source": "bird_question_15",
        "query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "error_sql": "SELECT District Name FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.StatusType = 'Active' GROUP BY District Name ORDER BY AvgScrMath DESC LIMIT 1;",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Name\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "63",
        "question": "Calculate the max number of hydrogen ygen atoms in single-bonded molecules.In the database, single-bonded molecules refers to bond_type = '-' ; average number of hydrogen ygen atom = AVG(element = 'h').",
        "source": "bird_question_197",
        "query": "SELECT MAX(hydrogen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS hydrogen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'h'  GROUP BY T1.molecule_id) AS hydrogen_count",
        "error_sql": "SELECT MAX(hydrogen_count)  FROM (     SELECT COUNT(*) as hydrogen_count     FROM atom a     JOIN molecule m ON a.molecule_id = m.molecule_id     JOIN bond b ON a.molecule_id = b.molecule_id     JOIN connected c ON a.atom_id = c.atom_id     WHERE b.bond_type = '-' AND a.element = 'h'     GROUP BY m.molecule_id )",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate"
    },
    {
        "id": "64",
        "question": "In the molecule containing oxygen atoms, how many are carcinogenic?In the database, carcinogenic refers to label = '+'; oxygen atoms refers to element = 'o'.",
        "source": "bird_question_199",
        "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "error_sql": "SELECT COUNT(*)  FROM atom  JOIN molecule ON atom.molecule_id = molecule.molecule_id  WHERE element = 'o' AND label = '+';",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "65",
        "question": "Describe the date about rulings for card named 'Sublime Epiphany' with number 74s.In the database, 'Sublime Epiphany' is name of cards; number 74s refers to number = '74s'.",
        "source": "bird_question_348",
        "query": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "error_sql": "SELECT date, text FROM rulings WHERE uuid = (     SELECT uuid     FROM cards     WHERE name = 'Sublime Epiphany' AND number = '74s' )",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "66",
        "question": "Name the card and artist with the most ruling information. Also state the border color of card.In the database, with the most ruling information refers to Max(count(rulings.uuid)).",
        "source": "bird_question_349",
        "query": "SELECT T1.name, T1.artist, T1.borderColor FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.artist ORDER BY COUNT(DISTINCT T1.uuid) DESC LIMIT 1",
        "error_sql": "SELECT c.name, c.artist, c.borderColor FROM cards c JOIN rulings r ON c.uuid = r.uuid GROUP BY c.name, c.artist, c.borderColor ORDER BY COUNT(r.uuid) DESC LIMIT 1;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "67",
        "question": "State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.",
        "source": "bird_question_350",
        "query": "SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "error_sql": "SELECT type FROM cards WHERE name = 'Annul' AND number = '29';",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "68",
        "question": "How many cards which have alternative language in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_351",
        "query": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": "SELECT COUNT(*) FROM foreign_data WHERE language = 'Japanese';",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "69",
        "question": "Calculate the percentage of the cards availabe in Japanese.In the database, 'Japanese' is the language; percentage = Divide(Sum(id where language = 'Japanese'), Count(id)) *100.",
        "source": "bird_question_352",
        "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "error_sql": "SELECT (COUNT(id) * 100) / (SELECT COUNT(id) FROM foreign_data) AS percentage FROM foreign_data WHERE language = 'Japanese';",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "71",
        "question": "What are the translation for the set that card 'Angel of Mercy' is in?In the database, 'Angel of Mercy' is the name of card.",
        "source": "bird_question_360",
        "query": "SELECT translation FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "error_sql": "SELECT translation FROM set_translations WHERE setCode = (     SELECT setCode     FROM cards     WHERE name = 'Angel of Mercy' )",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "72",
        "question": "What is the format of card 'Cloudchaser Eagle'?In the database, 'Cloudchaser Eagle' is the name of card.",
        "source": "bird_question_364",
        "query": "SELECT DISTINCT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "error_sql": "SELECT format FROM legalities WHERE id IN (     SELECT id     FROM cards     WHERE name = 'Cloudchaser Eagle' )",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "73",
        "question": "List down the name of artists for cards in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_381",
        "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": "SELECT DISTINCT artist FROM cards WHERE id IN (     SELECT id     FROM foreign_data     WHERE language = 'Japanese' )",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "74",
        "question": "List down the count of artists for cards that only available in paper and Japanese language?In the database, available in paper refers to availability = 'paper'; 'Japanese' is the language.",
        "source": "bird_question_382",
        "query": "SELECT COUNT(T1.artist) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "error_sql": "SELECT COUNT(DISTINCT artist)  FROM cards  WHERE availability = 'paper'  AND id IN (SELECT id FROM foreign_data WHERE language = 'Japanese')",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "75",
        "question": "What are the color of cards that have future frame version and what are the legality status of these cards?In the database, future frame version refers to frameVersion = 'future'.",
        "source": "bird_question_386",
        "query": "SELECT colors FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "error_sql": "SELECT colors, status FROM cards JOIN legalities ON cards.id = legalities.id WHERE frameVersion = 'future'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "76",
        "question": "What are the cards for set OGW? State the artist for these cards.In the database, set OGW refers to setCode = 'OGW'.",
        "source": "bird_question_387",
        "query": "SELECT id, artist FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "error_sql": "SELECT name, artist FROM cards WHERE setCode = 'OGW'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "77",
        "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the translation?In the database, set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5.",
        "source": "bird_question_388",
        "query": "SELECT id, translation FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "error_sql": "SELECT c.name, t.translation FROM cards c JOIN set_translations t ON c.setCode = t.setCode WHERE c.setCode = '10E' AND c.convertedManaCost = 5",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "78",
        "question": "List down the name of cards with original types of Creature - Elf and the information of rulings for these cards.In the database, Creature - Elf is the originalType.",
        "source": "bird_question_389",
        "query": "SELECT T1.id, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "error_sql": "SELECT c.name, r.text FROM cards c JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType = 'Creature - Elf'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "79",
        "question": "What are the border color text of cards from ID 1-20? What are the format of these cards?In the database, ID 1-20 refers to id BETWEEN 1 AND 20.",
        "source": "bird_question_390",
        "query": "SELECT T1.borderColor, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "error_sql": "SELECT borderColor, format FROM cards JOIN legalities ON cards.id = legalities.id WHERE cards.id BETWEEN 1 AND 20;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "80",
        "question": "Pick 3 cards with rarity of uncommon, list down the artists for these cards according to ascending order of it's ruling date.In the database, uncommon refers to rarity = 'uncommon'.",
        "source": "bird_question_392",
        "query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "error_sql": "SELECT c.artist FROM cards c JOIN rulings r ON c.id = r.id WHERE c.rarity = 'uncommon' ORDER BY r.date ASC LIMIT 3;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "81",
        "question": "Lists availability of cards in German.In the database, German refer to language; availability refer to the availability where subtypes is not null AND supertypes is not null",
        "source": "bird_question_407",
        "query": "SELECT T1.availability FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "error_sql": "SELECT DISTINCT cards.availability FROM cards JOIN foreign_data ON cards.id = foreign_data.id WHERE foreign_data.language = 'German' AND cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "82",
        "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its all types.In the database, available in paper refers to availability = 'paper'.",
        "source": "bird_question_410",
        "query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "error_sql": "SELECT types FROM cards WHERE artist = 'Erica Yang' AND availability = 'paper' AND id IN (     SELECT id     FROM legalities     WHERE format = 'pauper' )",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "83",
        "question": "What is the foreign text of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?In the database, in French refers to language = 'French'; black border color refers to borderColor = 'black'.",
        "source": "bird_question_412",
        "query": "SELECT text FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "error_sql": "SELECT foreign_data.text FROM cards JOIN foreign_data ON cards.id = foreign_data.id WHERE cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French';",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "84",
        "question": "What translation is the set of 180 cards that belongs to the Ravnica block translated into?In the database, set of 180 cards refers to baseSetSize = 180.",
        "source": "bird_question_414",
        "query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "error_sql": "SELECT translation FROM set_translations WHERE setCode = 'RAV'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "85",
        "question": "What is the code of set number 5 and its translation?In the database, set number 5 refers to id = 5.",
        "source": "bird_question_428",
        "query": "SELECT T1.code, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "error_sql": "SELECT code, translation FROM sets JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.id = 5;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "86",
        "question": "What is the translation and expansion type of set number 206?In the database, set number 206 refers to id = 206.",
        "source": "bird_question_429",
        "query": "SELECT T2.translation, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
        "error_sql": "SELECT set_translations.translation, sets.type FROM set_translations JOIN sets ON set_translations.setCode = sets.code WHERE sets.id = 206;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "88",
        "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set release date in your response.In the database, available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'.",
        "source": "bird_question_431",
        "query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "error_sql": "SELECT sets.name, sets.releaseDate FROM sets WHERE sets.isForeignOnly = 1 AND sets.isFoilOnly = 1 AND sets.code IN (     SELECT DISTINCT sets.code     FROM sets     INNER JOIN cards ON sets.code = cards.setCode     INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid     WHERE foreign_data.language = 'Japanese' ) LIMIT 1;",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "challenging"
    },
    {
        "id": "89",
        "question": "State the name of the set with release date of 07/13/2007?",
        "source": "bird_question_441",
        "query": "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "error_sql": "SELECT name  FROM sets  WHERE releaseDate = '07/13/2007'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "91",
        "question": "Give the code of sets have expansion type of 'box'?In the database, code of sets refers to setCode.",
        "source": "bird_question_443",
        "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'box' GROUP BY T2.setCode",
        "error_sql": "SELECT code FROM sets WHERE type = 'box'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "92",
        "question": "Name the artist for the card that has boros watermark? List out the type of this card.",
        "source": "bird_question_444",
        "query": "SELECT DISTINCT T1.artist, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "error_sql": "SELECT artist, type FROM cards WHERE watermark = 'Boros'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "94",
        "question": "Give the translation of sets have expansion commander type?In the database, translation of sets refers to translation.",
        "source": "bird_question_447",
        "query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "error_sql": "SELECT translation FROM set_translations WHERE setCode IN (     SELECT code     FROM sets     WHERE type = 'expansion commander' )",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "95",
        "question": "Name the foreign name of the card that has abzan watermark? List out the artist of this card.",
        "source": "bird_question_448",
        "query": "SELECT DISTINCT T1.name, T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "error_sql": "SELECT foreign_data.name, cards.artist FROM cards JOIN sets ON cards.setCode = sets.code JOIN set_translations ON sets.id = set_translations.id JOIN foreign_data ON cards.id = foreign_data.id WHERE sets.watermark = 'abzan'",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: sets.watermark",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "97",
        "question": "For the user whose display name is 'DatEpicCoderGuyWhoPrograms', what is his/her badge's user id?In the database, 'DatEpicCoderGuyWhoPrograms' is the DisplayName.",
        "source": "bird_question_570",
        "query": "SELECT T2.UserId FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "error_sql": "SELECT UserId FROM badges WHERE Name = 'DatEpicCoderGuyWhoPrograms';",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "99",
        "question": "Which of these players performs the best in heading accuracy, Alexis, Ariel Borysiuk or Arouna Kone? List the corresponding values.",
        "source": "bird_question_1085",
        "query": "SELECT t1.player_name, t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "error_sql": "SELECT player_name, heading_accuracy FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY heading_accuracy DESC;",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate"
    },
    {
        "id": "100",
        "question": "Which client possesses a gold type card, give his/her client id.",
        "source": "bird_question_103",
        "query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold'",
        "error_sql": "SELECT client_id FROM card WHERE type = 'gold';",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "101",
        "question": "For the client who applied 98832 USD loan in 1996/1/3, what was his/her district_id?",
        "source": "bird_question_113",
        "query": "SELECT T3.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "error_sql": "SELECT district_id FROM loan JOIN account ON loan.account_id = account.account_id JOIN client ON account.client_id = client.client_id WHERE loan.amount = 98832 AND loan.date = '1996-01-03';",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: district_id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "102",
        "question": "State the district and region for loan ID with status A. In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status = 'A'",
        "error_sql": "SELECT d.A2 AS district, d.A3 AS region FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.loan_id = 'A'",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "103",
        "question": "Provide the account ID, district and region for loan duration greater than 24 months. In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration > 24",
        "error_sql": "SELECT account_id, district_id, A3 FROM account JOIN district ON account.district_id = district.district_id JOIN loan ON account.account_id = loan.account_id WHERE loan.duration > 24;",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: account_id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "105",
        "question": "List the client_id of the account holders in South Bohemia that still do not own credit cards. In the database, A3 contains the region names; South Bohemia is one of region names.",
        "source": "bird_question_130",
        "query": "SELECT T3.client_id FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "error_sql": "SELECT client_id FROM client WHERE district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia') AND client_id NOT IN (SELECT client_id FROM disp WHERE type = 'OWNER')",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "107",
        "question": "Which districts have transactions with average balance greater than -30,300 in 1997?",
        "source": "bird_question_141",
        "query": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING AVG(T3.balance) > -30000",
        "error_sql": "SELECT district_id FROM trans WHERE balance > -30300 AND date LIKE '1997%'  GROUP BY district_id;",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: district_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "109",
        "question": "Please provide a list of female clients and whose account branch is in East Bohemia, along with their IDs.",
        "source": "bird_question_180",
        "query": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND T1.gender = 'F'",
        "error_sql": "SELECT client_id FROM client WHERE gender = 'F' AND district_id IN (     SELECT district_id     FROM district     WHERE A2 = 'East Bohemia' )",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "111",
        "question": "Lists the artist of all Creature-type cards with legal status. In the database, legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature'.",
        "source": "bird_question_406",
        "query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "error_sql": "SELECT artist  FROM cards  WHERE types = 'Creature'  AND id IN (SELECT id FROM legalities WHERE status = 'legal')",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "114",
        "question": "Among posts by user with Id 15 and 20, which one has higher popularity? In the database, Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'",
        "source": "bird_question_634",
        "query": "SELECT T1.Id FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.Id = 15 OR T1.Id = 20 GROUP BY T1.Id ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "error_sql": "SELECT MAX(SUM(ViewCount))  FROM posts  WHERE OwnerUserId = 15 OR OwnerUserId = 20;",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: misuse of aggregate function SUM()",
            "error_type": [
                "OperationalError",
                "misuse of aggregate"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "challenging"
    },
    {
        "id": "115",
        "question": "How many comments did Neil McGuigan get in his posts after 2010-07-20? In the database, negative comment refers to score < 60; DisplayName = 'Neil McGuigan'",
        "source": "bird_question_636",
        "query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.CreationDate > '2010-07-20'",
        "error_sql": "SELECT COUNT(*)  FROM comments  WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan')  AND CreationDate > '2010-07-20'  AND Score < 60;",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "116",
        "question": "State all the tags used by Mark Meckes in his posts that has at least five answers. In the database, DisplayName = 'Mark Meckes'",
        "source": "bird_question_637",
        "query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.AnswerCount >= 5",
        "error_sql": "SELECT DISTINCT t.TagName FROM posts p JOIN users u ON p.OwnerUserId = u.Id JOIN tags t ON p.Tags LIKE '%' || t.TagName || '%' WHERE u.DisplayName = 'Mark Meckes' AND p.AnswerCount >= 5;",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "117",
        "question": "Mention the display name and website url of the user who owned the excerpt post with hypothesis-testing tag. In the database, user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing'",
        "source": "bird_question_654",
        "query": "SELECT T3.DisplayName, T3.WebsiteUrl FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "error_sql": "SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN posts p ON u.Id = p.OwnerUserId JOIN tags t ON p.ExcerptPostId = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing'",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: p.ExcerptPostId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "118",
        "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who own it. In the database, views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets'",
        "source": "bird_question_685",
        "query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "error_sql": "SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Title = 'Computer Game Datasets'",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "120",
        "question": "What is the gender of the dumbest superhero? In the database, the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'.",
        "source": "bird_question_736",
        "query": "SELECT T1.gender_id FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "error_sql": "SELECT gender.gender FROM superhero JOIN gender ON superhero.gender_id = gender.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Intelligence' AND hero_attribute.attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Intelligence'));",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "121",
        "question": "What are the publisher of the superheroes with the power of death touch? In the database, publisher of the superheroes refers to publisher_id; the power of death touch refers to power_name = 'Death Touch'",
        "source": "bird_question_739",
        "query": "SELECT T1.publisher_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "error_sql": "SELECT publisher.publisher_name FROM publisher JOIN superhero ON publisher.id = superhero.publisher_id JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "123",
        "question": "For the Bahrain Grand Prix with 3 rounds, how many drivers not finished the game? In the database, drivers who finished the race refers to time has records",
        "source": "bird_question_862",
        "query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.round = 3 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "error_sql": "SELECT COUNT(*)  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND round = 3)  AND time IS NULL;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "125",
        "question": "Name all drivers in the 2010 Singapore Grand Prix order by their points.",
        "source": "bird_question_891",
        "query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.points ASC",
        "error_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Singapore Grand Prix' AND races.year = 2010 ORDER BY results.points DESC;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "126",
        "question": "What is the best lap time recorded? List the code of driver and race with such recorded lap time. In the database, the best lap time refers to min(time).",
        "source": "bird_question_894",
        "query": "SELECT T2.milliseconds, T1.code, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "error_sql": "SELECT drivers.code, races.name FROM lapTimes JOIN drivers ON lapTimes.driverId = drivers.driverId JOIN races ON lapTimes.raceId = races.raceId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes)",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "129",
        "question": "Which was Lewis Hamilton first race? What was his position recorded for his first race event? In the database, first race refers to min(Year).",
        "source": "bird_question_906",
        "query": "SELECT T1.name, T2.position FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "error_sql": "SELECT position FROM results WHERE driverId = (     SELECT driverId     FROM drivers     WHERE forename = 'Lewis' AND surname = 'Hamilton' ) AND raceId = (     SELECT raceId     FROM races     WHERE year = (         SELECT MIN(year)         FROM races     ) )",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "132",
        "question": "On what year did the youngest driver had his first qualifying race? where can I know more about the race? In the database, youngest driver refers to Max (year(dob)).",
        "source": "bird_question_981",
        "query": "SELECT T3.year, T3.url FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": "SELECT MIN(year)  FROM qualifying  JOIN drivers ON qualifying.driverId = drivers.driverId  WHERE drivers.dob = (SELECT MIN(dob) FROM drivers)",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: year",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "133",
        "question": "How many drivers born after 1980-01-01 have been disqualified from the race. In the database, disqualified refers to statusID = 2.",
        "source": "bird_question_982",
        "query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.dob >= '1980-01-01'",
        "error_sql": "SELECT COUNT(*)  FROM drivers  JOIN driverStandings ON drivers.driverId = driverStandings.driverId  JOIN results ON drivers.driverId = results.driverId  WHERE drivers.dob > '1980-01-01' AND results.statusId = 2;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "135",
        "question": "Please list the name and country of the circuits whose lap record is 1:29.488. In the database, lap records means the fastest time recorded which refers to time.",
        "source": "bird_question_1017",
        "query": "SELECT T3.name, T3.country FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "error_sql": "SELECT name, country FROM circuits WHERE circuitId IN (     SELECT circuitId     FROM lapTimes     WHERE time = '1:29.488' )",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "136",
        "question": "State the birthday of players who came from Belgium. In the database, Belgium is name of country",
        "source": "bird_question_1126",
        "query": "SELECT t3.birthday FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "error_sql": "SELECT birthday FROM Player WHERE player_api_id IN (     SELECT player_api_id     FROM Country     JOIN Player ON Country.id = Player.player_api_id     WHERE Country.name = 'Belgium' )",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "137",
        "question": "Which country's players have the lowest average heights?",
        "source": "bird_question_1128",
        "query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.height) ASC LIMIT 1",
        "error_sql": "SELECT Country.name FROM Country JOIN Player ON Country.id = Player.country_id GROUP BY Country.name ORDER BY AVG(Player.height) ASC LIMIT 1;",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "141",
        "question": "What type of event has the lowest cost?",
        "source": "bird_question_1389",
        "query": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "error_sql": "SELECT type FROM event WHERE event_id = (     SELECT event_id     FROM budget     WHERE cost = (         SELECT MIN(cost)         FROM budget     ) )",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: cost",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple"
    },
    {
        "id": "142",
        "question": "Please list the segment of the gas stations with transactions taken place in June, 2013. In the database, June 2013 refers to '201306'.",
        "source": "bird_question_1501",
        "query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "error_sql": "SELECT DISTINCT gs.Segment FROM gasstations gs JOIN transactions_1k t ON gs.GasStationID = t.GasStationID WHERE t.Date LIKE '201306'",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "144",
        "question": "What is the consumption by customer '38508' at the gas stations? How much had the customer consumed in January 2012? In the database, January 2012 refers '201201' in the table transactions_1k",
        "source": "bird_question_1529",
        "query": "SELECT SUM(T3.Consumption) , SUM(IIF(T3.Date = '201201', T3.Consumption, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '31543' AND T2.GasStationID = '3704'",
        "error_sql": "SELECT SUM(Amount)  FROM transactions_1k  WHERE CustomerID = '38508'  AND Date LIKE '201201%'",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "145",
        "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What is his/her Segment? In the database, average price per single item = price / amount",
        "source": "bird_question_1531",
        "query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "error_sql": "SELECT customers.CustomerID, customers.Segment, AVG(transactions_1k.Price / transactions_1k.Amount) AS average_price FROM customers JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID GROUP BY customers.CustomerID ORDER BY SUM(transactions_1k.Price) DESC LIMIT 1;",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "147",
        "question": "How many events with the status 'Open' of the Student_Club did Sacha Harrison attend?",
        "source": "bird_question_1321",
        "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND T1.status = 'Open'",
        "error_sql": "SELECT COUNT(*)  FROM event e  JOIN attendance a ON e.event_id = a.link_to_event  JOIN member m ON a.link_to_member = m.member_id  JOIN major mj ON m.link_to_major = mj.major_id  WHERE e.status = 'Open'  AND mj.department = 'Student_Club'  AND m.first_name = 'Sacha'  AND m.last_name = 'Harrison';",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "148",
        "question": "List the email and the position of all the members of the Student_Club who attended the 'Laugh Out Loud' event. In the database, 'Laugh Out Loud' is an event name;",
        "source": "bird_question_1327",
        "query": "SELECT T1.email, T1.position FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "error_sql": "SELECT member.email, member.position FROM member JOIN attendance ON member.member_id = attendance.link_to_member JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Laugh Out Loud' AND member.link_to_major = (SELECT major_id FROM major WHERE major_name = 'Student_Club');",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "149",
        "question": "Was each expense in the event with type 'Meeting' approved? In the database, approved = True means expenses was approved; approved = False means expenses was not approved",
        "source": "bird_question_1338",
        "query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "error_sql": "SELECT expense_id, approved FROM expense JOIN event ON expense.link_to_event = event.event_id WHERE event.type = 'Meeting';",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: expense.link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "152",
        "question": "What was the growth rate of the total amount of loans across all accounts for a client from district with the id 73?",
        "source": "bird_question_169",
        "query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.district_id = 73 AND T3.type = 'OWNER'",
        "error_sql": "SELECT (MAX(l.amount) - MIN(l.amount)) / MIN(l.amount) * 100 AS growth_rate FROM loan l JOIN account a ON l.account_id = a.account_id JOIN client c ON a.client_id = c.client_id WHERE c.district_id = 73;",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: a.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "challenging"
    },
    {
        "id": "153",
        "question": "What is the average score of posts posted by Matt Parker and have more than 4 votes? In the database, more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker'.",
        "source": "bird_question_635",
        "query": "SELECT AVG(T3.Score) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "error_sql": "SELECT AVG(posts.Score) FROM posts JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Matt Parker' AND posts.PostId > 4;",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: posts.PostId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "159",
        "question": "Which superhero has the lowest combat published by Dark Horse Comics? In the database, lowest combat refers to MIN(attribute_value) WHERE attribute_name = 'Combat'.",
        "source": "bird_question_769",
        "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Combat' ORDER BY T2.attribute_value ASC LIMIT 1",
        "error_sql": "SELECT superhero_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE publisher.publisher_name = 'Dark Horse Comics' AND attribute.attribute_name = 'Combat' AND hero_attribute.attribute_value = (     SELECT MIN(attribute_value)     FROM hero_attribute     JOIN attribute ON hero_attribute.attribute_id = attribute.id     WHERE attribute.attribute_name = 'Combat' )",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging"
    },
    {
        "id": "160",
        "question": "List the distinct race of the brown-haired male superhero. In the database, brown-haired refers to colour.colour = 'Brown' WHERE hair_colour_id = colour.id; male refers to gender = 'Male'.",
        "source": "bird_question_817",
        "query": "SELECT DISTINCT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Brown' AND T4.gender = 'Male'",
        "error_sql": "SELECT DISTINCT race.race FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE colour.colour = 'brown' AND gender.gender = 'male'",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "161",
        "question": "List thr superhero name of female superheroes who has the ability of Phoenix Force. In the database,ability of Phoenix Force refers to power_name = 'Phoenix Force'.",
        "source": "bird_question_825",
        "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force' AND T4.gender = 'Female'",
        "error_sql": "SELECT superhero_name  FROM superhero  WHERE gender_id = (SELECT id FROM gender WHERE gender = 'female')  AND id IN (SELECT hero_id FROM hero_power WHERE power_id = (SELECT id FROM superpower WHERE power_name = 'Phoenix Force'));",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "162",
        "question": "How many times did Michael Schumacher won from races hosted in the location of Shanghai?In the database, win from races refers to wins=1.",
        "source": "bird_question_903",
        "query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.location = 'Shanghai'",
        "error_sql": "SELECT COUNT(*)  FROM driverStandings ds  JOIN drivers d ON ds.driverId = d.driverId  JOIN races r ON ds.raceId = r.raceId  JOIN circuits c ON r.circuitId = c.circuitId  WHERE d.forename = 'Michael'  AND d.surname = 'Schumacher'  AND c.location = 'Shanghai'  AND ds.position = 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "163",
        "question": "What is nationality of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?In the database, Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race.",
        "source": "bird_question_1001",
        "query": "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "error_sql": "SELECT d.nationality FROM qualifying q JOIN drivers d ON q.driverId = d.driverId JOIN races r ON q.raceId = r.raceId WHERE r.name = 'Marina Bay Street Circuit' AND r.year = 2008 AND q.position = 1 AND q.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = r.raceId) LIMIT 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "164",
        "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, When did he get into the pit stop at that same race?In the database, lap record means the fastest time recorded which refers to time.",
        "source": "bird_question_1016",
        "query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.time FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
        "error_sql": "SELECT pitStops.time FROM pitStops JOIN lapTimes ON pitStops.raceId = lapTimes.raceId AND pitStops.driverId = lapTimes.driverId WHERE lapTimes.time = (SELECT MIN(time) FROM lapTimes WHERE lapTimes.raceId = pitStops.raceId) AND pitStops.raceId = (SELECT raceId FROM races WHERE name = 'Austrian Grand Prix Circuit') AND pitStops.driverId = (SELECT driverId FROM lapTimes WHERE time = (SELECT MIN(time) FROM lapTimes WHERE lapTimes.raceId = pitStops.raceId)) LIMIT 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "165",
        "question": "Locate players with crossing scores of 70 and above, state the country of these players.In the database, crossing scores of 70 and above refers to crossing > 69.",
        "source": "bird_question_1127",
        "query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.crossing > 69",
        "error_sql": "SELECT DISTINCT Country.name FROM Player_Attributes JOIN Player ON Player_Attributes.player_api_id = Player.player_api_id JOIN Country ON Player.country_id = Country.id WHERE Player_Attributes.crossing > 69;",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate"
    },
    {
        "id": "167",
        "question": "Which student has been entrusted to manage the budget for the event with status 'Open'?",
        "source": "bird_question_1387",
        "query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.status = 'Open'",
        "error_sql": "SELECT m.first_name, m.last_name FROM member m JOIN budget b ON m.member_id = b.link_to_event WHERE b.event_status = 'Open'",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "168",
        "question": "List the members who incurred expenses in more than one event with the type 'Meeting', ordered by the amount from low to high.",
        "source": "bird_question_1451",
        "query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.type = 'Meeting' GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY T1.cost",
        "error_sql": "SELECT m.first_name, m.last_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN event ev ON e.link_to_event = ev.event_id WHERE ev.type = 'Meeting' GROUP BY m.member_id HAVING COUNT(DISTINCT ev.event_id) > 1 ORDER BY e.cost ASC;",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: e.link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "169",
        "question": "Write the phone of students who received funds on the date of 9/9/2019 and include the amount received.In the database, amount of funds received refers to amount, received funds on date refers to date_received.",
        "source": "bird_question_1464",
        "query": "SELECT DISTINCT T3.phone, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "error_sql": "SELECT member.phone, income.amount FROM member JOIN income ON member.member_id = income.link_to_member WHERE income.date_received = '9/9/2019'",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "173",
        "question": "What is the hero's full name and publisher with the highest attribute in strength?In the database,strength attribute refers to attribute_name = 'Strength'.",
        "source": "bird_question_766",
        "query": "SELECT T1.full_name, T4.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": "SELECT superhero.full_name, publisher.publisher_name FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN publisher ON superhero.publisher_id = publisher.id WHERE attribute.attribute_name = 'strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "174",
        "question": "List the name and race of superheroes with flight power.",
        "source": "bird_question_771",
        "query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.power_name = 'Flight'",
        "error_sql": "SELECT superhero_name, race FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'flight';",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: race",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "175",
        "question": "Provide superheroes' names and hair colours who have the adaptation power. In the database, hair colour refers to colour where hair_colour_id = colour.id;adaptation power refers to power_name = 'Adaptation'",
        "source": "bird_question_778",
        "query": "SELECT T1.superhero_name, T4.colour FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T3.power_name = 'Adaptation'",
        "error_sql": "SELECT superhero_name, colour FROM superhero JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.id IN (     SELECT hero_id     FROM hero_power     JOIN superpower ON hero_power.power_id = superpower.id     WHERE superpower.power_name = 'adaptation' )",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "177",
        "question": "Which hero was the fastest? What is his/her race?",
        "source": "bird_question_794",
        "query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": "SELECT superhero_name, race FROM superhero WHERE height_cm = (SELECT MAX(height_cm) FROM superhero)",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: race",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "179",
        "question": "Among the bad superheroes, what is the percentage of female superheroes with black eyes? In the database, black eyes refers to colour = 'Black' and eye_colour_id = colour.id.",
        "source": "bird_question_818",
        "query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T2.alignment = 'Bad' AND T4.colour = 'Black'",
        "error_sql": "SELECT (COUNT(*) * 100.0) / (SELECT COUNT(*) FROM superhero WHERE alignment_id = 2)  FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN colour ON superhero.eye_colour_id = colour.id  WHERE alignment_id = 2 AND gender.id = 2 AND colour.colour = 'Black';",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging"
    },
    {
        "id": "180",
        "question": "List the name of drivers who finished first in the Yas Marina Circuit in 2010.In the database,finished first refers to position = 1.",
        "source": "bird_question_874",
        "query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId WHERE T1.year = 2010 AND T4.name = 'Yas Marina Circuit' AND T2.position = 1",
        "error_sql": "SELECT drivers.forename, drivers.surname FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE races.name = 'Yas Marina Circuit' AND races.year = 2010 AND results.position = 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "181",
        "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50 and the status were finished?",
        "source": "bird_question_962",
        "query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50 AND T4.status = 'Finished', 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.year BETWEEN 2000 AND 2005",
        "error_sql": "SELECT COUNT(*) * 100.0 / (SELECT COUNT(*) FROM drivers WHERE dob < '1985-01-01')  FROM results  JOIN drivers ON results.driverId = drivers.driverId  WHERE results.statusId = '1' AND results.laps > 50 AND drivers.dob < '1985-01-01' AND results.year BETWEEN 2000 AND 2005;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: results.year",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "182",
        "question": "On what year did the youngest driver had his first qualifying race? State the result in terms of points about him in the race.In the database,youngest driver refers to Max (year(dob));",
        "source": "bird_question_981",
        "query": "SELECT T3.year, T4.points FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId INNER JOIN results as T4 on T2.driverId = T4.driverId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": "SELECT r.year, r.points FROM results r JOIN drivers d ON r.driverId = d.driverId WHERE d.dob = (SELECT MIN(dob) FROM drivers) ORDER BY r.year LIMIT 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: r.year",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "184",
        "question": "List the website of the constructor of the drivers whose status is collision in the 2009 Singapore Grand Prix.",
        "source": "bird_question_990",
        "query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T4.status = 'Collision'",
        "error_sql": "SELECT constructors.url FROM constructors JOIN results ON constructors.constructorId = results.constructorId JOIN races ON results.raceId = races.raceId JOIN status ON results.statusId = status.statusId JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Singapore Grand Prix' AND races.year = 2009 AND status.status = 'collision'",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "185",
        "question": "Which constructor scored most points from Baku City Circuit between 2010 and 2020? List the score, name and nationality of this Team.",
        "source": "bird_question_994",
        "query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.name = 'Baku City Circuit' AND T3.year BETWEEN 2010 AND 2020 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "error_sql": "SELECT c.name, c.nationality, SUM(r.points) AS score FROM constructors c JOIN constructorResults cr ON c.constructorId = cr.constructorId JOIN races ra ON cr.raceId = ra.raceId WHERE ra.name = 'Baku City Circuit' AND ra.year BETWEEN 2010 AND 2020 GROUP BY c.constructorId ORDER BY score DESC LIMIT 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: r.points",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "186",
        "question": "What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).",
        "source": "bird_question_995",
        "query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T4.location = 'Monte-Carlo'",
        "error_sql": "SELECT AVG(results.points) FROM results JOIN drivers ON results.driverId = drivers.driverId JOIN circuits ON results.circuitId = circuits.circuitId WHERE drivers.surname = 'Hamilton' AND circuits.location = 'Monte-Carlo';",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: results.circuitId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "187",
        "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and her constructor's name and the id of the race to which he/she first joined.In the database,full name refers to forename+surname; youngest racer = MAX(dob).",
        "source": "bird_question_1002",
        "query": "SELECT T1.forename, T1.surname, T1.nationality, T3.raceId, T5.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId INNER JOIN constructorResults AS T4 on T3.raceId = T4.raceId INNER JOIN constructors AS T5 on T4.constructorId = T5.constructorId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "error_sql": "SELECT drivers.forename || ' ' || drivers.surname AS full_name, drivers.nationality, constructors.name, races.raceId FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId JOIN constructorResults ON results.resultId = constructorResults.resultId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE drivers.dob = (SELECT MIN(dob) FROM drivers)",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: constructorResults.resultId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "188",
        "question": "How many accidents did the driver who had the highest number accidents in the circuit Fuji Speedway have?",
        "source": "bird_question_1003",
        "query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T3.statusId = 3 AND T4.name = 'Fuji Speedway' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "error_sql": "SELECT COUNT(*)  FROM pitStops  WHERE driverId = (     SELECT driverId      FROM pitStops      WHERE raceId IN (         SELECT raceId          FROM races          WHERE circuitId = (             SELECT circuitId              FROM circuits              WHERE name = 'Fuji Speedway'         )     )     GROUP BY driverId      ORDER BY COUNT(*) DESC      LIMIT 1 )",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "189",
        "question": "Please provide name of events for members who have paid more than 50 dollar.In the database,have paid more than 50 dollar refers to cost > 50.",
        "source": "bird_question_1436",
        "query": "SELECT DISTINCT T4.event_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event as T4 ON T3.link_to_event = T4.event_id WHERE T1.cost > 50",
        "error_sql": "SELECT event_name FROM event WHERE event_id IN (     SELECT link_to_event     FROM budget     WHERE amount - spent > 50 )",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple"
    },
    {
        "id": "190",
        "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event, provide the major name of him. In the database,approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'.",
        "source": "bird_question_1437",
        "query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event, T4.major_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN major as T4 on T2.link_to_major = T4.major_id WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "error_sql": "SELECT m.first_name, m.last_name, a.link_to_event, ma.major_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id JOIN event ev ON a.link_to_event = ev.event_id JOIN major ma ON m.link_to_major = ma.major_id WHERE e.approved = 1 AND e.expense_date BETWEEN '2019-01-10' AND '2019-11-19'",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "191",
        "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense? which county does his/her from?",
        "source": "bird_question_1449",
        "query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name, T4.county FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN zip_code AS T4 on T1.zip = T4.zip_code WHERE T3.cost > 100",
        "error_sql": "SELECT m.first_name, m.last_name, mj.major_name, z.county FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN zip_code z ON m.zip = z.zip_code WHERE e.cost > 100;",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: mj.major_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "192",
        "question": "For events with less than average parking cost, list the events name and the link to their member.In the database,less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'.",
        "source": "bird_question_1453",
        "query": "SELECT T1.event_name, T4.link_to_member FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN attendance as T4 on T1.event_id = T4.link_to_event WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "error_sql": "SELECT event.event_name, member.link_to_member FROM event JOIN budget ON event.event_id = budget.link_to_event JOIN expense ON budget.budget_id = expense.link_to_budget JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Parking'  AND expense.cost < (SELECT AVG(expense.cost) FROM expense WHERE expense.expense_description = 'Parking')",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: member.link_to_member",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "193",
        "question": "List the full name and the major name of the top five members who spend the most money in the descending order of spending.",
        "source": "bird_question_1456",
        "query": "SELECT T3.first_name, T3.last_name, T4.major_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id INNER JOIN major as T4 on T3.link_to_major = T4.major_id ORDER BY T2.spent DESC LIMIT 5",
        "error_sql": "SELECT m.first_name || ' ' || m.last_name AS full_name, mj.major_name FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN budget b ON e.link_to_budget = b.budget_id JOIN major mj ON m.link_to_major = mj.major_id ORDER BY e.cost DESC LIMIT 5;",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "195",
        "question": "How many female accounts in the south Bohemia region are eligible for loans?In the database, A3 contains the data of region.",
        "source": "bird_question_90",
        "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'south Bohemia' AND T3.district_id = ( SELECT district_id FROM client WHERE gender = 'F')",
        "error_sql": "SELECT COUNT(*)  FROM account  JOIN client ON account.client_id = client.client_id  JOIN district ON account.district_id = district.district_id  WHERE client.gender = 'F'  AND district.A3 = 'south Bohemia'  AND account.account_id IN (SELECT account_id FROM loan WHERE status = 'eligible')",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: account.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "196",
        "question": "When is the birthday of a client who applied 98832 USD loan in East Bohemia in 1996/1/3?",
        "source": "bird_question_113",
        "query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832 AND T3.district_id = (SELECT district_id FROM district WHERE A3 = 'east Bohemia' )",
        "error_sql": "SELECT c.birth_date FROM client c JOIN loan l ON c.client_id = l.account_id JOIN district d ON c.district_id = d.district_id WHERE l.amount = 98832 AND d.A2 = 'East Bohemia' AND l.date = '1996-01-03';",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "197",
        "question": "State the district and type of loan ID '4990'.In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "query": "SELECT T2.A2, T2.A3, T4.'type'  FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.account_id = T4.account_id INNER JOIN loan AS T3 ON T4.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "error_sql": "SELECT district.A2, loan.type FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990';",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: loan.type",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "198",
        "question": "Provide the account ID, user gender，district and region for loan amount greater than USD300,000.In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "query": "SELECT T1.account_id, T4.gender, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T4 ON T4.district_id = T1.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "error_sql": "SELECT a.account_id, c.gender, d.A2, d.A3 FROM account a JOIN client c ON a.client_id = c.client_id JOIN district d ON a.district_id = d.district_id JOIN loan l ON a.account_id = l.account_id WHERE l.amount > 300000;",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: a.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "199",
        "question": "List the loan ID, bank, district and average salary loan with duration of 60 months.In the database, A3 refers to regions; A11 refers to average salary.",
        "source": "bird_question_124",
        "query": "SELECT T3.loan_id, T2.A2, T2.A11, T4.bank_to FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN 'order' AS T4 ON T4.account_id = T1.account_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "error_sql": "SELECT loan_id, bank, district_id, A11  FROM loan  JOIN account ON loan.account_id = account.account_id  JOIN district ON account.district_id = district.district_id  WHERE duration = 60 months;",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"months\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    }
]
