[
    {
        "id": "1",
        "new_question": "What is the eligible free rate for K-12 students in Maya Lin School? In the database, eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_0",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `School Name` = 'Maya Lin'",
        "error_sql": " SELECT FreeMealCount(K-12) / Enrollment(K-12) FROM schools WHERE School = 'Maya Lin School' ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such function: Enrollment",
            "error_type": [
                "OperationalError",
                "no such function"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "2",
        "new_question": "Please list the lowest three eligible free rates for K-12 students in continuation schools.In the database, Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_1",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (K-12)` / `Enrollment (K-12)` IS NOT NULL ORDER BY `Free Meal Count (K-12)` / `Enrollment (K-12)` ASC LIMIT 3",
        "error_sql": " SELECT School, FreeMealCountK12/EnrollmentK12 AS EligibleFreeRate FROM schools WHERE SchoolType = 'Continuation' ORDER BY EligibleFreeRate LIMIT 3; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: FreeMealCountK12",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "3",
        "new_question": "How many schools in Kings offer over 400 free meals but less than 800 free meals to students aged 5-17?",
        "source": "bird_question_21",
        "new_query": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Kings' AND `Free Meal Count (Ages 5-17)` > 400 AND `Free Meal Count (Ages 5-17)` < 800",
        "error_sql": " SELECT COUNT(*) FROM schools WHERE County = 'Kings' AND FreeMealCount517 > 400 AND FreeMealCount517 < 800; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: FreeMealCount517",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "4",
        "new_question": "Which school in Alameda has the highest average math score? In the database, AvgScrMath means average math score.",
        "source": "bird_question_22",
        "new_query": "SELECT sname FROM satscores WHERE cname = 'Alameda' AND sname IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1",
        "error_sql": " SELECT School FROM satscores WHERE AvgScrMath = (SELECT MAX(AvgScrMath) FROM satscores WHERE District = 'Alameda'); ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: School",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "5",
        "new_question": "Which different county has the highest number of merged schools? Please provide the name of the city where each school is located.In the database, 'Merged' was mentioned in schools.StatusType.",
        "source": "bird_question_49",
        "new_query": "SELECT DISTINCT County, School, City FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Merged' AND school IS NOT NULL",
        "error_sql": " SELECT DISTINCT County, School FROM schools WHERE StatusType = 'Merged' ORDER BY County; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "6",
        "new_question": "Please help me check all the schools managed by Paco Furlan and their cities.",
        "source": "bird_question_54",
        "new_query": "SELECT School, City FROM schools WHERE AdmFName1 = 'Paco' AND AdmLName1 = 'Furlan'",
        "error_sql": " SELECT DISTINCT s.City FROM schools s, satscores ss WHERE s.CDSCode = ss.cds AND s.AdmFName1 = 'Paco' AND s.AdmLName1 = 'Furlan'; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "7",
        "new_question": "What is the ratio of the number of closed schools to the number of merged schools in California that have mailing state addresses? In the database, Ratio = count(closed schools) / count(merged schools)",
        "source": "bird_question_55",
        "new_query": "SELECT CAST(SUM(CASE WHEN StatusType = 'Closed' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN StatusType = 'Merged' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "error_sql": " SELECT COUNT(DISTINCT schools.CDSCode) / COUNT(DISTINCT schools.CDSCode) FROM schools WHERE schools.State = 'CA' AND schools.MailState = 'CA'; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "8",
        "new_question": "What is the city and website of the school with a postal code of 95203-3704? Please indicate the name of the school.",
        "source": "bird_question_58",
        "new_query": "SELECT City, Website, School FROM schools WHERE Zip = '95203-3704'",
        "error_sql": " SELECT City, Website FROM schools WHERE Zip = '95203-3704'; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "9",
        "new_question": "Which city are the schools managed by Mike Larson and Dante Alvarez located in respectively?",
        "source": "bird_question_59",
        "new_query": "SELECT City FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "error_sql": " SELECT DISTINCT City FROM schools WHERE AdmEmail1 = 'mlarson@santaclara.k12.ca.us' OR AdmEmail1 = 'dalvarez@santaclara.k12.ca.us'; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "10",
        "new_question": "In chartered schools with charter number 0665, what are the names of all the administrators? Including the county where the school is located and the type of school status.In the database, Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name.",
        "source": "bird_question_63",
        "new_query": "SELECT AdmFName1, AdmLName1, County, StatusType FROM schools WHERE Charter = 1 AND CharterNum = '0665'",
        "error_sql": " SELECT schools.County, schools.StatusType, schools.AdmFName1, schools.AdmLName1, schools.AdmFName2, schools.AdmLName2, schools.AdmFName3, schools.AdmLName3 FROM schools WHERE schools.Charter = 1 AND schools.CharterNum = 0665; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "11",
        "new_question": "What is the total amount of High School District closure in 1989 in the county of Fresno?",
        "source": "bird_question_67",
        "new_query": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND County = 'Fresno' AND DOCType = 'High School District'",
        "error_sql": " SELECT SUM(HighGrade) FROM frpm WHERE CountyName = 'Fresno' AND DistrictType = 'High School' AND AcademicYear = 1989; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: HighGrade",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "12",
        "new_question": "How many active and merged District Community Day Schools are there in the city of Clovis?",
        "source": "bird_question_70",
        "new_query": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Merged' OR StatusType = 'Active') AND City = 'Clovis'",
        "error_sql": " SELECT COUNT(*) FROM schools WHERE District = 'Clovis Unified' AND StatusType = 'Active' OR StatusType = 'Merged'; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "13",
        "new_question": "List the accounts and the transaction amount with the earliest transaction date in 1995?",
        "source": "bird_question_101",
        "new_query": "SELECT account_id, amount FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "error_sql": " SELECT account_id, amount FROM trans WHERE date = (SELECT MIN(date) FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31') ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "14",
        "new_question": "How many owner and disponent dispositions are there from client number 20 to client number 30?",
        "source": "bird_question_172",
        "new_query": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE client_id BETWEEN 20 AND 30",
        "error_sql": " SELECT COUNT(*) FROM disp WHERE client_id BETWEEN 20 AND 30; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "15",
        "new_question": "How many  triple-bond molecules are there? In the database, triple type bonds refers to bond_type = '#'.",
        "source": "bird_question_202",
        "new_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "error_sql": " SELECT COUNT(DISTINCT molecule_id) FROM bond WHERE bond_type = ''; ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "16",
        "new_question": "In how many molecules is there no bromine? In the database, atoms with no bromine refers to element ! = 'br'.",
        "source": "bird_question_203",
        "new_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM atom AS T WHERE T.element <> 'br'",
        "error_sql": " SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'br');  In how many molecules is there no carbon? In the database, atoms with no carbon refers to element ! = 'c'.  SQL:  SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'c');  In how many molecules is there no carbon and no bromine? In the database, atoms with no carbon and no bromine refers to element ! = 'c' AND element != 'br'.  SQL:  SELECT label FROM molecule WHERE molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'c') AND molecule_id NOT IN (SELECT molecule_id FROM atom WHERE element = 'br');  In how many molecules is there a bond of type 1? In the database, bonds with type 1 refers to bond_type = 1.  SQL:  SELECT label FROM molecule WHERE molecule",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "17",
        "new_question": "What molecules contain silicon? In the database, silicon refers to element = 'si'.",
        "source": "bird_question_205",
        "new_query": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'si'",
        "error_sql": " SELECT label FROM molecule WHERE molecule_id IN (SELECT DISTINCT molecule_id FROM atom WHERE element = 'si');  SQL:  SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'si' GROUP BY molecule_id);  SQL:  SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'si' GROUP BY molecule_id HAVING COUNT(DISTINCT atom_id) > 0);  SQL:  SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'si' GROUP BY molecule_id HAVING COUNT(DISTINCT atom_id) > 0);  SQL:  SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM atom WHERE element = 'si' GROUP BY molecule_id HAVING COUNT(DISTINCT atom_id) > 0); ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "18",
        "new_question": "What are the bond IDs of the atom TR000_2? In the database, TR000_2 is the atom id.",
        "source": "bird_question_223",
        "new_query": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id = 'TR000_2'",
        "error_sql": " SELECT bond_id FROM connected WHERE atom_id = 'TR000_2';   What are the labels of the molecules that contain the atom TR000_2? In the database, TR000_2 is the atom id.  SQL:  SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id = 'TR000_2');   What are the labels of the molecules that contain the atom TR000_2 and the atom TR000_3? In the database, TR000_2 and TR000_3 are the atom ids.  SQL:  SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id = 'TR000_2' AND molecule_id IN (SELECT molecule_id FROM connected WHERE atom_id = 'TR000_3'));   What are the labels of the molecules that contain the atom TR000_2 and the atom",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "19",
        "new_question": "What are the atom IDs that have the same atom ID 2 of TR000_2? In the database, TR000_2 is the atom id; atom ID 2 refers to atom_id2.",
        "source": "bird_question_224",
        "new_query": "SELECT T.atom_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "error_sql": " SELECT atom_id FROM connected WHERE atom_id2 IN (SELECT atom_id2 FROM connected WHERE atom_id = 'TR000_2'); ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "20",
        "new_question": "What is the ID of bond that molecule TR000 has when involved in any bonds?In the database, ID of bond refers to bond_id; TR000 is the molecule id.",
        "source": "bird_question_229",
        "new_query": "SELECT DISTINCT T.bond_id FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "error_sql": " SELECT bond_id FROM molecule NATURAL JOIN bond WHERE label = 'TR000'; ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "21",
        "new_question": "How many bonds have a triple bond type?In the database, triple bond refers to bond_type = '#'.",
        "source": "bird_question_238",
        "new_query": "SELECT COUNT(DISTINCT T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
        "error_sql": " SELECT COUNT(*) FROM bond WHERE bond_type = '';   How many atoms are in the molecule with label 'ethane'?  SQL:  SELECT COUNT(*) FROM atom WHERE molecule_id IN (SELECT molecule_id FROM molecule WHERE label = 'ethane');   How many atoms are connected to the atom with atom_id = 17?  SQL:  SELECT COUNT(*) FROM connected WHERE atom_id = 17;   What is the element of the atom with atom_id = 25?  SQL:  SELECT element FROM atom WHERE atom_id = 25;   What is the bond_type of the bond with bond_id = 17?  SQL:  SELECT bond_type FROM bond WHERE bond_id = 17;   What is the label of the molecule with molecule_id = 8?  SQL:  SELECT label FROM molecule WHERE molecule_id = 8;  ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "22",
        "new_question": "List down the molecule id for carcinogenic molecules.In the database, label = '+' means molecules are carcinogenic.",
        "source": "bird_question_265",
        "new_query": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '+'",
        "error_sql": " SELECT molecule_id FROM molecule WHERE label = '+';   List down the molecule id for non-carcinogenic molecules.In the database, label = '-' means molecules are non-carcinogenic.  SQL:  SELECT molecule_id FROM molecule WHERE label = '-';   List down the molecule id for carcinogenic molecules that have at least one bond.  SQL:  SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN (SELECT molecule_id FROM bond);   List down the molecule id for carcinogenic molecules that have at least one atom.  SQL:  SELECT molecule_id FROM molecule WHERE label = '+' AND molecule_id IN (SELECT molecule_id FROM atom);   List down the molecule id for carcinogenic molecules that have at least one atom and at least one bond.  SQL:  SELECT molecule_id FROM",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "23",
        "new_question": "Give me the bond ID of the double bond type.In the database, double bond refers to bond_type = '='.",
        "source": "bird_question_275",
        "new_query": "SELECT DISTINCT T.bond_id FROM bond AS T WHERE T.bond_type = '='",
        "error_sql": " SELECT bond_id FROM bond WHERE bond_type = '=';   Give me the molecule ID of the molecule that contains the double bond.  SQL:  SELECT molecule_id FROM bond WHERE bond_type = '=';   Give me the atom ID of the atoms that are connected to the double bond.  SQL:  SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '=');   Give me the element of the atoms that are connected to the double bond.  SQL:  SELECT element FROM atom WHERE atom_id IN (SELECT atom_id, atom_id2 FROM connected WHERE bond_id IN (SELECT bond_id FROM bond WHERE bond_type = '='));   Give me the label of the molecule that contains the double bond.  SQL:  SELECT label FROM molecule WHERE molecule_id IN (SELECT molecule_id FROM bond WHERE bond_type = '='); ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "24",
        "new_question": "Determine the percentage of single bonds formed in all compounds containing the molecule TR013. In the database, TR013 is the molecule id; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(all bond_id)) as percent where molecule_id = 'TR013'.",
        "source": "bird_question_287",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR013'",
        "error_sql": " SELECT SUM(bond_type = ' - ') / COUNT(bond_id) * 100 AS percent FROM bond WHERE molecule_id = 'TR013'; ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate"
    },
    {
        "id": "25",
        "new_question": "How many the black cards available without powerful foils? In the database, 'black' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null.",
        "source": "bird_question_341",
        "new_query": "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "error_sql": " SELECT COUNT(*) FROM cards WHERE borderColor = 'black' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL) ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "26",
        "new_question": "List the names and availability of cards that consume more face conversion magic points. In the database, more converted mana for the face refers to Max(faceConvertedManaCost).",
        "source": "bird_question_342",
        "new_query": "SELECT name,availability FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "error_sql": " SELECT name, availability FROM cards WHERE faceConvertedManaCost > convertedManaCost; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "27",
        "new_question": "What is the keyword found on card 'Condemn'? In the database, 'Condemn' is the name of card.",
        "source": "bird_question_355",
        "new_query": "SELECT DISTINCT keywords FROM cards WHERE name = 'Condemn'",
        "error_sql": " SELECT keyword FROM cards WHERE name = 'Condemn' ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: keyword",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "28",
        "new_question": "How many set codes are there for all cards translated into Spanish? In the database, Spanish refer to language; set code refers to setCode.",
        "source": "bird_question_400",
        "new_query": "SELECT COUNT(setCode) FROM set_translations WHERE language = 'Spanish'",
        "error_sql": " SELECT COUNT(DISTINCT setCode) FROM cards, set_translations WHERE cards.setCode = set_translations.setCode AND set_translations.language = 'Spanish'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: setCode",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "29",
        "new_question": "What is the name of the card with the multiverse number 150317? In the database, multiverse number 150317 refers to multiverseid = 150317.",
        "source": "bird_question_422",
        "new_query": "SELECT name FROM foreign_data WHERE multiverseid = 150317",
        "error_sql": " SELECT name FROM cards WHERE multiverseid = 150317;  Result: \"Ashenmoor Liege\" ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "30",
        "new_question": "What are the names of card games in French? In the database, French refer to language.",
        "source": "bird_question_440",
        "new_query": "SELECT DISTINCT name FROM foreign_data WHERE language = 'French'",
        "error_sql": " SELECT name FROM sets NATURAL JOIN set_translations WHERE language = 'French'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "31",
        "new_question": "What are the tags on the post titled 'What is normality?'?In the database, 'What is normality?' is the Title of post; tags refers to Tags",
        "source": "bird_question_572",
        "new_query": "SELECT Tags FROM posts WHERE Title = 'What is normality?'",
        "error_sql": " SELECT Tags FROM posts WHERE Title = 'What is normality?';  Result: <class 'sqlite3.Cursor'>: [('android',)] ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "32",
        "new_question": "What are the comments posted by user ID 37?",
        "source": "bird_question_588",
        "new_query": "SELECT Text FROM comments WHERE UserId = 37",
        "error_sql": " SELECT * FROM comments WHERE UserId = 37; ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "33",
        "new_question": "Who is the heaviest superhero? In the database, who refers to superhero_name; heaviest superhero refers to MAX(weight_kg);",
        "source": "bird_question_802",
        "new_query": "SELECT superhero_name FROM superhero ORDER BY weight_kg DESC LIMIT 1",
        "error_sql": " SELECT superhero_name FROM superhero WHERE weight_kg = (SELECT MAX(weight_kg) FROM superhero);  Result: 'The Thing' ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "34",
        "new_question": "List the driver IDs for position number 1.",
        "source": "bird_question_966",
        "new_query": "SELECT driverId FROM driverStandings WHERE position = 1",
        "error_sql": "  SELECT driverId FROM results WHERE position = 1;  SELECT driverId FROM results WHERE position = 1;",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "35",
        "new_question": "Please list the mailing address of all the charter schools in Livermore Valley Joint Unified.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm.",
        "source": "bird_question_2",
        "new_query": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Livermore Valley Joint Unified' AND T1.`Charter School (Y/N)` = 1",
        "error_sql": " SELECT DISTINCT MailStreet, MailStrAbr, MailCity, MailZip, MailState FROM schools WHERE County = 'Livermore Valley Joint Unified' AND Charter = 1; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "36",
        "new_question": "What is the type the school with the highest FRPM count for K-12 students?",
        "source": "bird_question_3",
        "new_query": "SELECT T2.School Type FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "error_sql": " SELECT DISTINCT SchoolType FROM frpm WHERE FRPMCountK12 = (SELECT MAX(FRPMCountK12) FROM frpm); ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: SchoolType",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "37",
        "new_question": "Please list the phone numbers of the direct charter-funded schools that are opened before 1985/1/1.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the frpm.",
        "source": "bird_question_4",
        "new_query": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate < '1985-01-01'",
        "error_sql": " SELECT DISTINCT Phone FROM schools WHERE Charter = 1 AND OpenDate < '1985-01-01'; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "38",
        "new_question": "Please list the schools with an average score in Write above 450 in the SAT test are exclusively virtual?In the database, Exclusively virtual refers to Virtual = 'F'.",
        "source": "bird_question_5",
        "new_query": "SELECT DISTINCT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrWrite > 450",
        "error_sql": " SELECT Schools.School FROM Schools, SATScores WHERE Schools.Virtual = 'F' AND Schools.School = SATScores.School AND SATScores.AvgScrWrite > 450; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: SATScores.School",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "39",
        "new_question": "Among the schools with the SAT test takers of over 400, what is the number of schools that are magnet schools or offer a magnet program.In the database, Magnet schools or offer a magnet program means that Magnet = 1.",
        "source": "bird_question_6",
        "new_query": "SELECT COUNT(T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 400",
        "error_sql": " SELECT COUNT(DISTINCT schools.CDSCode) FROM schools, satscores WHERE satscores.NumTstTakr > 400 AND schools.Magnet = 1; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "40",
        "new_question": "What is the the mailing address of the school that has the highest number of test takers with an SAT score of over 1500?",
        "source": "bird_question_7",
        "new_query": "SELECT T2.MailStreet FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "error_sql": " SELECT MailStreet, MailStrAbr, MailCity, MailZip, MailState FROM schools JOIN satscores ON schools.CDSCode = satscores.cds WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores); ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "41",
        "new_question": "What is the number of SAT test takers of the schools with the highest FRPM count for students aged 5-17?",
        "source": "bird_question_8",
        "new_query": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (Ages 5-17)` DESC LIMIT 1 )",
        "error_sql": " SELECT NumTstTakr FROM satscores WHERE cds IN (SELECT cds FROM frpm WHERE FRPM_Count_Ages_5_17 = (SELECT MAX(FRPM_Count_Ages_5_17) FROM frpm)); ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: FRPM_Count_Ages_5_17",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "42",
        "new_question": "Among the schools with an SAT excellence rate of over 0.9, what is the lowest eligible free rate for students aged 5-17?In the database, Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`.",
        "source": "bird_question_12",
        "new_query": "SELECT MIN(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.9",
        "error_sql": " SELECT MIN(`Free Meal Count (Ages 5-17)`/`Enrollment (Ages 5-17)`) FROM satscores, schools WHERE satscores.cds = schools.CDSCode AND NumGE1500/NumTstTakr > 0.9; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Free Meal Count (Ages 5-17)",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate"
    },
    {
        "id": "43",
        "new_question": "Please list the number of SAT test takers of the schools with the top 3 SAT excellence rate.In the database, Excellence rate = NumGE1500 / NumTstTakr.",
        "source": "bird_question_13",
        "new_query": "SELECT T2.NumTstTakr FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "error_sql": " SELECT NumTstTakr FROM satscores ORDER BY NumGE1500/NumTstTakr DESC LIMIT 3; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "44",
        "new_question": "List the top three schools, by descending order, from the highest to the lowest, the most number of free meal (Ages 5-17). Please give their NCES school identification number.",
        "source": "bird_question_14",
        "new_query": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Free Meal Count (Ages 5-17)` DESC LIMIT 3",
        "error_sql": " SELECT NCESSchool FROM schools ORDER BY FreeMealCount (Ages 5-17) DESC LIMIT 3; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"5\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "45",
        "new_question": "Which active district has the highest average score in Math?",
        "source": "bird_question_15",
        "new_query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "error_sql": " SELECT District, AVG(AvgScrMath) FROM satscores WHERE District IN (SELECT DISTINCT District FROM schools WHERE StatusType = 'Active') GROUP BY District ORDER BY AVG(AvgScrMath) DESC LIMIT 1; ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: District",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "46",
        "new_question": "What is the number of SAT test takers of the school with the highest number of test takers who received SAT scores of at least 1500?",
        "source": "bird_question_88",
        "new_query": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "error_sql": " SELECT NumGE1500 FROM satscores WHERE NumGE1500 = (SELECT MAX(NumGE1500) FROM satscores); ",
        "db_id": "california_schools",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple"
    },
    {
        "id": "47",
        "new_question": "In the carcinogenic molecules, how many contain chlorine atoms?In the database, carcinogenic molecules refers to label = '+'; chlorine atoms refers to element = 'cl'.",
        "source": "bird_question_196",
        "new_query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '+'",
        "error_sql": " SELECT COUNT(DISTINCT molecule_id) FROM molecule, atom WHERE molecule.molecule_id = atom.molecule_id AND label = '+' AND element = 'cl'; ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: molecule_id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "48",
        "new_question": "Calculate the max number of hydrogen ygen atoms in single-bonded molecules.In the database, single-bonded molecules refers to bond_type = '-' ; average number of hydrogen ygen atom = AVG(element = 'h').",
        "source": "bird_question_197",
        "new_query": "SELECT MAX(hydrogen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS hydrogen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'h'  GROUP BY T1.molecule_id) AS hydrogen_count",
        "error_sql": " SELECT MAX(hydrogen_count) FROM (SELECT AVG(element = 'h') AS hydrogen_count FROM molecule NATURAL JOIN bond WHERE bond_type = '-' GROUP BY molecule_id); ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: element",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate"
    },
    {
        "id": "49",
        "new_question": "In the molecule containing oxygen atoms, how many are carcinogenic?In the database, carcinogenic refers to label = '+'; oxygen atoms refers to element = 'o'.",
        "source": "bird_question_199",
        "new_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "error_sql": " SELECT COUNT(*) FROM molecule, atom WHERE molecule.molecule_id = atom.molecule_id AND molecule.label = '+' AND atom.element = 'o'; ",
        "db_id": "toxicology",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple"
    },
    {
        "id": "50",
        "new_question": "Describe the date about rulings for card named 'Sublime Epiphany' with number 74s.In the database, 'Sublime Epiphany' is name of cards; number 74s refers to number = '74s'.",
        "source": "bird_question_348",
        "new_query": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "error_sql": " SELECT text FROM rulings WHERE uuid IN (SELECT uuid FROM cards WHERE name = 'Sublime Epiphany' AND number = '74s') ORDER BY date DESC; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "51",
        "new_question": "Name the card and artist with the most ruling information. Also state the border color of card.In the database, with the most ruling information refers to Max(count(rulings.uuid)).",
        "source": "bird_question_349",
        "new_query": "SELECT T1.name, T1.artist, T1.borderColor FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.artist ORDER BY COUNT(DISTINCT T1.uuid) DESC LIMIT 1",
        "error_sql": " SELECT cards.name, cards.artist, cards.borderColor FROM cards JOIN rulings ON cards.uuid = rulings.uuid GROUP BY cards.uuid ORDER BY count(rulings.uuid) DESC LIMIT 1; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "52",
        "new_question": "State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.",
        "source": "bird_question_350",
        "new_query": "SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "error_sql": " SELECT type FROM cards WHERE name = 'Annul' AND number = '29';   State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.  SQL:  SELECT type FROM cards WHERE name = 'Annul' AND number = '29';   State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.  SQL:  SELECT type FROM cards WHERE name = 'Annul' AND number = '29';   State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.  SQL:  SELECT type FROM cards WHERE name = 'Annul' AND number = '29';   State the type for card named Annul",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "53",
        "new_question": "How many cards which have alternative language in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_351",
        "new_query": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": " SELECT COUNT(*) FROM cards WHERE id IN (SELECT id FROM foreign_data WHERE language = 'Japanese');   How many cards which have alternative language in Japanese.In the database, 'Japanese' is the language. SELECT COUNT(*) FROM cards WHERE id IN (SELECT id FROM foreign_data WHERE language = 'Japanese'); ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "54",
        "new_question": "Calculate the percentage of the cards availabe in Japanese.In the database, 'Japanese' is the language; percentage = Divide(Sum(id where language = 'Japanese'), Count(id)) *100.",
        "source": "bird_question_352",
        "new_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "error_sql": " SELECT (SELECT COUNT(id) FROM foreign_data WHERE language = 'Japanese') / (SELECT COUNT(id) FROM foreign_data) * 100; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "55",
        "new_question": "What are the translation for the set that card 'Angel of Mercy' is in?In the database, 'Angel of Mercy' is the name of card.",
        "source": "bird_question_360",
        "new_query": "SELECT translation FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "error_sql": " SELECT translation FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE cards.name = 'Angel of Mercy'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "56",
        "new_question": "What is the format of card 'Cloudchaser Eagle'?In the database, 'Cloudchaser Eagle' is the name of card.",
        "source": "bird_question_364",
        "new_query": "SELECT DISTINCT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "error_sql": " SELECT type FROM cards WHERE name = 'Cloudchaser Eagle'  Result: Creature - Bird ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Result\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "57",
        "new_question": "List down the name of artists for cards in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_381",
        "new_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": " SELECT DISTINCT artist FROM cards, foreign_data WHERE cards.id = foreign_data.id AND language = 'Japanese';  SELECT DISTINCT artist FROM cards, foreign_data WHERE cards.id = foreign_data.id AND language = 'Japanese'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "58",
        "new_question": "List down the count of artists for cards that only available in paper and Japanese language?In the database, available in paper refers to availability = 'paper'; 'Japanese' is the language.",
        "source": "bird_question_382",
        "new_query": "SELECT COUNT(T1.artist) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "error_sql": " SELECT COUNT(DISTINCT artist) FROM cards WHERE availability = 'paper' AND id IN (SELECT id FROM foreign_data WHERE language = 'Japanese'); ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "59",
        "new_question": "What are the color of cards that have future frame version and what are the legality status of these cards?In the database, future frame version refers to frameVersion = 'future'.",
        "source": "bird_question_386",
        "new_query": "SELECT colors FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "error_sql": " SELECT DISTINCT colorIdentity, status FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE frameVersion = 'future'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "60",
        "new_question": "What are the cards for set OGW? State the artist for these cards.In the database, set OGW refers to setCode = 'OGW'.",
        "source": "bird_question_387",
        "new_query": "SELECT id, artist FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "error_sql": " SELECT DISTINCT name, artist FROM cards WHERE setCode = 'OGW'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "61",
        "new_question": "What are the cards in set 10E with converted mana of 5 have translation and what are the translation?In the database, set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5.",
        "source": "bird_question_388",
        "new_query": "SELECT id, translation FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "error_sql": " SELECT cards.name, foreign_data.translation FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.setCode = '10E' AND cards.convertedManaCost = 5; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: foreign_data.translation",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "62",
        "new_question": "List down the name of cards with original types of Creature - Elf and the information of rulings for these cards.In the database, Creature - Elf is the originalType.",
        "source": "bird_question_389",
        "new_query": "SELECT T1.id, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "error_sql": " SELECT cards.name, rulings.date, rulings.text FROM cards, rulings WHERE cards.originalType = 'Creature - Elf' AND cards.uuid = rulings.uuid; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "63",
        "new_question": "What are the border color text of cards from ID 1-20? What are the format of these cards?In the database, ID 1-20 refers to id BETWEEN 1 AND 20.",
        "source": "bird_question_390",
        "new_query": "SELECT T1.borderColor, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "error_sql": " SELECT borderColor, format FROM cards JOIN legalities ON cards.uuid = legalities.uuid WHERE id BETWEEN 1 AND 20; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "64",
        "new_question": "Pick 3 cards with rarity of uncommon, list down the artists for these cards according to ascending order of it's ruling date.In the database, uncommon refers to rarity = 'uncommon'.",
        "source": "bird_question_392",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "error_sql": " SELECT DISTINCT artist FROM cards WHERE rarity = 'uncommon' ORDER BY (SELECT date FROM rulings WHERE uuid = cards.uuid LIMIT 1) ASC; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "65",
        "new_question": "Lists availability of cards in German.In the database, German refer to language; availability refer to the availability where subtypes is not null AND supertypes is not null",
        "source": "bird_question_407",
        "new_query": "SELECT T1.availability FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "error_sql": " SELECT DISTINCT availability FROM cards WHERE subtypes IS NOT NULL AND supertypes IS NOT NULL;    Lists the number of cards in each set.  SQL:  SELECT baseSetSize, code FROM sets;    Lists the number of cards in each set that have a given subtype.  SQL:  SELECT COUNT(id), subtypes FROM cards WHERE subtypes IS NOT NULL GROUP BY subtypes;    Lists the number of cards in each set that have a given supertype.  SQL:  SELECT COUNT(id), supertypes FROM cards WHERE supertypes IS NOT NULL GROUP BY supertypes;    Lists the number of cards in each set that have a given type.  SQL:  SELECT COUNT(id), type FROM cards GROUP BY type;    Lists the number of cards in each set that have a given rarity.  SQL:  SELECT COUNT(id), rarity FROM cards GROUP BY rarity;    Lists the number of cards in each set that have a",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "66",
        "new_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its all types.In the database, available in paper refers to availability = 'paper'.",
        "source": "bird_question_410",
        "new_query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "error_sql": " SELECT DISTINCT cards.name, cards.type FROM cards, legalities WHERE cards.artist = 'Erica Yang' AND cards.availability = 'paper' AND legalities.status = 'Legal' AND legalities.format = 'Pauper' AND cards.uuid = legalities.uuid; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "67",
        "new_question": "What is the foreign text of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?In the database, in French refers to language = 'French'; black border color refers to borderColor = 'black'.",
        "source": "bird_question_412",
        "new_query": "SELECT text FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "error_sql": " SELECT foreign_data.text FROM cards, foreign_data WHERE cards.artist = 'Matthew D. Wilson' AND cards.borderColor = 'black' AND cards.layout = 'normal' AND cards.type = 'Creature' AND cards.id = foreign_data.id AND foreign_data.language = 'French'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "68",
        "new_question": "What is the code of set number 5 and its translation?In the database, set number 5 refers to id = 5.",
        "source": "bird_question_428",
        "new_query": "SELECT T1.code, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "error_sql": " SELECT sets.code, set_translations.translation FROM sets JOIN set_translations ON sets.id = set_translations.id WHERE sets.id = 5; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "69",
        "new_question": "What is the translation and expansion type of set number 206?In the database, set number 206 refers to id = 206.",
        "source": "bird_question_429",
        "new_query": "SELECT T2.translation, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
        "error_sql": " SELECT translation, type FROM sets JOIN set_translations ON sets.id = set_translations.id WHERE sets.id = 206; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "70",
        "new_question": "Please list top two sets of cards with their release date that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "source": "bird_question_430",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "error_sql": " SELECT sets.name, sets.releaseDate FROM cards  JOIN foreign_data ON cards.id = foreign_data.id  JOIN sets ON cards.setCode = sets.code  WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor'  ORDER BY sets.name, sets.releaseDate LIMIT 2; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "71",
        "new_question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set release date in your response.In the database, available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'.",
        "source": "bird_question_431",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "error_sql": " SELECT name, releaseDate FROM sets WHERE isForeignOnly = 1 AND isFoilOnly = 1 AND EXISTS (SELECT * FROM foreign_data WHERE language = 'Japanese'); ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "challenging"
    },
    {
        "id": "72",
        "new_question": "State the name of the set with release date of 07/13/2007?",
        "source": "bird_question_441",
        "new_query": "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "error_sql": " SELECT name FROM sets WHERE releaseDate = '2007-07-13'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "73",
        "new_question": "Give the code of sets have expansion type of 'box'?In the database, code of sets refers to setCode.",
        "source": "bird_question_443",
        "new_query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'box' GROUP BY T2.setCode",
        "error_sql": " SELECT code FROM sets WHERE type = 'box'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "74",
        "new_question": "Name the artist for the card that has boros watermark? List out the type of this card.",
        "source": "bird_question_444",
        "new_query": "SELECT DISTINCT T1.artist, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "error_sql": " SELECT artist, type FROM cards WHERE watermark = 'boros'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "75",
        "new_question": "Give the translation of sets have expansion commander type?In the database, translation of sets refers to translation.",
        "source": "bird_question_447",
        "new_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "error_sql": " SELECT translation FROM set_translations WHERE id IN (SELECT id FROM sets WHERE type = 'expansion' OR type = 'commander');   Answer:  Arabian Nights Antiquities Legends The Dark Fallen Empires Arabian Nights Ice Age Alliances Mirage Visions Weatherlight Tempest Stronghold Exodus Urza's Legacy Mirrodin Darksteel Fifth Dawn Champions of Kamigawa Betrayers of Kamigawa Saviors of Kamigawa Apocalypse Odyssey Torment Judgment Onslaught Legions Scourge Mercadian Masques Nemesis Prophecy Invasion Planeshift Morningtide Lorwyn Shadowmoor Eventide",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "76",
        "new_question": "Name the foreign name of the card that has abzan watermark? List out the artist of this card.",
        "source": "bird_question_448",
        "new_query": "SELECT DISTINCT T1.name, T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "error_sql": " SELECT foreign_data.name, cards.artist FROM cards JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.watermark = 'Abzan'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "77",
        "new_question": "For the user whose display name is 'DatEpicCoderGuyWhoPrograms', what is his/her badge's user id?In the database, 'DatEpicCoderGuyWhoPrograms' is the DisplayName.",
        "source": "bird_question_570",
        "new_query": "SELECT T2.UserId FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "error_sql": " SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms'  SQL:  SELECT Id FROM badges WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms') ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"SQL\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "78",
        "new_question": "What is the overall rating of the football player Franco Zennaro?",
        "source": "bird_question_1045",
        "new_query": "SELECT DISTINCT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "error_sql": " SELECT overall_rating FROM Player_Attributes WHERE player_api_id = 1039; ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "79",
        "new_question": "Which of these players performs the best in heading accuracy, Alexis, Ariel Borysiuk or Arouna Kone? List the corresponding values.",
        "source": "bird_question_1085",
        "new_query": "SELECT t1.player_name, t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "error_sql": " SELECT DISTINCT Player_Attributes.player_name, Player_Attributes.heading_accuracy FROM Player_Attributes WHERE Player_Attributes.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY Player_Attributes.heading_accuracy DESC; ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player_Attributes.player_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate"
    },
    {
        "id": "80",
        "new_question": "Which client possesses a gold type card, give his/her client id.",
        "source": "bird_question_103",
        "new_query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold'",
        "error_sql": "  SELECT client_id FROM card WHERE type = 'gold'; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "81",
        "new_question": "For the client who applied 98832 USD loan in 1996/1/3, what was his/her district_id?",
        "source": "bird_question_113",
        "new_query": "SELECT T3.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "error_sql": " SELECT district_id FROM client WHERE client_id = (SELECT client_id FROM account WHERE account_id = (SELECT account_id FROM loan WHERE amount = 98832 AND date = '1996/1/3')); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "82",
        "new_question": "State the district and region for loan ID with status A. In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "new_query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status = 'A'",
        "error_sql": " SELECT A2, A3 FROM district WHERE district_id IN (SELECT district_id FROM loan WHERE loan_id = 1 AND status = 'A'); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "83",
        "new_question": "Provide the account ID, district and region for loan duration greater than 24 months. In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "new_query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration > 24",
        "error_sql": " SELECT account_id, district_id, A2, A3 FROM loan, account, district WHERE loan.account_id = account.account_id AND account.district_id = district.district_id AND duration > 24; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: account_id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "84",
        "new_question": "List the loan ID, district and average salary for loan with payments more than USD2,000. In the database, A2 refers to the names of districts, A11 refers to average salary",
        "source": "bird_question_124",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.payments > 2000",
        "error_sql": " SELECT loan.loan_id, district.A2, district.A11 FROM loan, account, client, district WHERE loan.account_id = account.account_id AND account.client_id = client.client_id AND client.district_id = district.district_id AND loan.payments > 2000; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: account.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "85",
        "new_question": "List the client_id of the account holders in South Bohemia that still do not own credit cards. In the database, A3 contains the region names; South Bohemia is one of region names.",
        "source": "bird_question_130",
        "new_query": "SELECT T3.client_id FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "error_sql": " SELECT client_id FROM client WHERE client_id NOT IN (SELECT client_id FROM card) AND district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia'); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "86",
        "new_question": "When is the latest loan by male borrowers? In the database, Male refers to gender = 'M'",
        "source": "bird_question_132",
        "new_query": "SELECT MAX(T3.date) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'",
        "error_sql": " SELECT date FROM loan, client WHERE loan.account_id = client.client_id AND gender = 'M' ORDER BY date DESC LIMIT 1; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "87",
        "new_question": "Which districts have transactions with average balance greater than -30,300 in 1997?",
        "source": "bird_question_141",
        "new_query": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING AVG(T3.balance) > -30000",
        "error_sql": " SELECT district_id FROM district WHERE A12 > -30300; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "88",
        "new_question": "What is the gender of account owner number 130?",
        "source": "bird_question_174",
        "new_query": "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "error_sql": " SELECT gender FROM client WHERE client_id = (SELECT client_id FROM account WHERE account_id = 130); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "89",
        "new_question": "Please provide a list of female clients and whose account branch is in East Bohemia, along with their IDs.",
        "source": "bird_question_180",
        "new_query": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND T1.gender = 'F'",
        "error_sql": " SELECT client_id FROM client WHERE gender = 'F' AND district_id = 1; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "90",
        "new_question": "Provide the IDs and gender of the client with high level credit card, which is eligible for loans. In the database, when type is gold, the credit card is high-level",
        "source": "bird_question_194",
        "new_query": "SELECT T1.client_id, T3.gender FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "error_sql": " SELECT client.client_id, client.gender FROM client INNER JOIN card ON client.client_id = card.client_id WHERE card.type = 'gold' AND client.client_id IN (SELECT client_id FROM loan WHERE status = 'eligible');  import sqlite3  conn = sqlite3.connect('database.db') c = conn.cursor()  c.execute(\"\"\"SELECT client.client_id, client.gender FROM client INNER JOIN card ON client.client_id = card.client_id WHERE card.type = 'gold' AND client.client_id IN (SELECT client_id FROM loan WHERE status = 'eligible');\"\"\") print(c.fetchall())",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: card.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate"
    },
    {
        "id": "91",
        "new_question": "Lists the artist of all Creature-type cards with legal status. In the database, legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature'.",
        "source": "bird_question_406",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "error_sql": " SELECT DISTINCT cards.artist, legalities.status FROM cards, foreign_data, legalities WHERE cards.id = foreign_data.id AND cards.id = legalities.id AND types = 'Creature';   Lists the artist of all Creature-type cards with legal status. In the database, legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature'.  SQL:  SELECT DISTINCT cards.artist, legalities.status FROM cards, foreign_data, legalities WHERE cards.id = foreign_data.id AND cards.id = legalities.id AND types = 'Creature'; ",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple"
    },
    {
        "id": "92",
        "new_question": "Indicates the number of cards with Banned status, ruling text 'This is a triggered mana ability' that do not have multiple faces. In the database, do not have multiple faces refers to side IS NULL.",
        "source": "bird_question_409",
        "new_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.status = 'Banned' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
        "error_sql": " SELECT COUNT(DISTINCT cards.id) FROM cards  INNER JOIN legalities ON cards.id = legalities.id  INNER JOIN rulings ON cards.id = rulings.id  WHERE legalities.status = 'Banned' AND rulings.text LIKE '%This is a triggered mana ability%' AND cards.side IS NULL;  import sqlite3  conn = sqlite3.connect('db/mtg.db') c = conn.cursor()  query = \"\"\" SELECT COUNT(DISTINCT cards.id) FROM cards  INNER JOIN legalities ON cards.id = legalities.id  INNER JOIN rulings ON cards.id = rulings.id  WHERE legalities.status = 'Banned' AND rulings.text LIKE '%This is a triggered mana ability%' AND cards.side IS NULL; \"\"\"  c.execute(query) print(c.fetchall())",
        "db_id": "card_games",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate"
    },
    {
        "id": "93",
        "new_question": "Among posts by user with Id 15 and 20, which one has higher popularity? In the database, Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'",
        "source": "bird_question_634",
        "new_query": "SELECT T1.Id FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.Id = 15 OR T1.Id = 20 GROUP BY T1.Id ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "error_sql": "  SELECT MAX(SUM(ViewCount)) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder') GROUP BY OwnerUserId;    Among posts by user with Id 15 and 20, which one has higher popularity? In the database, Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'  SQL:   SELECT MAX(SUM(ViewCount)) FROM posts WHERE OwnerUserId IN (SELECT Id FROM users WHERE DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder') GROUP BY OwnerUserId;    Among posts by user with Id 15 and 20, which one has higher popularity? In the database, Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Sny",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: misuse of aggregate function SUM()",
            "error_type": [
                "OperationalError",
                "misuse of aggregate"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "challenging"
    },
    {
        "id": "94",
        "new_question": "How many comments did Neil McGuigan get in his posts after 2010-07-20? In the database, negative comment refers to score < 60; DisplayName = 'Neil McGuigan'",
        "source": "bird_question_636",
        "new_query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.CreationDate > '2010-07-20'",
        "error_sql": " SELECT COUNT(*) FROM comments WHERE PostId IN (SELECT Id FROM posts WHERE OwnerUserId = 10287 AND CreationDate > '2010-07-20') AND Score < 60;  Result: 3 ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple"
    },
    {
        "id": "95",
        "new_question": "State all the tags used by Mark Meckes in his posts that has at least five answers. In the database, DisplayName = 'Mark Meckes'",
        "source": "bird_question_637",
        "new_query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.AnswerCount >= 5",
        "error_sql": " SELECT DISTINCT tags.TagName FROM tags, posts, users WHERE tags.Id = posts.Tags AND posts.OwnerUserId = users.Id AND users.DisplayName = 'Mark Meckes' AND posts.AnswerCount >= 5; ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "96",
        "new_question": "Mention the display name and website url of the user who owned the excerpt post with hypothesis-testing tag. In the database, user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing'",
        "source": "bird_question_654",
        "new_query": "SELECT T3.DisplayName, T3.WebsiteUrl FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "error_sql": " SELECT DISTINCT u.DisplayName, u.WebsiteUrl FROM users u, tags t WHERE u.Id = t.OwnerUserId AND t.TagName = 'hypothesis-testing'; ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: t.OwnerUserId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "97",
        "new_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who own it. In the database, views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets'",
        "source": "bird_question_685",
        "new_query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "error_sql": " SELECT DisplayName, ViewCount FROM posts, users WHERE Title = 'Computer Game Datasets' AND OwnerUserId = Id; ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: Id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "98",
        "new_question": "What is the gender of the dumbest superhero? In the database, the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'.",
        "source": "bird_question_736",
        "new_query": "SELECT T1.gender_id FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "error_sql": " SELECT gender.gender FROM superhero  JOIN gender ON superhero.gender_id = gender.id  JOIN hero_attribute ON superhero.id = hero_attribute.hero_id  JOIN attribute ON hero_attribute.attribute_id = attribute.id  WHERE attribute.attribute_name = 'Intelligence'  ORDER BY hero_attribute.attribute_value ASC LIMIT 1; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "99",
        "new_question": "What are the publisher of the superheroes with the power of death touch? In the database, publisher of the superheroes refers to publisher_id; the power of death touch refers to power_name = 'Death Touch'",
        "source": "bird_question_739",
        "new_query": "SELECT T1.publisher_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "error_sql": " SELECT publisher_name FROM superhero, hero_power, publisher, superpower WHERE superhero.publisher_id = publisher.id AND hero_power.hero_id = superhero.id AND hero_power.power_id = superpower.id AND power_name = 'Death Touch'; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "100",
        "new_question": "For the Bahrain Grand Prix with 3 rounds, how many drivers not finished the game? In the database, drivers who finished the race refers to time has records",
        "source": "bird_question_862",
        "new_query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.round = 3 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "error_sql": "  SELECT COUNT(DISTINCT driverId) FROM lapTimes WHERE raceId IN (SELECT raceId FROM races WHERE year = 2005 AND round = 3) AND driverId NOT IN (SELECT driverId FROM results WHERE raceId IN (SELECT raceId FROM races WHERE year = 2005 AND round = 3));   Answer: 1 ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "101",
        "new_question": "Name all drivers in the 2010 Singapore Grand Prix order by their points.",
        "source": "bird_question_891",
        "new_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.points ASC",
        "error_sql": " SELECT DISTINCT d.surname, d.forename, r.points FROM results AS r JOIN drivers AS d ON r.driverId = d.driverId WHERE r.raceId = 10 ORDER BY r.points DESC; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "102",
        "new_question": "What is the best lap time recorded? List the code of driver and race with such recorded lap time. In the database, the best lap time refers to min(time).",
        "source": "bird_question_894",
        "new_query": "SELECT T2.milliseconds, T1.code, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "error_sql": " SELECT driver.code, race.name FROM lapTimes, results, drivers, races WHERE lapTimes.raceId = results.raceId AND lapTimes.driverId = results.driverId AND lapTimes.raceId = races.raceId AND lapTimes.time = (SELECT MIN(time) FROM lapTimes); ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: driver.code",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "103",
        "new_question": "What is the average lap time for Sebastian Vettel since 2009?",
        "source": "bird_question_895",
        "new_query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Sebastian' AND T3.surname = 'Vettel' AND T1.year >= 2009",
        "error_sql": " SELECT AVG(milliseconds) FROM lapTimes WHERE driverId = 1; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "104",
        "new_question": "State the race and date of race in which Alex Yoong was in track number less than 10. In the database, track number less than 10 refers to position < 10.",
        "source": "bird_question_902",
        "new_query": "SELECT T1.name, T1.date FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10",
        "error_sql": " SELECT races.name, races.date FROM races, results WHERE races.raceId = results.raceId AND results.driverId = 10 AND results.position < 10; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "105",
        "new_question": "Which was Lewis Hamilton first race? What was his position recorded for his first race event? In the database, first race refers to min(Year).",
        "source": "bird_question_906",
        "new_query": "SELECT T1.name, T2.position FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "error_sql": " SELECT races.name, results.position FROM races, results WHERE races.year = (SELECT min(year) FROM seasons) AND races.raceId = results.raceId AND results.driverId = 1; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "106",
        "new_question": "On what year did the youngest driver had his first qualifying race? where can I know more about the race? In the database, youngest driver refers to Max (year(dob)).",
        "source": "bird_question_981",
        "new_query": "SELECT T3.year, T3.url FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": " SELECT MIN(YEAR(dob)) FROM drivers; SELECT * FROM qualifying WHERE driverId = 1; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such function: YEAR",
            "error_type": [
                "OperationalError",
                "no such function"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "107",
        "new_question": "How many drivers born after 1980-01-01 have been disqualified from the race. In the database, disqualified refers to statusID = 2.",
        "source": "bird_question_982",
        "new_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.dob >= '1980-01-01'",
        "error_sql": " SELECT COUNT(DISTINCT d.driverId) FROM drivers AS d, results AS r, status AS s WHERE d.driverId = r.driverId AND r.statusId = s.statusId AND s.status = 'Disqualified' AND d.dob > '1980-01-01';   How many races have been won by a driver who was born in the same year as the race? In other words, if the race took place in 2017, the driver must have been born in 2017.  SQL:  SELECT COUNT(DISTINCT r.raceId) FROM races AS r, results AS re, drivers AS d WHERE r.year = d.dob AND r.raceId = re.raceId AND re.position = 1;   How many races have been won by a driver who was born in the same country as the race? In other words, if the race took place in Italy, the driver must have been born in Italy.  SQL:  SELECT COUNT(DISTINCT r.raceId) FROM races AS r, results AS re",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "108",
        "new_question": "What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)",
        "source": "bird_question_995",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.year = 2008",
        "error_sql": "  SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)  SQL:   SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)  SQL:   SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)  SQL:   SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)  SQL:   SELECT AVG(points) FROM results WHERE driverId = 1;  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "109",
        "new_question": "Please list the name and country of the circuits whose lap record is 1:29.488. In the database, lap records means the fastest time recorded which refers to time.",
        "source": "bird_question_1017",
        "new_query": "SELECT T3.name, T3.country FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "error_sql": " SELECT name, country FROM circuits WHERE circuitId IN (SELECT circuitId FROM lapTimes WHERE time = '1:29.488'); ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "110",
        "new_question": "State the birthday of players who came from Belgium. In the database, Belgium is name of country",
        "source": "bird_question_1126",
        "new_query": "SELECT t3.birthday FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "error_sql": "  SELECT Player.birthday FROM Player, Country WHERE Player.player_fifa_api_id = Country.id AND Country.name = 'Belgium';  Result:  1987-05-23  1986-04-11  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  1987-05-23  198",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "111",
        "new_question": "Which country's players have the lowest average heights?",
        "source": "bird_question_1128",
        "new_query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.height) ASC LIMIT 1",
        "error_sql": " SELECT name FROM Country WHERE id IN (SELECT country_id FROM Player GROUP BY country_id ORDER BY AVG(height) LIMIT 1); ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple"
    },
    {
        "id": "112",
        "new_question": "List the email of the students from the Student_Club who attended the event 'Women's Soccer', how many of them want a T-shirt that's in medium size? In the database, Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
        "source": "bird_question_1317",
        "new_query": "SELECT T3.email FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "error_sql": " SELECT email, t_shirt_size FROM member WHERE member_id IN (SELECT link_to_member FROM attendance WHERE link_to_event = (SELECT event_id FROM event WHERE event_name = 'Women's Soccer')) AND t_shirt_size = 'Medium'; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"s\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "113",
        "new_question": "Please list the segment of the gas stations with transactions taken place in June, 2013. In the database, June 2013 refers to '201306'.",
        "source": "bird_question_1501",
        "new_query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "error_sql": " SELECT DISTINCT Segment FROM gasstations WHERE GasStationID IN (SELECT GasStationID FROM transactions_1k WHERE Date = '201306'); ",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "114",
        "new_question": "What is the consumption by customer '38508' at the gas stations? How much had the customer consumed in January 2012? In the database, January 2012 refers '201201' in the table transactions_1k",
        "source": "bird_question_1529",
        "new_query": "SELECT SUM(T3.Consumption) , SUM(IIF(T3.Date = '201201', T3.Consumption, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '31543' AND T2.GasStationID = '3704'",
        "error_sql": " SELECT GasStationID, SUM(Amount) FROM transactions_1k WHERE CustomerID = '38508' AND Date = '201201' GROUP BY GasStationID; ",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "115",
        "new_question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What is his/her Segment? In the database, average price per single item = price / amount",
        "source": "bird_question_1531",
        "new_query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "error_sql": "  SELECT Segment, AVG(Price/Amount) AS Average_Price_Per_Item, CustomerID  FROM transactions_1k  GROUP BY CustomerID  ORDER BY Average_Price_Per_Item DESC  LIMIT 1; ",
        "db_id": "debit_card_specializing",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Segment",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate"
    },
    {
        "id": "116",
        "new_question": "Please list the zip of the students from the Student_Club that has attended the event 'Women's Soccer'.In the database,Women's Soccer is an event name.",
        "source": "bird_question_1316",
        "new_query": "SELECT T3.zip FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
        "error_sql": " SELECT zip_code.zip FROM member, attendance, event WHERE member.member_id = attendance.link_to_member AND attendance.link_to_event = event.event_id AND event.event_name = 'Women's Soccer'; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"s\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "117",
        "new_question": "How many events with the status 'Open' of the Student_Club did Sacha Harrison attend?",
        "source": "bird_question_1321",
        "new_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND T1.status = 'Open'",
        "error_sql": " SELECT COUNT(*) FROM event, attendance, member WHERE event.status = 'Open' AND event.type = 'Student_Club' AND attendance.link_to_event = event.event_id AND attendance.link_to_member = member.member_id AND member.first_name = 'Sacha' AND member.last_name = 'Harrison'; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "118",
        "new_question": "Was each expense in the event with type 'Meeting' approved? In the database, approved = True means expenses was approved; approved = False means expenses was not approved",
        "source": "bird_question_1338",
        "new_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "error_sql": " SELECT expense_id, approved FROM expense WHERE link_to_event IN (SELECT event_id FROM event WHERE type = 'Meeting'); ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "119",
        "new_question": "Who are the account holders from district with the id 18 and own credit cards and also have loans?",
        "source": "bird_question_146",
        "new_query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.district_id = 18",
        "error_sql": " SELECT DISTINCT client_id FROM client WHERE district_id = 18 AND client_id IN (SELECT client_id FROM card WHERE type = 'credit') AND client_id IN (SELECT client_id FROM loan); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "120",
        "new_question": "What is the total amount withdrawals in cash transactions that the client with the id 3356 makes.In the database, operation = 'VYBER' refers to withdrawal in cash.",
        "source": "bird_question_159",
        "new_query": "SELECT SUM(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "error_sql": " SELECT SUM(amount) FROM trans WHERE client_id = 3356 AND operation = 'VYBER'; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "121",
        "new_question": "What was the growth rate of the total amount of loans across all accounts for a client from district with the id 73?",
        "source": "bird_question_169",
        "new_query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.district_id = 73 AND T3.type = 'OWNER'",
        "error_sql": " SELECT (SUM(amount) - SUM(amount) / 100 * 73) / SUM(amount) FROM loan WHERE account_id IN (SELECT account_id FROM client WHERE district_id = 73); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "challenging"
    },
    {
        "id": "122",
        "new_question": "What is the average score of posts posted by Matt Parker and have more than 4 votes? In the database, more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker'.",
        "source": "bird_question_635",
        "new_query": "SELECT AVG(T3.Score) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "error_sql": " SELECT AVG(Score) FROM posts WHERE PostId > 4 AND OwnerDisplayName = 'Matt Parker'; ",
        "db_id": "codebase_community",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: PostId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate"
    },
    {
        "id": "123",
        "new_question": "Which publisher published the most intelligent superhero? In the database, the most intelligent superhero refers to attribute_name = 'Intelligence' where MAX(attribute_value).",
        "source": "bird_question_732",
        "new_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Intelligence' ORDER BY T3.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT publisher_name FROM publisher NATURAL JOIN superhero NATURAL JOIN hero_attribute NATURAL JOIN attribute WHERE attribute_name = 'Intelligence' AND attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute NATURAL JOIN attribute WHERE attribute_name = 'Intelligence'); ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "124",
        "new_question": "How many male superheroes have a intelligence value bigger than 95? In the database, male refers to gender = 'Male';intelligence value bigger than 100 refers to attribute_name = 'Intelligence' AND attribute_value > 95.",
        "source": "bird_question_740",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value >  AND T4.gender = 'Male'",
        "error_sql": " SELECT COUNT(*) FROM superhero, hero_attribute, attribute WHERE superhero.gender_id = 1 AND hero_attribute.hero_id = superhero.id AND hero_attribute.attribute_id = attribute.id AND attribute.attribute_name = 'Intelligence' AND hero_attribute.attribute_value > 95; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "125",
        "new_question": "How many superpowers does female superheroes have? In the database, female refers to gender = 'Female'.",
        "source": "bird_question_751",
        "new_query": "SELECT COUNT(T3.power_name) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Female'",
        "error_sql": " SELECT COUNT(DISTINCT power_name) FROM superhero, hero_power, superpower WHERE superhero.id = hero_power.hero_id AND hero_power.power_id = superpower.id AND gender = 'Female'; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: gender",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "126",
        "new_question": "Which superhero has the lowest combat published by Dark Horse Comics? In the database, lowest combat refers to MIN(attribute_value) WHERE attribute_name = 'Combat'.",
        "source": "bird_question_769",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Combat' ORDER BY T2.attribute_value ASC LIMIT 1",
        "error_sql": " SELECT superhero_name FROM superhero WHERE publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') AND id = (SELECT hero_id FROM hero_attribute WHERE attribute_value = (SELECT MIN(attribute_value) FROM hero_attribute WHERE attribute_id = (SELECT id FROM attribute WHERE attribute_name = 'Combat'))); ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging"
    },
    {
        "id": "127",
        "new_question": "List the distinct race of the brown-haired male superhero. In the database, brown-haired refers to colour.colour = 'brown' WHERE hair_colour_id = colour.id; male refers to gender = 'male'.",
        "source": "bird_question_817",
        "new_query": "SELECT DISTINCT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Brown' AND T4.gender = 'Male'",
        "error_sql": " SELECT DISTINCT race.race FROM superhero, colour, gender, race WHERE superhero.hair_colour_id = colour.id AND colour.colour = 'brown' AND superhero.gender_id = gender.id AND gender.gender = 'male' AND superhero.race_id = race.id; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "128",
        "new_question": "List thr superhero name of female superheroes who has the ability of Phoenix Force. In the database,ability of Phoenix Force refers to power_name = 'Phoenix Force'.",
        "source": "bird_question_825",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force' AND T4.gender = 'Female'",
        "error_sql": " SELECT superhero_name FROM superhero, hero_power, power WHERE superhero.id = hero_power.hero_id AND hero_power.power_id = power.id AND gender_id = 2 AND power_name = 'Phoenix Force'; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such table: power",
            "error_type": [
                "OperationalError",
                "no such table"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "129",
        "new_question": "How many times did Michael Schumacher won from races hosted in the location of Shanghai?In the database, win from races refers to wins=1.",
        "source": "bird_question_903",
        "new_query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.location = 'Shanghai'",
        "error_sql": " SELECT COUNT(*) FROM results WHERE position=1 AND driverId=1001; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "130",
        "new_question": "What is nationality of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?In the database, Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race.",
        "source": "bird_question_1001",
        "new_query": "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "error_sql": " SELECT nationality FROM qualifying, drivers WHERE qualifying.driverId = drivers.driverId AND qualifying.q3 = (SELECT MIN(q3) FROM qualifying WHERE raceId = (SELECT raceId FROM races WHERE name = 'Marina Bay Street Circuit' AND year = 2008)) ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "131",
        "new_question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, When did he get into the pit stop at that same race?In the database, lap record means the fastest time recorded which refers to time.",
        "source": "bird_question_1016",
        "new_query": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.time FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
        "error_sql": "  SELECT time FROM pitStops WHERE raceId = (SELECT raceId FROM lapTimes WHERE time = (SELECT MIN(time) FROM lapTimes))  SELECT time FROM pitStops WHERE raceId = (SELECT raceId FROM lapTimes WHERE time = (SELECT MIN(time) FROM lapTimes))",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"SELECT\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "132",
        "new_question": "Locate players with crossing scores of 70 and above, state the country of these players.In the database, crossing scores of 70 and above refers to crossing > 69.",
        "source": "bird_question_1127",
        "new_query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.crossing > 69",
        "error_sql": " SELECT DISTINCT Country.name FROM Player_Attributes, Player, Country WHERE Player_Attributes.player_api_id = Player.player_api_id AND Player.country_id = Country.id AND crossing > 69; ",
        "db_id": "european_football_2",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate"
    },
    {
        "id": "133",
        "new_question": "Which student has been entrusted to manage the budget for the event with status 'Open'?",
        "source": "bird_question_1387",
        "new_query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.status = 'Open'",
        "error_sql": " SELECT first_name, last_name FROM member WHERE member_id = (SELECT link_to_member FROM budget WHERE event_status = 'Open'); ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: link_to_member",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "134",
        "new_question": "List the members who incurred expenses in more than one event with the type 'Meeting', ordered by the amount from low to high.",
        "source": "bird_question_1451",
        "new_query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.type = 'Meeting' GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY T1.cost",
        "error_sql": " SELECT member.first_name, member.last_name, SUM(expense.cost) AS total_cost FROM expense JOIN member ON expense.link_to_member = member.member_id JOIN event ON expense.link_to_budget = budget.budget_id JOIN budget ON expense.link_to_budget = budget.budget_id WHERE event.type = 'Meeting' GROUP BY member.member_id HAVING COUNT(DISTINCT expense.link_to_budget) > 1 ORDER BY total_cost ASC; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "135",
        "new_question": "Write the phone of students who received funds on the date of 9/9/2019 and include the amount received.In the database, amount of funds received refers to amount, received funds on date refers to date_received.",
        "source": "bird_question_1464",
        "new_query": "SELECT DISTINCT T3.phone, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "error_sql": " SELECT phone, amount FROM income WHERE date_received = '9/9/2019'; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: phone",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "136",
        "new_question": "Among the female superheroes from Marvel Comics, how many of them have blue eyes? In the database, the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; female refers to gender = 'Female'",
        "source": "bird_question_728",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue' AND T4.gender = 'Female'",
        "error_sql": " SELECT COUNT(DISTINCT superhero.id) FROM superhero, gender, colour, publisher WHERE superhero.gender_id = gender.id AND gender.gender = 'Female' AND superhero.eye_colour_id = colour.id AND colour.colour = 'Blue' AND superhero.publisher_id = publisher.id AND publisher.publisher_name = 'Marvel Comics';  Result: 10 ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "137",
        "new_question": "Provide the hair colour of the human superhero who is 185 cm tall and published by Universal Studios.",
        "source": "bird_question_758",
        "new_query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T1.height_cm = 185 AND T2.race = 'Human' AND T4.publisher_name = 'Universal Studios'",
        "error_sql": " SELECT hair_colour.colour FROM superhero, hair_colour WHERE superhero.hair_colour_id = hair_colour.id AND superhero.height_cm = 185 AND superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Universal Studios'); ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such table: hair_colour",
            "error_type": [
                "OperationalError",
                "no such table"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "138",
        "new_question": "What is the hero's full name and publisher with the highest attribute in strength? In the database, strength attribute refers to attribute_name = 'Strength'.",
        "source": "bird_question_766",
        "new_query": "SELECT T1.full_name, T4.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT superhero.full_name, publisher.publisher_name FROM superhero JOIN publisher ON superhero.publisher_id = publisher.id JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE hero_attribute.attribute_value = (SELECT MAX(hero_attribute.attribute_value) FROM hero_attribute WHERE attribute_id = 1); ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "139",
        "new_question": "List the name and race of superheroes with flight power.",
        "source": "bird_question_771",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.power_name = 'Flight'",
        "error_sql": " SELECT superhero.superhero_name, race.race FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id JOIN race ON superhero.race_id = race.id WHERE power_name = 'flight'; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "140",
        "new_question": "Provide superheroes' names and hair colours who have the adaptation power. In the database, hair colour refers to colour where hair_colour_id = colour.id, adaptation power refers to power_name = 'Adaptation'.",
        "source": "bird_question_778",
        "new_query": "SELECT T1.superhero_name, T4.colour FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T3.power_name = 'Adaptation'",
        "error_sql": " SELECT superhero_name, colour.colour FROM superhero, colour, hero_power, superpower, attribute WHERE superhero.hair_colour_id = colour.id AND hero_power.hero_id = superhero.id AND hero_power.power_id = superpower.id AND superpower.power_name = 'adaptation' AND attribute.attribute_name = 'hair colour' AND attribute.id = hero_attribute.attribute_id AND hero_attribute.hero_id = superhero.id; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: hero_attribute.attribute_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "141",
        "new_question": "Among the superheroes with the race of god/eternal, how many of them are male and are published by ABC Studios?",
        "source": "bird_question_793",
        "new_query": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T1.race_id = 21 AND T1.gender_id = 1 AND T4.publisher_name = 'ABC Studios'",
        "error_sql": " SELECT COUNT(*) FROM superhero WHERE race_id = 1 AND gender_id = 1 AND publisher_id = 2; ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "142",
        "new_question": "Which hero was the fastest? What is his/her race?",
        "source": "bird_question_794",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT superhero.superhero_name, race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id IN (SELECT hero_id FROM hero_attribute WHERE attribute_id = 1 ORDER BY attribute_value DESC LIMIT 1); ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate"
    },
    {
        "id": "143",
        "new_question": "What is the race and the gender of the superhero with maximum attribute value?In the database,maximum attribute value refers to MAX(attribute_value).",
        "source": "bird_question_810",
        "new_query": "SELECT T3.race, T4.gender FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": " SELECT race.race, gender.gender FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN race ON superhero.race_id = race.id WHERE superhero.id IN (SELECT hero_attribute.hero_id FROM hero_attribute WHERE attribute_value = (SELECT MAX(attribute_value) FROM hero_attribute)); ",
        "db_id": "superhero",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple"
    },
    {
        "id": "144",
        "new_question": "Among the bad superheroes, what is the percentage of female superheroes with black eyes? In the database, black eyes refers to colour = 'Black' and eye_colour_id = colour.id.",
        "source": "bird_question_818",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T2.alignment = 'Bad' AND T4.colour = 'Black'",
        "error_sql": "  SELECT (SELECT COUNT(DISTINCT superhero.id) FROM superhero WHERE alignment_id = 2) / (SELECT COUNT(DISTINCT superhero.id) FROM superhero) * 100;    Among the good superheroes, what is the percentage of male superheroes with blue eyes? In the database, blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id.  SQL:   SELECT (SELECT COUNT(DISTINCT superhero.id) FROM superhero WHERE alignment_id = 1 AND gender_id = 1) / (SELECT COUNT(DISTINCT superhero.id) FROM superhero WHERE alignment_id = 1) * 100;    What is the average height of all superheroes?  SQL:   SELECT AVG(height_cm) FROM superhero;    What is the average weight of all superheroes?  SQL:   SELECT AVG(weight",
        "db_id": "superhero",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging"
    },
    {
        "id": "145",
        "new_question": "List the name of drivers who finished first in the Yas Marina Circuit in 2010.In the database,finished first refers to position = 1.",
        "source": "bird_question_874",
        "new_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId WHERE T1.year = 2010 AND T4.name = 'Yas Marina Circuit' AND T2.position = 1",
        "error_sql": " SELECT forename || ' ' || surname AS name FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE position = 1 AND circuitRef = 'yasmarina';   List the name of drivers who finished first in the Yas Marina Circuit in 2010.In the database,finished first refers to position = 1.  SQL:  SELECT forename || ' ' || surname AS name FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE position = 1 AND circuitRef = 'yasmarina';   List the name of drivers who finished first in the Yas Marina Circuit in 2010.In the database,finished first refers to position = 1.  SQL:  SELECT forename || ' ' || surname AS name FROM drivers JOIN results ON drivers.driverId = results.driverId WHERE position = 1 AND circuitRef = 'yasmarina';   List the name of drivers who finished first in the Yas Marina Circuit in 2010.In the database,finished first refers to position = ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: circuitRef",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple"
    },
    {
        "id": "146",
        "new_question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50 and the status were finished?",
        "source": "bird_question_962",
        "new_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50 AND T4.status = 'Finished', 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.year BETWEEN 2000 AND 2005",
        "error_sql": " SELECT (COUNT(DISTINCT(driverId))/COUNT(DISTINCT(driverId)))*100 FROM driverStandings WHERE raceId IN (SELECT raceId FROM races WHERE year BETWEEN 2000 AND 2005) AND driverId IN (SELECT driverId FROM drivers WHERE dob < '1985-01-01') AND positionText = 'Finished' AND lap > 50; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: lap",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "147",
        "new_question": "On what year did the youngest driver had his first qualifying race? State the result in terms of points about him in the race.In the database,youngest driver refers to Max (year(dob));",
        "source": "bird_question_981",
        "new_query": "SELECT T3.year, T4.points FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId INNER JOIN results as T4 on T2.driverId = T4.driverId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": " SELECT MIN(YEAR(dob)) FROM drivers; SELECT * FROM qualifying WHERE driverId = 10; SELECT * FROM results WHERE raceId = 1 AND driverId = 10; SELECT * FROM status WHERE statusId = 2;   On what year did the oldest driver had his first qualifying race? State the result in terms of points about him in the race.In the database,oldest driver refers to Michael (year(dob));  SQL:  SELECT MAX(YEAR(dob)) FROM drivers; SELECT * FROM qualifying WHERE driverId = 3; SELECT * FROM results WHERE raceId = 1 AND driverId = 3; SELECT * FROM status WHERE statusId = 2;   What is the name of the circuit where the race with the most number of laps was held?  SQL:  SELECT MAX(laps) FROM results; SELECT * FROM races WHERE raceId = 1; SELECT * FROM circuits WHERE circuitId = 1;   What is the name of the constructor that has won the most number of races?  SQL:  ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such function: YEAR",
            "error_type": [
                "OperationalError",
                "no such function"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "148",
        "new_question": "List the website of the constructor of the drivers whose status is collision in the 2009 Singapore Grand Prix.",
        "source": "bird_question_990",
        "new_query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T4.status = 'Collision'",
        "error_sql": "  SELECT DISTINCT c.url  FROM constructors c, drivers d, results r  WHERE c.constructorId = d.constructorId AND d.driverId = r.driverId AND r.statusId IN (SELECT statusId FROM status WHERE status = 'Collision') AND r.raceId IN (SELECT raceId FROM races WHERE name = 'Singapore Grand Prix' AND year = 2009);  import sqlite3  conn = sqlite3.connect('database.db') c = conn.cursor()  query = '''SELECT DISTINCT c.url FROM constructors c, drivers d, results r WHERE c.constructorId = d.constructorId AND d.driverId = r.driverId AND r.statusId IN (SELECT statusId FROM status WHERE status = 'Collision') AND r.raceId IN (SELECT raceId FROM races WHERE name = 'Singapore Grand Prix' AND year = 2009);'''  c.execute(query) print(c.fetchall())",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: d.constructorId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "149",
        "new_question": "Which constructor scored most points from Baku City Circuit between 2010 and 2020? List the score, name and nationality of this Team.",
        "source": "bird_question_994",
        "new_query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.name = 'Baku City Circuit' AND T3.year BETWEEN 2010 AND 2020 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "error_sql": " SELECT constructorResults.points, constructors.name, constructors.nationality FROM constructorResults JOIN races ON constructorResults.raceId = races.raceId JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE races.circuitId = 10 AND races.year BETWEEN 2010 AND 2020 ORDER BY constructorResults.points DESC LIMIT 1; ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging"
    },
    {
        "id": "150",
        "new_question": "What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).",
        "source": "bird_question_995",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T4.location = 'Monte-Carlo'",
        "error_sql": " SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).  SQL:  SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).  SQL:  SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).  SQL:  SELECT AVG(points) FROM results WHERE driverId = 1;   What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).  SQL:  SELECT AVG(points) FROM results WHERE driver",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.Warning: You can only execute one statement at a time.",
            "error_type": [
                "Warning",
                "You can only execute one statement at a time."
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "151",
        "new_question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and her constructor's name and the id of the race to which he/she first joined.In the database,full name refers to forename+surname; youngest racer = MAX(dob).",
        "source": "bird_question_1002",
        "new_query": "SELECT T1.forename, T1.surname, T1.nationality, T3.raceId, T5.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId INNER JOIN constructorResults AS T4 on T3.raceId = T4.raceId INNER JOIN constructors AS T5 on T4.constructorId = T5.constructorId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "error_sql": " SELECT forename || ' ' || surname AS full_name, nationality, constructor.name, raceId FROM drivers JOIN constructor ON drivers.constructorId = constructor.constructorId WHERE dob = (SELECT MAX(dob) FROM drivers); ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such table: constructor",
            "error_type": [
                "OperationalError",
                "no such table"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "152",
        "new_question": "How many accidents did the driver who had the highest number accidents in the circuit Fuji Speedway have?",
        "source": "bird_question_1003",
        "new_query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T3.statusId = 3 AND T4.name = 'Fuji Speedway' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "error_sql": " SELECT COUNT(DISTINCT raceId) FROM pitStops WHERE driverId = (SELECT driverId FROM pitStops GROUP BY driverId ORDER BY COUNT(DISTINCT raceId) DESC LIMIT 1); ",
        "db_id": "formula_1",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate"
    },
    {
        "id": "153",
        "new_question": "Please provide name of events for members who have paid more than 50 dollar.In the database,have paid more than 50 dollar refers to cost > 50.",
        "source": "bird_question_1436",
        "new_query": "SELECT DISTINCT T4.event_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event as T4 ON T3.link_to_event = T4.event_id WHERE T1.cost > 50",
        "error_sql": " SELECT event_name FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE amount > 50); ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple"
    },
    {
        "id": "154",
        "new_question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event, provide the major name of him. In the database,approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'.",
        "source": "bird_question_1437",
        "new_query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event, T4.major_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN major as T4 on T2.link_to_major = T4.major_id WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "error_sql": " SELECT member.member_id, member.first_name, member.last_name, expense.link_to_event, major.major_name FROM member, expense, major WHERE expense.approved = 'true' AND expense.expense_date BETWEEN '2019-01-10' and '2019-11-19' AND expense.link_to_member = member.member_id AND member.link_to_major = major.major_id; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: expense.link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging"
    },
    {
        "id": "155",
        "new_question": "What is the name and major of members who had to spend more than a hundred dollars on an expense? which county does his/her from?",
        "source": "bird_question_1449",
        "new_query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name, T4.county FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN zip_code AS T4 on T1.zip = T4.zip_code WHERE T3.cost > 100",
        "error_sql": " SELECT first_name || ' ' || last_name AS name, major_name AS major, county FROM member JOIN expense ON member.member_id = expense.link_to_member JOIN zip_code ON member.zip = zip_code.zip_code WHERE cost > 100; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: major_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "156",
        "new_question": "For events with less than average parking cost, list the events name and the link to their member.In the database,less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'.",
        "source": "bird_question_1453",
        "new_query": "SELECT T1.event_name, T4.link_to_member FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN attendance as T4 on T1.event_id = T4.link_to_event WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "error_sql": " SELECT event_name, link_to_member FROM event WHERE event_id IN (SELECT link_to_event FROM budget WHERE category = 'Parking' AND cost < DIVIDE(SUM(cost), COUNT(event_id))); ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: link_to_member",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "157",
        "new_question": "List the full name and the major name of the top five members who spend the most money in the descending order of spending.",
        "source": "bird_question_1456",
        "new_query": "SELECT T3.first_name, T3.last_name, T4.major_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id INNER JOIN major as T4 on T3.link_to_major = T4.major_id ORDER BY T2.spent DESC LIMIT 5",
        "error_sql": " SELECT first_name || ' ' || last_name AS full_name, major_name FROM member INNER JOIN major ON link_to_major = major_id ORDER BY (SELECT SUM(cost) FROM expense WHERE link_to_member = member_id) DESC LIMIT 5; ",
        "db_id": "student_club",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate"
    },
    {
        "id": "158",
        "new_question": "How many female accounts in the south Bohemia region are eligible for loans?In the database, A3 contains the data of region.",
        "source": "bird_question_90",
        "new_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'south Bohemia' AND T3.district_id = ( SELECT district_id FROM client WHERE gender = 'F')",
        "error_sql": " SELECT COUNT(DISTINCT account_id) FROM client, account WHERE client.gender = 'F' AND client.district_id = account.district_id AND client.district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia'); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "159",
        "new_question": "When is the birthday of a client who applied 98832 USD loan in East Bohemia in 1996/1/3?",
        "source": "bird_question_113",
        "new_query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832 AND T3.district_id = (SELECT district_id FROM district WHERE A3 = 'east Bohemia' )",
        "error_sql": " SELECT birth_date FROM client WHERE client_id IN (SELECT client_id FROM account WHERE district_id = 1 AND date = '1996-01-03') AND client_id IN (SELECT client_id FROM loan WHERE amount = 98832 AND date LIKE '1996%'); ",
        "db_id": "financial",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "160",
        "new_question": "State the district and type of loan ID '4990'.In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "new_query": "SELECT T2.A2, T2.A3, T4.'type'  FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.account_id = T4.account_id INNER JOIN loan AS T3 ON T4.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "error_sql": " SELECT district.A2, loan.type FROM loan, district WHERE loan.account_id = district.district_id AND loan.loan_id = 4990; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: loan.type",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "161",
        "new_question": "Provide the account ID, user gender，district and region for loan amount greater than USD300,000.In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "new_query": "SELECT T1.account_id, T2.A2, T2.A3, T4.gender FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T4 ON T4.district_id = T1.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "error_sql": " SELECT account.account_id, client.gender, district.A2, district.A3 FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN client ON account.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.amount > 300000; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: account.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    },
    {
        "id": "162",
        "new_question": "List the loan ID, bank, district and average salary loan with duration of 60 months.In the database, A3 refers to regions; A11 refers to average salary.",
        "source": "bird_question_124",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11, T4.bank_to FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN 'order' AS T4 ON T4.account_id = T1.account_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "error_sql": " SELECT loan.loan_id, district.A3, district.A11, loan.amount FROM loan, account, client, district WHERE loan.account_id = account.account_id AND account.client_id = client.client_id AND client.district_id = district.district_id AND loan.duration = 60; ",
        "db_id": "financial",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: account.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        },
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple"
    }
]
