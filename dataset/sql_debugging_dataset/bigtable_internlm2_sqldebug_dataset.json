[
    {
        "id": "1",
        "new_question": "What is the eligible free rate for K-12 students in Maya Lin School? In the database, eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_0",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `School Name` = 'Maya Lin'",
        "error_sql": " SELECT FreeMealCountK12 / EnrollmentK12 AS EligibleFreeRateK12 FROM frpm WHERE SchoolName = 'Maya Lin School'; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: FreeMealCountK12",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "2",
        "new_question": "Please list the lowest three eligible free rates for K-12 students in continuation schools.In the database, Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_1",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (K-12)` / `Enrollment (K-12)` IS NOT NULL ORDER BY `Free Meal Count (K-12)` / `Enrollment (K-12)` ASC LIMIT 3",
        "error_sql": " SELECT SchoolName, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12) FROM frpm WHERE SchoolType = 'Continuation' ORDER BY Percent (%) Eligible Free (K-12) ASC LIMIT 3; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Count\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "3",
        "new_question": "How many schools in Kings offer over 400 free meals but less than 800 free meals to students aged 5-17?",
        "source": "bird_question_21",
        "new_query": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Kings' AND `Free Meal Count (Ages 5-17)` > 400 AND `Free Meal Count (Ages 5-17)` < 800",
        "error_sql": " SELECT COUNT(*) AS num_schools FROM frpm WHERE County = 'Kings' AND        Enrollment (Ages 5-17) > 400 AND        Enrollment (Ages 5-17) < 800 AND        Percent (%) Eligible Free (Ages 5-17) > 0; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"5\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "4",
        "new_question": "Which school in Alameda has the highest average math score? In the database, AvgScrMath means average math score.",
        "source": "bird_question_22",
        "new_query": "SELECT sname FROM satscores WHERE cname = 'Alameda' AND sname IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1",
        "error_sql": " SELECT School, AvgScrMath FROM satscores WHERE dname = 'Alameda' ORDER BY AvgScrMath DESC LIMIT 1; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: School",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "5",
        "new_question": "Which different county has the highest number of merged schools? Please provide the name of the city where each school is located.In the database, 'Merged' was mentioned in schools.StatusType.",
        "source": "bird_question_49",
        "new_query": "SELECT DISTINCT County, School, City FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Merged' AND school IS NOT NULL",
        "error_sql": " SELECT County, COUNT(DISTINCT School) AS MergedSchoolsCount FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY MergedSchoolsCount DESC LIMIT 1; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "7",
        "new_question": "What is the ratio of the number of closed schools to the number of merged schools in California that have mailing state addresses? In the database, Ratio = count(closed schools) / count(merged schools)",
        "source": "bird_question_55",
        "new_query": "SELECT CAST(SUM(CASE WHEN StatusType = 'Closed' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN StatusType = 'Merged' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "error_sql": " SELECT COUNT(CASE WHEN ClosedDate IS NOT NULL THEN 1 END) / COUNT(CASE WHEN StatusType = 'Merged' THEN 1 END) AS Ratio FROM schools WHERE State IS NOT NULL; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        }
    },
    {
        "id": "9",
        "new_question": "What is the city and website of the school with a postal code of 95203-3704? Please indicate the name of the school.",
        "source": "bird_question_58",
        "new_query": "SELECT City, Website, School FROM schools WHERE Zip = '95203-3704'",
        "error_sql": " SELECT School, Website  FROM schools  WHERE Zip = '95203-3704'; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        }
    },
    {
        "id": "10",
        "new_question": "Which city are the schools managed by Mike Larson and Dante Alvarez located in respectively?",
        "source": "bird_question_59",
        "new_query": "SELECT City FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "error_sql": " SELECT DISTINCT City  FROM schools  WHERE AdmFName1 IN ('Mike Larson', 'Dante Alvarez') OR AdmFName2 IN ('Mike Larson', 'Dante Alvarez') OR AdmFName3 IN ('Mike Larson', 'Dante Alvarez'); ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        }
    },
    {
        "id": "11",
        "new_question": "In chartered schools with charter number 0665, what are the names of all the administrators? Including the county where the school is located and the type of school status.In the database, Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name.",
        "source": "bird_question_63",
        "new_query": "SELECT AdmFName1, AdmLName1, County, StatusType FROM schools WHERE Charter = 1 AND CharterNum = '0665'",
        "error_sql": " ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"0\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "12",
        "new_question": "What is the total amount of High School District closure in 1989 in the county of Fresno?",
        "source": "bird_question_67",
        "new_query": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND County = 'Fresno' AND DOCType = 'High School District'",
        "error_sql": " ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "13",
        "new_question": "How many active and merged District Community Day Schools are there in the city of Clovis?",
        "source": "bird_question_70",
        "new_query": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Merged' OR StatusType = 'Active') AND City = 'Clovis'",
        "error_sql": " SELECT COUNT(*) AS total_districts FROM schools WHERE District IN (     SELECT DISTINCT District     FROM frpm     WHERE School Type = 'District Community Day' ) AND City = 'Clovis'; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Type\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "15",
        "new_question": "List the accounts and the transaction amount with the earliest transaction date in 1995?",
        "source": "bird_question_101",
        "new_query": "SELECT account_id, amount FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "error_sql": "   SELECT account_id, MIN(date) AS earliest_transaction_date, SUM(amount) AS transaction_amount FROM trans WHERE date BETWEEN '1995-01-01' AND '1995-12-31' GROUP BY account_id; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        }
    },
    {
        "id": "16",
        "new_question": "How many owner and disponent dispositions are there from client number 20 to client number 30?",
        "source": "bird_question_172",
        "new_query": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE client_id BETWEEN 20 AND 30",
        "error_sql": "   SELECT COUNT(*) AS 'owner and disponent dispositions' FROM disp WHERE client_id BETWEEN 20 AND 30; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        }
    },
    {
        "id": "17",
        "new_question": "How many  triple-bond molecules are there? In the database, triple type bonds refers to bond_type = '#'.",
        "source": "bird_question_202",
        "new_query": "SELECT COUNT(T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "error_sql": "   SELECT COUNT(DISTINCT molecule_id) AS triple_bond_molecules FROM bond WHERE bond_type = '#' GROUP BY molecule_id; ",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "18",
        "new_question": "In how many molecules is there no bromine? In the database, atoms with no bromine refers to element ! = 'br'.",
        "source": "bird_question_203",
        "new_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM atom AS T WHERE T.element <> 'br'",
        "error_sql": "   SELECT COUNT(DISTINCT molecule_id) AS no_bromine_molecules FROM atom WHERE molecule_id NOT IN (     SELECT molecule_id     FROM atom     WHERE element = 'br' ); ",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "19",
        "new_question": "What molecules contain silicon? In the database, silicon refers to element = 'si'.",
        "source": "bird_question_205",
        "new_query": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'si'",
        "error_sql": "   SELECT molecule_id, label FROM atom JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE element = 'si'; ",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: molecule_id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "22",
        "new_question": "What is the ID of bond that molecule TR000 has when involved in any bonds?In the database, ID of bond refers to bond_id; TR000 is the molecule id.",
        "source": "bird_question_229",
        "new_query": "SELECT DISTINCT T.bond_id FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "error_sql": "   SELECT bond_id FROM atom JOIN connected ON atom.atom_id = connected.atom_id JOIN bond ON connected.bond_id = bond.bond_id WHERE molecule_id = 'TR000'; ",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: bond_id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "26",
        "new_question": "Determine the percentage of single bonds formed in all compounds containing the molecule TR013. In the database, TR013 is the molecule id; single bond refers to bond_type = ' - '; percentage = DIVIDE(SUM(bond_type = ' - '), COUNT(all bond_id)) as percent where molecule_id = 'TR013'.",
        "source": "bird_question_287",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR013'",
        "error_sql": "   SELECT DIVIDE(SUM(bond_type = ' - '), COUNT(all bond_id)) as percent FROM atom, bond, molecule WHERE atom.molecule_id = bond.molecule_id AND bond.molecule_id = molecule.molecule_id AND molecule.label = 'TR013'; ",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such function: DIVIDE",
            "error_type": [
                "OperationalError",
                "no such function"
            ]
        }
    },
    {
        "id": "27",
        "new_question": "How many the black cards available without powerful foils? In the database, 'black' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null.",
        "source": "bird_question_341",
        "new_query": "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "error_sql": " SELECT COUNT(*) AS black_cards_available FROM cards WHERE borderColor = 'black' AND (cardKingdomFoilId IS NULL OR cardKingdomId IS NULL) ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        }
    },
    {
        "id": "28",
        "new_question": "List the names and availability of cards that consume more face conversion magic points. In the database, more converted mana for the face refers to Max(faceConvertedManaCost).",
        "source": "bird_question_342",
        "new_query": "SELECT name,availability FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "error_sql": " SELECT name, availability FROM cards WHERE faceConvertedManaCost > convertedManaCost ORDER BY faceConvertedManaCost DESC; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        }
    },
    {
        "id": "29",
        "new_question": "List the types and availability of cards painted by artist Aaron Boyd for card art? In the database, 'Aaron Boyd' is artist.",
        "source": "bird_question_354",
        "new_query": "SELECT type,availability FROM cards WHERE artist = 'Aaron Boyd'",
        "error_sql": " SELECT types, availability  FROM cards  WHERE artist = 'Aaron Boyd'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "32",
        "new_question": "How many set codes are there for all cards translated into Spanish? In the database, Spanish refer to language; set code refers to setCode.",
        "source": "bird_question_400",
        "new_query": "SELECT COUNT(setCode) FROM set_translations WHERE language = 'Spanish'",
        "error_sql": " SELECT COUNT(DISTINCT setCode) FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode WHERE language = 'Spanish'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: setCode",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "33",
        "new_question": "What is the name of the card with the multiverse number 150317? In the database, multiverse number 150317 refers to multiverseid = 150317.",
        "source": "bird_question_422",
        "new_query": "SELECT name FROM foreign_data WHERE multiverseid = 150317",
        "error_sql": " SELECT name  FROM cards  WHERE multiverseId = 150317; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "34",
        "new_question": "What are the names of card games in French? In the database, French refer to language.",
        "source": "bird_question_440",
        "new_query": "SELECT DISTINCT name FROM foreign_data WHERE language = 'French'",
        "error_sql": " SELECT DISTINCT name  FROM foreign_data  WHERE language = 'French' AND type = 'Card Name'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Correct",
                "Condition Filter Error"
            ]
        }
    },
    {
        "id": "36",
        "new_question": "What are the tags on the post titled 'What is normality?'?In the database, 'What is normality?' is the Title of post; tags refers to Tags",
        "source": "bird_question_572",
        "new_query": "SELECT Tags FROM posts WHERE Title = 'What is normality?'",
        "error_sql": " SELECT t.TagName  FROM posts p JOIN postLinks pl ON p.Id = pl.PostId JOIN tags t ON pl.RelatedPostId = t.Id WHERE p.Title = 'What is normality?' ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "39",
        "new_question": "What are the comments posted by user ID 37?",
        "source": "bird_question_588",
        "new_query": "SELECT Text FROM comments WHERE UserId = 37",
        "error_sql": " SELECT * FROM comments WHERE UserId = 37; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        }
    },
    {
        "id": "41",
        "new_question": "What is the age of the user with ID 13?",
        "source": "bird_question_624",
        "new_query": "SELECT Age FROM users WHERE Id = 13",
        "error_sql": " SELECT (strftime('%Y', '2024-01-09 Tuesday PM06:59') - strftime('%Y', CreationDate)) AS Age FROM users WHERE Id = 13; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "44",
        "new_question": "Who is the heaviest superhero? In the database, who refers to superhero_name; heaviest superhero refers to MAX(weight_kg);",
        "source": "bird_question_802",
        "new_query": "SELECT superhero_name FROM superhero ORDER BY weight_kg DESC LIMIT 1",
        "error_sql": "   SELECT superhero_name, MAX(weight_kg) AS heaviest_weight FROM superhero GROUP BY superhero_name; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        }
    },
    {
        "id": "48",
        "new_question": "List the driver IDs for position number 1.",
        "source": "bird_question_966",
        "new_query": "SELECT driverId FROM driverStandings WHERE position = 1",
        "error_sql": " SELECT DISTINCT driverId  FROM results  WHERE position = 1; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "49",
        "new_question": "What is the height of the tallest player? Indicate his name and api id.In the database, tallest player refers to MAX(height).",
        "source": "bird_question_1021",
        "new_query": "SELECT player_name, player_api_id FROM Player ORDER BY height DESC LIMIT 1",
        "error_sql": " SELECT player_name, player_api_id, MAX(height) AS tallest_height FROM Player ",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        }
    },
    {
        "id": "50",
        "new_question": "Please list the mailing address of all the charter schools in Livermore Valley Joint Unified.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm.",
        "source": "bird_question_2",
        "new_query": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Livermore Valley Joint Unified' AND T1.`Charter School (Y/N)` = 1",
        "error_sql": " SELECT MailStreet, MailStrAbr, MailCity, MailZip, MailState FROM schools WHERE District = 'Livermore Valley Joint Unified' AND Charter = 1; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "51",
        "new_question": "What is the type the school with the highest FRPM count for K-12 students?",
        "source": "bird_question_3",
        "new_query": "SELECT T2.School Type FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "error_sql": " SELECT SchoolType  FROM frpm WHERE (CDSCode, FRPM Count (K-12)) = (     SELECT CDSCode, MAX(FRPM Count (K-12))     FROM frpm); ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"Count\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "52",
        "new_question": "Please list the phone numbers of the direct charter-funded schools that are opened before 1985/1/1.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the frpm.",
        "source": "bird_question_4",
        "new_query": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate < '1985-01-01'",
        "error_sql": " SELECT Schools.Phone, Schools.Ext FROM Schools JOIN frpm ON Schools.CDSCode = frpm.CDSCode WHERE frpm.CharterSchool = 'Y' AND Schools.OpenDate < '1985-01-01'; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: frpm.CharterSchool",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "53",
        "new_question": "Please list the schools with an average score in Write above 450 in the SAT test are exclusively virtual?In the database, Exclusively virtual refers to Virtual = 'F'.",
        "source": "bird_question_5",
        "new_query": "SELECT DISTINCT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrWrite > 450",
        "error_sql": "0",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"0\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "55",
        "new_question": "What is the the mailing address of the school that has the highest number of test takers with an SAT score of over 1500?",
        "source": "bird_question_7",
        "new_query": "SELECT T2.MailStreet FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "error_sql": " WITH HighestSATTakers AS (     SELECT cds, COUNT(DISTINCT sname) AS NumTstTakr     FROM satscores     WHERE NumGE1500 > 0     GROUP BY cds     ORDER BY NumTstTakr DESC     LIMIT 1 ), SchoolAddress AS (     SELECT schools.MailStreet, schools.MailStrAbr, schools.MailCity, schools.MailZip, schools.MailState     FROM schools     JOIN HighestSATTakers ON schools.CDSCode = HighestSATTakers.cds ) SELECT MailStreet, MailStrAbr, MailCity, MailZip, MailState FROM SchoolAddress; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "56",
        "new_question": "What is the number of SAT test takers of the schools with the highest FRPM count for students aged 5-17?",
        "source": "bird_question_8",
        "new_query": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (Ages 5-17)` DESC LIMIT 1 )",
        "error_sql": " SELECT COUNT(DISTINCT satscores.cds) AS num_test_takers FROM satscores JOIN frpm ON satscores.cds = frpm.CDSCode WHERE (frpm.LowGrade IS NOT NULL AND frpm.HighGrade IS NOT NULL) AND frpm.FRPMCount(Ages 5-17) = (     SELECT MAX(frpm2.FRPMCount(Ages 5-17))     FROM frpm frpm2 ); ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"(\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "57",
        "new_question": "Among the schools with an SAT excellence rate of over 0.9, what is the lowest eligible free rate for students aged 5-17?In the database, Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`.",
        "source": "bird_question_12",
        "new_query": "SELECT MIN(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.9",
        "error_sql": "0",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"0\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "58",
        "new_question": "Please list the number of SAT test takers of the schools with the top 3 SAT excellence rate.In the database, Excellence rate = NumGE1500 / NumTstTakr.",
        "source": "bird_question_13",
        "new_query": "SELECT T2.NumTstTakr FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "error_sql": " WITH ExcellenceRate AS (     SELECT cds, NumTstTakr, NumGE1500,             CASE WHEN NumTstTakr > 0 THEN NumGE1500 / NumTstTakr ELSE 0 END AS ExcellenceRate     FROM satscores ) SELECT s.CDSCode, s.School, s.NumTstTakr, s.ExcellenceRate, s.NumGE1500 FROM ExcellenceRate s JOIN (     SELECT cds, MAX(ExcellenceRate) AS MaxRate     FROM ExcellenceRate     GROUP BY cds ) t ON s.cds = t.cds AND s.ExcellenceRate = t.MaxRate ORDER BY s.ExcellenceRate DESC LIMIT 3; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: s.CDSCode",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "59",
        "new_question": "List the top three schools, by descending order, from the highest to the lowest, the most number of free meal (Ages 5-17). Please give their NCES school identification number.",
        "source": "bird_question_14",
        "new_query": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Free Meal Count (Ages 5-17)` DESC LIMIT 3",
        "error_sql": " SELECT NCESDist, NCESSchool, FreeMealCount (Ages 5-17) FROM schools WHERE StatusType = 'Open' AND Charter = 'Y' ORDER BY FreeMealCount (Ages 5-17) DESC LIMIT 3; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"5\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "60",
        "new_question": "Which active district has the highest average score in Math?",
        "source": "bird_question_15",
        "new_query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "error_sql": " SELECT DistrictName, AVG(AvgScrMath) AS AverageScore FROM satscores JOIN schools ON satscores.cds = schools.CDSCode WHERE StatusType = 'A' AND Charter = 'N' GROUP BY DistrictName ORDER BY AverageScore DESC LIMIT 1; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: DistrictName",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "61",
        "new_question": "What is the number of SAT test takers of the school with the highest number of test takers who received SAT scores of at least 1500?",
        "source": "bird_question_88",
        "new_query": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "error_sql": " SELECT NumTstTakr FROM satscores WHERE cname = (     SELECT cname     FROM satscores     GROUP BY cname     ORDER BY NumTstTakr DESC     LIMIT 1 ) AND NumGE1500 > 0; ",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "63",
        "new_question": "Calculate the max number of hydrogen ygen atoms in single-bonded molecules.In the database, single-bonded molecules refers to bond_type = '-' ; average number of hydrogen ygen atom = AVG(element = 'h').",
        "source": "bird_question_197",
        "new_query": "SELECT MAX(hydrogen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS hydrogen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'h'  GROUP BY T1.molecule_id) AS hydrogen_count",
        "error_sql": "   SELECT AVG(atom_id) AS average_hydrogen_atoms FROM atom WHERE molecule_id IN (     SELECT molecule_id     FROM bond     WHERE bond_type = '-' ) AND element = 'H'; ",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "64",
        "new_question": "In the molecule containing oxygen atoms, how many are carcinogenic?In the database, carcinogenic refers to label = '+'; oxygen atoms refers to element = 'o'.",
        "source": "bird_question_199",
        "new_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "error_sql": "   SELECT COUNT(*) AS 'Carcinogenic Oxygen Molecules' FROM atom, molecule WHERE atom.element = 'o' AND atom.molecule_id = molecule.molecule_id AND label = '+'; ",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "65",
        "new_question": "Describe the date about rulings for card named 'Sublime Epiphany' with number 74s.In the database, 'Sublime Epiphany' is name of cards; number 74s refers to number = '74s'.",
        "source": "bird_question_348",
        "new_query": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "error_sql": " SELECT r.date FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.id = st.setId JOIN foreign_data fd ON c.multiverseId = fd.multiverseid JOIN rulings r ON c.uuid = r.uuid WHERE c.name = 'Sublime Epiphany' AND c.number = '74s' AND st.language = 'en'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: st.setId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "66",
        "new_question": "Name the card and artist with the most ruling information. Also state the border color of card.In the database, with the most ruling information refers to Max(count(rulings.uuid)).",
        "source": "bird_question_349",
        "new_query": "SELECT T1.name, T1.artist, T1.borderColor FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.artist ORDER BY COUNT(DISTINCT T1.uuid) DESC LIMIT 1",
        "error_sql": "   WITH rulings_count AS (     SELECT card.id, COUNT(rulings.uuid) AS rulings_count     FROM cards     JOIN foreign_data ON cards.multiverseId = foreign_data.multiverseid     JOIN legalities ON cards.id = legalities.uuid     JOIN rulings ON legalities.id = rulings.id     GROUP BY card.id ), max_rulings_count AS (     SELECT MAX(rulings_count) AS max_rulings_count     FROM rulings_count ) SELECT card.name, artist.name, card.borderColor FROM cards JOIN artists ON cards.artist = artists.id JOIN rulings_count ON card.id = rulings_count.id WHERE rulings_count.rulings_count = (SELECT max_rulings_count.max_rulings_count FROM max_rulings_count); ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such table: artists",
            "error_type": [
                "OperationalError",
                "no such table"
            ]
        }
    },
    {
        "id": "67",
        "new_question": "State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.",
        "source": "bird_question_350",
        "new_query": "SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "error_sql": " SELECT type  FROM cards  WHERE name = 'Annul' AND number = '29'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "68",
        "new_question": "How many cards which have alternative language in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_351",
        "new_query": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": " SELECT COUNT(*) AS num_cards FROM foreign_data WHERE language = 'Japanese'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "69",
        "new_question": "Calculate the percentage of the cards availabe in Japanese.In the database, 'Japanese' is the language; percentage = Divide(Sum(id where language = 'Japanese'), Count(id)) *100.",
        "source": "bird_question_352",
        "new_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "error_sql": "   SELECT ROUND(100.0 * COUNT(id) / (SELECT COUNT(id) FROM foreign_data WHERE language = 'Japanese'), 2) AS percentage_of_cards_available_in_Japanese; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "70",
        "new_question": "List all the sets available in Italian translation. State the type of cards per set.In the database, Italian translation refers to language = 'Italian'.",
        "source": "bird_question_353",
        "new_query": "SELECT T1.name, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "error_sql": " SELECT s.code, s.type FROM sets s JOIN set_translations st ON s.id = st.setCode WHERE st.language = 'Italian'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "71",
        "new_question": "What are the translation for the set that card 'Angel of Mercy' is in?In the database, 'Angel of Mercy' is the name of card.",
        "source": "bird_question_360",
        "new_query": "SELECT translation FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "error_sql": " SELECT st.translation FROM cards c JOIN sets s ON c.setCode = s.code JOIN set_translations st ON s.id = st.setId WHERE c.name = 'Angel of Mercy'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: st.setId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "72",
        "new_question": "What is the format of card 'Cloudchaser Eagle'?In the database, 'Cloudchaser Eagle' is the name of card.",
        "source": "bird_question_364",
        "new_query": "SELECT DISTINCT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "error_sql": " SELECT sets.code AS format FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode JOIN sets ON set_translations.setCode = sets.code WHERE cards.name = 'Cloudchaser Eagle'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "73",
        "new_question": "List down the name of artists for cards in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_381",
        "new_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "error_sql": " SELECT artist  FROM cards  JOIN foreign_data ON cards.multiverseId = foreign_data.multiverseid  WHERE language = 'Japanese'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "74",
        "new_question": "List down the count of artists for cards that only available in paper and Japanese language?In the database, available in paper refers to availability = 'paper'; 'Japanese' is the language.",
        "source": "bird_question_382",
        "new_query": "SELECT COUNT(T1.artist) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "error_sql": " SELECT COUNT(DISTINCT artist) AS count_of_artists FROM cards WHERE availability = 'paper' AND language = 'Japanese'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: language",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "75",
        "new_question": "What are the color of cards that have future frame version and what are the legality status of these cards?In the database, future frame version refers to frameVersion = 'future'.",
        "source": "bird_question_386",
        "new_query": "SELECT colors FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "error_sql": " SELECT colorIdentity, legalities.status  FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE frameVersion = 'future'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "76",
        "new_question": "What are the cards for set OGW? State the artist for these cards.In the database, set OGW refers to setCode = 'OGW'.",
        "source": "bird_question_387",
        "new_query": "SELECT id, artist FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "error_sql": " SELECT c.id, c.artist FROM cards c JOIN sets s ON c.setCode = s.code WHERE s.code = 'OGW'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "77",
        "new_question": "What are the cards in set 10E with converted mana of 5 have translation and what are the translation?In the database, set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5.",
        "source": "bird_question_388",
        "new_query": "SELECT id, translation FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "error_sql": " SELECT c.name, c.flavorText, fd.translation FROM cards c JOIN set_translations st ON c.setCode = st.setCode AND c.id = st.id JOIN foreign_data fd ON st.language = fd.language AND c.id = fd.multiverseid WHERE c.setCode = '10E' AND c.convertedManaCost = 5; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: fd.translation",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "78",
        "new_question": "List down the name of cards with original types of Creature - Elf and the information of rulings for these cards.In the database, Creature - Elf is the originalType.",
        "source": "bird_question_389",
        "new_query": "SELECT T1.id, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "error_sql": " SELECT c.name, r.date, r.text FROM cards c JOIN legalities l ON c.uuid = l.uuid JOIN sets s ON c.setCode = s.code LEFT JOIN rulings r ON c.uuid = r.uuid WHERE c.originalType LIKE '%Creature - Elf%' AND l.status = 'Legal' AND s.releaseDate <= '2024-01-09'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "79",
        "new_question": "What are the border color text of cards from ID 1-20? What are the format of these cards?In the database, ID 1-20 refers to id BETWEEN 1 AND 20.",
        "source": "bird_question_390",
        "new_query": "SELECT T1.borderColor, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "error_sql": " SELECT borderColor, format FROM cards WHERE id BETWEEN 1 AND 20; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: format",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "80",
        "new_question": "Pick 3 cards with rarity of uncommon, list down the artists for these cards according to ascending order of it's ruling date.In the database, uncommon refers to rarity = 'uncommon'.",
        "source": "bird_question_392",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "error_sql": " WITH ArtistRulings AS (     SELECT artist, rulings.date AS ruling_date     FROM cards     JOIN rulings ON cards.uuid = rulings.uuid     WHERE rarity = 'uncommon' ) SELECT artist FROM ArtistRulings ORDER BY ruling_date ASC; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        }
    },
    {
        "id": "81",
        "new_question": "Lists availability of cards in German.In the database, German refer to language; availability refer to the availability where subtypes is not null AND supertypes is not null",
        "source": "bird_question_407",
        "new_query": "SELECT T1.availability FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "error_sql": " SELECT DISTINCT cards.availability FROM cards JOIN foreign_data ON foreign_data.multiverseid = cards.multiverseId AND foreign_data.language = 'German' WHERE cards.subtypes IS NOT NULL AND cards.supertypes IS NOT NULL; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "82",
        "new_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its all types.In the database, available in paper refers to availability = 'paper'.",
        "source": "bird_question_410",
        "new_query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "error_sql": " SELECT DISTINCT types  FROM cards  WHERE artist = 'Erica Yang' AND availability = 'paper' AND format = 'Pauper'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: format",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "83",
        "new_question": "What is the foreign text of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?In the database, in French refers to language = 'French'; black border color refers to borderColor = 'black'.",
        "source": "bird_question_412",
        "new_query": "SELECT text FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "error_sql": " SELECT foreign_data.text FROM cards JOIN foreign_data ON cards.multiverseId = foreign_data.multiverseid WHERE cards.type = 'Creature' AND cards.layout = 'normal' AND cards.borderColor = 'black' AND cards.artist = 'Matthew D. Wilson' AND foreign_data.language = 'French'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        }
    },
    {
        "id": "84",
        "new_question": "What translation is the set of 180 cards that belongs to the Ravnica block translated into?In the database, set of 180 cards refers to baseSetSize = 180.",
        "source": "bird_question_414",
        "new_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "error_sql": " SELECT st.translation  FROM sets s JOIN set_translations st ON s.id = st.setCode WHERE s.block = 'Ravnica' AND s.baseSetSize = 180; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "85",
        "new_question": "What is the code of set number 5 and its translation?In the database, set number 5 refers to id = 5.",
        "source": "bird_question_428",
        "new_query": "SELECT T1.code, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "error_sql": " SELECT code, translation  FROM sets  JOIN set_translations ON sets.id = set_translations.setCode  WHERE sets.id = 5; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "86",
        "new_question": "What is the translation and expansion type of set number 206?In the database, set number 206 refers to id = 206.",
        "source": "bird_question_429",
        "new_query": "SELECT T2.translation, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
        "error_sql": " SELECT st.translation, s.type FROM sets s JOIN set_translations st ON s.id = st.setCode WHERE s.id = 206; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "87",
        "new_question": "Please list top two sets of cards with their release date that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "source": "bird_question_430",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "error_sql": " SELECT DISTINCT sets.name AS SetName, sets.releaseDate AS ReleaseDate FROM cards JOIN foreign_data ON foreign_data.multiverseid = cards.multiverseId JOIN sets ON sets.id = cards.setCode JOIN set_translations ON set_translations.setCode = sets.code WHERE foreign_data.language = 'Italian' AND sets.block = 'Shadowmoor' ORDER BY sets.name ASC, sets.releaseDate ASC LIMIT 2; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "88",
        "new_question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set release date in your response.In the database, available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'.",
        "source": "bird_question_431",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "error_sql": " SELECT s.releaseDate, s.name FROM sets s JOIN legalities l ON s.id = l.uuid WHERE s.isForeignOnly = 0 AND s.isFoilOnly = 1 AND EXISTS (     SELECT 1 FROM foreign_data fd     WHERE fd.multiverseid IN (         SELECT multiverseId FROM cards c         WHERE s.id = c.setCode     ) AND fd.language = 'Japanese' ); ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "89",
        "new_question": "State the name of the set with release date of 07/13/2007?",
        "source": "bird_question_441",
        "new_query": "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "error_sql": " SELECT name  FROM sets  WHERE releaseDate = '07/13/2007'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "90",
        "new_question": "Mention the base set size and translation of the set that was in block named 'Masques' and 'Mirage'.",
        "source": "bird_question_442",
        "new_query": "SELECT DISTINCT T1.baseSetSize, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
        "error_sql": " SELECT s.baseSetSize, st.translation FROM sets s JOIN set_translations st ON s.id = st.setCode WHERE s.block IN ('Masques', 'Mirage'); ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "91",
        "new_question": "Give the code of sets have expansion type of 'box'?In the database, code of sets refers to setCode.",
        "source": "bird_question_443",
        "new_query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'box' GROUP BY T2.setCode",
        "error_sql": " SELECT DISTINCT code FROM sets WHERE type = 'box'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "92",
        "new_question": "Name the artist for the card that has boros watermark? List out the type of this card.",
        "source": "bird_question_444",
        "new_query": "SELECT DISTINCT T1.artist, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "error_sql": " SELECT artist, type  FROM cards  WHERE watermark = 'boros'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "93",
        "new_question": "What is the language and type of the card that has colorpie watermark? List out the type of this card.",
        "source": "bird_question_445",
        "new_query": "SELECT DISTINCT T2.language, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "error_sql": " SELECT fd.language, fd.type  FROM cards AS c  JOIN foreign_data AS fd ON c.uuid = fd.multiverseid  WHERE c.watermark = 'colorpie'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "94",
        "new_question": "Give the translation of sets have expansion commander type?In the database, translation of sets refers to translation.",
        "source": "bird_question_447",
        "new_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "error_sql": " SELECT DISTINCT st.translation FROM sets s JOIN set_translations st ON s.code = st.setCode WHERE s.type = 'expansion' AND s.isCommander = 1; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: s.isCommander",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "95",
        "new_question": "Name the foreign name of the card that has abzan watermark? List out the artist of this card.",
        "source": "bird_question_448",
        "new_query": "SELECT DISTINCT T1.name, T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "error_sql": " SELECT foreign_data.name, cards.artist FROM foreign_data JOIN cards ON foreign_data.multiverseid = cards.multiverseId WHERE foreign_data.watermark = 'abzan'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: foreign_data.watermark",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "97",
        "new_question": "For the user whose display name is 'DatEpicCoderGuyWhoPrograms', what is his/her badge's user id?In the database, 'DatEpicCoderGuyWhoPrograms' is the DisplayName.",
        "source": "bird_question_570",
        "new_query": "SELECT T2.UserId FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "error_sql": " SELECT UserId  FROM users  WHERE DisplayName = 'DatEpicCoderGuyWhoPrograms'; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: UserId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "98",
        "new_question": "What is the overall rating of the football player Franco Zennaro?",
        "source": "bird_question_1045",
        "new_query": "SELECT DISTINCT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "error_sql": " SELECT overall_rating  FROM Player_Attributes  WHERE player_fifa_api_id = 'Franco Zennaro'; ",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "99",
        "new_question": "Which of these players performs the best in heading accuracy, Alexis, Ariel Borysiuk or Arouna Kone? List the corresponding values.",
        "source": "bird_question_1085",
        "new_query": "SELECT t1.player_name, t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "error_sql": " SELECT player_name, heading_accuracy  FROM Player JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id WHERE player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY heading_accuracy DESC; ",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Correct",
                "Join Columns Error"
            ]
        }
    },
    {
        "id": "100",
        "new_question": "Which client possesses a gold type card, give his/her client id.",
        "source": "bird_question_103",
        "new_query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold'",
        "error_sql": "   SELECT client_id FROM card JOIN disp ON card.disp_id = disp.disp_id WHERE type = 'gold' ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: type",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "101",
        "new_question": "For the client who applied 98832 USD loan in 1996/1/3, what was his/her district_id?",
        "source": "bird_question_113",
        "new_query": "SELECT T3.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "error_sql": "   SELECT district_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE l.amount = 98832 AND l.date = '1996-01-03'; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "102",
        "new_question": "State the district and region for loan ID with status A. In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "new_query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status = 'A'",
        "error_sql": "   SELECT DISTINCT A2 AS district, A3 AS region FROM district WHERE district_id IN (     SELECT DISTINCT district_id     FROM loan     WHERE status = 'A' ) ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "103",
        "new_question": "Provide the account ID, district and region for loan duration greater than 24 months. In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "new_query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration > 24",
        "error_sql": "   SELECT account_id, A2 AS district, A3 AS region FROM account JOIN district ON account.district_id = district.district_id WHERE duration > 24; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: duration",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "104",
        "new_question": "List the loan ID, district and average salary for loan with payments more than USD2,000. In the database, A2 refers to the names of districts, A11 refers to average salary",
        "source": "bird_question_124",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.payments > 2000",
        "error_sql": "   SELECT loan_id, A2 AS district, AVG(amount) AS average_salary FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE payments > 2000 GROUP BY loan_id, A2; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "105",
        "new_question": "List the client_id of the account holders in South Bohemia that still do not own credit cards. In the database, A3 contains the region names; South Bohemia is one of region names.",
        "source": "bird_question_130",
        "new_query": "SELECT T3.client_id FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "error_sql": " SELECT client_id  FROM account  JOIN district ON account.district_id = district.district_id  WHERE A3 = 'South Bohemia' AND account_id NOT IN (SELECT account_id FROM card); ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "107",
        "new_question": "Which districts have transactions with average balance greater than -30,300 in 1997?",
        "source": "bird_question_141",
        "new_query": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING AVG(T3.balance) > -30000",
        "error_sql": "   SELECT DISTINCT A.district_id, A.A2, A.A3, A.A4, A.A5, A.A6, A.A7, A.A8, A.A9, A.A10, A.A11, A.A12, A.A13, A.A14, A.A15, A.A16 FROM district AS A JOIN account AS B ON A.district_id = B.district_id WHERE (SELECT AVG(B.balance) FROM trans WHERE B.account_id = trans.account_id AND YEAR(trans.date) = 1997) > -30300; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: B.balance",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "108",
        "new_question": "What is the gender of account owner number 130?",
        "source": "bird_question_174",
        "new_query": "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "error_sql": " SELECT client.gender  FROM account, client  WHERE account.account_id = 130 AND client.client_id = account.client_id; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: account.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "109",
        "new_question": "Please provide a list of female clients and whose account branch is in East Bohemia, along with their IDs.",
        "source": "bird_question_180",
        "new_query": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND T1.gender = 'F'",
        "error_sql": "   SELECT client_id, district_id FROM client WHERE gender = 'F' AND district_id IN (SELECT district_id FROM district WHERE A2 = 'East Bohemia'); ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "110",
        "new_question": "Provide the IDs and gender of the client with high level credit card, which is eligible for loans. In the database, when type is gold, the credit card is high-level",
        "source": "bird_question_194",
        "new_query": "SELECT T1.client_id, T3.gender FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "error_sql": "   SELECT client_id, gender FROM client c JOIN card ca ON c.client_id = ca.card_id WHERE type = 'gold' AND EXISTS (     SELECT * FROM account a WHERE a.account_id = ca.account_id AND frequency > 0 ); ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: ca.account_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "111",
        "new_question": "Lists the artist of all Creature-type cards with legal status. In the database, legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature'.",
        "source": "bird_question_406",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "error_sql": " SELECT artist  FROM cards  WHERE types = 'Creature' AND status = 'legal'; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: status",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "112",
        "new_question": "Indicates the number of cards with Banned status, ruling text 'This is a triggered mana ability' that do not have multiple faces. In the database, do not have multiple faces refers to side IS NULL.",
        "source": "bird_question_409",
        "new_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.status = 'Banned' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
        "error_sql": " SELECT COUNT(*)  FROM cards c JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Banned' AND c.side IS NULL AND EXISTS (     SELECT 1 FROM rulings r     WHERE r.uuid = c.uuid AND r.text LIKE '%This is a triggered mana ability%' ); ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Missing Column"
            ]
        }
    },
    {
        "id": "113",
        "new_question": "Please list the Italian names of the cards in the set Coldsnap whose isFullArt is 1. In the database, card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'.",
        "source": "bird_question_484",
        "new_query": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' AND T2.isFullArt = 1",
        "error_sql": " SELECT name AS ItalianName FROM cards JOIN set_translations ON cards.setCode = set_translations.setCode AND language = 'Italian' WHERE setCode = 'Coldsnap' AND isFullArt = 1; ",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: setCode",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "114",
        "new_question": "Among posts by user with Id 15 and 20, which one has higher popularity? In the database, Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'",
        "source": "bird_question_634",
        "new_query": "SELECT T1.Id FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.Id = 15 OR T1.Id = 20 GROUP BY T1.Id ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "error_sql": "  SELECT p.Id, p.ViewCount  FROM posts p  WHERE p.OwnerUserId IN (15, 20) AND (p.OwnerDisplayName = 'Harvey Motulsky' OR p.OwnerDisplayName = 'Noah Snyder')  ORDER BY p.ViewCount DESC  LIMIT 1; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "115",
        "new_question": "How many comments did Neil McGuigan get in his posts after 2010-07-20? In the database, negative comment refers to score < 60; DisplayName = 'Neil McGuigan'",
        "source": "bird_question_636",
        "new_query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.CreationDate > '2010-07-20'",
        "error_sql": " SELECT COUNT(*) AS CommentCount FROM comments WHERE UserId = (SELECT Id FROM users WHERE DisplayName = 'Neil McGuigan') AND CreationDate > '2010-07-20' ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "116",
        "new_question": "State all the tags used by Mark Meckes in his posts that has at least five answers. In the database, DisplayName = 'Mark Meckes'",
        "source": "bird_question_637",
        "new_query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.AnswerCount >= 5",
        "error_sql": "  SELECT Tags.TagName  FROM tags  JOIN posts ON tags.Id = posts.Tags  WHERE posts.OwnerDisplayName = 'Mark Meckes' AND posts.AnswerCount >= 5; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "117",
        "new_question": "Mention the display name and website url of the user who owned the excerpt post with hypothesis-testing tag. In the database, user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing'",
        "source": "bird_question_654",
        "new_query": "SELECT T3.DisplayName, T3.WebsiteUrl FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "error_sql": " SELECT u.DisplayName, u.WebsiteUrl FROM users u JOIN tags t ON u.Id = t.ExcerptPostId WHERE t.TagName = 'hypothesis-testing'; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "118",
        "new_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who own it. In the database, views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets'",
        "source": "bird_question_685",
        "new_query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "error_sql": " SELECT p.ViewCount, u.DisplayName FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE p.Body = 'Computer Game Datasets'; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "120",
        "new_question": "What is the gender of the dumbest superhero? In the database, the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'.",
        "source": "bird_question_736",
        "new_query": "SELECT T1.gender_id FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "error_sql": "   SELECT g.gender FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN gender g ON s.gender_id = g.id WHERE a.attribute_name = 'Intelligence' AND ha.attribute_value = (SELECT MIN(ha2.attribute_value) FROM hero_attribute ha2 WHERE ha2.attribute_id = ha.attribute_id); ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "121",
        "new_question": "What are the publisher of the superheroes with the power of death touch? In the database, publisher of the superheroes refers to publisher_id; the power of death touch refers to power_name = 'Death Touch'",
        "source": "bird_question_739",
        "new_query": "SELECT T1.publisher_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "error_sql": "   SELECT publisher_name FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE power_name = 'Death Touch'; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: publisher_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "123",
        "new_question": "For the Bahrain Grand Prix with 3 rounds, how many drivers not finished the game? In the database, drivers who finished the race refers to time has records",
        "source": "bird_question_862",
        "new_query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.round = 3 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "error_sql": " SELECT COUNT(DISTINCT driverId) AS num_drivers_not_finished FROM races JOIN results ON races.raceId = results.raceId WHERE races.name = 'Bahrain Grand Prix' AND races.round IN (1, 2, 3) AND results.time IS NULL; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "125",
        "new_question": "Name all drivers in the 2010 Singapore Grand Prix order by their points.",
        "source": "bird_question_891",
        "new_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.points ASC",
        "error_sql": " SELECT d.forename, d.surname, r.points FROM races r JOIN results res ON r.raceId = res.raceId JOIN drivers d ON res.driverId = d.driverId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY r.points DESC; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: r.points",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "126",
        "new_question": "What is the best lap time recorded? List the code of driver and race with such recorded lap time. In the database, the best lap time refers to min(time).",
        "source": "bird_question_894",
        "new_query": "SELECT T2.milliseconds, T1.code, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "error_sql": " SELECT DISTINCT r.driverId, r.raceId FROM results r JOIN (     SELECT raceId, MIN(time) AS minTime     FROM lapTimes     GROUP BY raceId ) t ON r.raceId = t.raceId AND r.time = t.minTime; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "127",
        "new_question": "What is the average lap time for Sebastian Vettel since 2009?",
        "source": "bird_question_895",
        "new_query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Sebastian' AND T3.surname = 'Vettel' AND T1.year >= 2009",
        "error_sql": " SELECT AVG(time) AS average_lap_time FROM lap_times WHERE driverId = (SELECT driverId FROM drivers WHERE surname = 'Vettel' AND forename = 'Sebastian') AND year >= 2009; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such table: lap_times",
            "error_type": [
                "OperationalError",
                "no such table"
            ]
        }
    },
    {
        "id": "128",
        "new_question": "State the race and date of race in which Alex Yoong was in track number less than 10. In the database, track number less than 10 refers to position < 10.",
        "source": "bird_question_902",
        "new_query": "SELECT T1.name, T1.date FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10",
        "error_sql": " SELECT races.name AS Race, races.date AS DateOfRace FROM races JOIN results ON races.raceId = results.raceId WHERE results.driverId IN (     SELECT driverId     FROM drivers     WHERE surname = 'Yoong' AND forename = 'Alex' ) AND results.grid < 10; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "129",
        "new_question": "Which was Lewis Hamilton first race? What was his position recorded for his first race event? In the database, first race refers to min(Year).",
        "source": "bird_question_906",
        "new_query": "SELECT T1.name, T2.position FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "error_sql": " SELECT r.name, r.date, r.time, d.position FROM races r JOIN results rr ON r.raceId = rr.raceId JOIN drivers d ON rr.driverId = d.driverId WHERE d.surname = 'Hamilton' AND r.year = (SELECT MIN(year) FROM seasons); ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: d.position",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "130",
        "new_question": "Please list the year of Formula_1 races that Lewis Hamilton participated, remove duplicates.",
        "source": "bird_question_929",
        "new_query": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "error_sql": " SELECT DISTINCT year  FROM races  JOIN drivers ON races.driverId = drivers.driverId  WHERE drivers.surname = 'Hamilton' AND drivers.forename = 'Lewis'; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: races.driverId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "132",
        "new_question": "On what year did the youngest driver had his first qualifying race? where can I know more about the race? In the database, youngest driver refers to Max (year(dob)).",
        "source": "bird_question_981",
        "new_query": "SELECT T3.year, T3.url FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": " SELECT qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3, year(dob) AS dob_year FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE dob_year = (SELECT MIN(dob_year) FROM drivers WHERE dob_year IS NOT NULL) ORDER BY dob_year ASC; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: driverId",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "133",
        "new_question": "How many drivers born after 1980-01-01 have been disqualified from the race. In the database, disqualified refers to statusID = 2.",
        "source": "bird_question_982",
        "new_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.dob >= '1980-01-01'",
        "error_sql": " SELECT COUNT(DISTINCT driverId) AS disqualified_drivers FROM drivers WHERE dob > '1980-01-01' AND statusId = 2; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: statusId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "134",
        "new_question": "What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)",
        "source": "bird_question_995",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.year = 2008",
        "error_sql": " SELECT AVG(points) AS average_score FROM results WHERE driverId = (SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton') AND year = 2008; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: year",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "136",
        "new_question": "State the birthday of players who came from Belgium. In the database, Belgium is name of country",
        "source": "bird_question_1126",
        "new_query": "SELECT t3.birthday FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "error_sql": " SELECT Player.player_name, Player.birthday FROM Player JOIN Country ON Player.country_id = Country.id WHERE Country.name = 'Belgium'; ",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "137",
        "new_question": "Which country's players have the lowest average heights?",
        "source": "bird_question_1128",
        "new_query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.height) ASC LIMIT 1",
        "error_sql": " SELECT Country.name AS Country, AVG(Player.height) AS Average_Height FROM Player JOIN Country ON Player.country_id = Country.id GROUP BY Country.name ORDER BY Average_Height ASC LIMIT 1; ",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "138",
        "new_question": "List the email of the students from the Student_Club who attended the event 'Women's Soccer', how many of them want a T-shirt that's in medium size? In the database, Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
        "source": "bird_question_1317",
        "new_query": "SELECT T3.email FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "error_sql": "   SELECT m.email FROM event e JOIN attendance a ON e.event_id = a.link_to_event JOIN member m ON a.link_to_member = m.member_id WHERE e.event_name = 'Women's Soccer' AND m.t_shirt_size = 'Medium'; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"s\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "139",
        "new_question": "Please list the event type of all the events attended by Maya Mclean.",
        "source": "bird_question_1320",
        "new_query": "SELECT DISTINCT T1.type FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "error_sql": "   SELECT event_name, type FROM event JOIN attendance ON event.event_id = attendance.link_to_event WHERE link_to_member = 'Maya Mclean'; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "141",
        "new_question": "What type of event has the lowest cost?",
        "source": "bird_question_1389",
        "new_query": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "error_sql": " SELECT event_name, MIN(cost) AS min_cost FROM event JOIN budget ON event.event_id = budget.link_to_event GROUP BY event_name; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: cost",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "142",
        "new_question": "Please list the segment of the gas stations with transactions taken place in June, 2013. In the database, June 2013 refers to '201306'.",
        "source": "bird_question_1501",
        "new_query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "error_sql": " SELECT DISTINCT GasStationID, Segment FROM transactions_1k JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE Date BETWEEN '20130601' AND '20130630'; ",
        "db_id": "debit_card_specializing",
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: GasStationID",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "144",
        "new_question": "What is the consumption by customer '38508' at the gas stations? How much had the customer consumed in January 2012? In the database, January 2012 refers '201201' in the table transactions_1k",
        "source": "bird_question_1529",
        "new_query": "SELECT SUM(T3.Consumption) , SUM(IIF(T3.Date = '201201', T3.Consumption, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '31543' AND T2.GasStationID = '3704'",
        "error_sql": " SELECT SUM(Amount) AS Consumption FROM transactions_1k WHERE CustomerID = '38508' AND Date BETWEEN '2012-01-01' AND '2012-01-31'; ",
        "db_id": "debit_card_specializing",
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "145",
        "new_question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What is his/her Segment? In the database, average price per single item = price / amount",
        "source": "bird_question_1531",
        "new_query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "error_sql": " WITH top_spending_customer AS (     SELECT CustomerID, SUM(Amount) AS total_amount     FROM transactions_1k     GROUP BY CustomerID     ORDER BY total_amount DESC     LIMIT 1 ), average_price_per_item AS (     SELECT t.CustomerID, AVG(t.Price / t.Amount) AS average_price_per_item     FROM transactions_1k t     JOIN customers c ON t.CustomerID = c.CustomerID     WHERE c.Segment = 'Premium'     GROUP BY t.CustomerID ) SELECT tsc.CustomerID, tsc.total_amount, appi.average_price_per_item, c.Segment FROM top_spending_customer tsc JOIN average_price_per_item appi ON tsc.CustomerID = appi.CustomerID JOIN customers c ON tsc.CustomerID = c.CustomerID WHERE c.Segment = 'Premium'; ",
        "db_id": "debit_card_specializing",
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "146",
        "new_question": "Please list the zip of the students from the Student_Club that has attended the event 'Women's Soccer'.In the database,Women's Soccer is an event name.",
        "source": "bird_question_1316",
        "new_query": "SELECT T3.zip FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
        "error_sql": "   SELECT zip_code.zip FROM attendance JOIN event ON attendance.link_to_event = event.event_id JOIN member ON attendance.link_to_member = member.member_id JOIN zip_code ON member.zip = zip_code.zip_code WHERE event.event_name = 'Women's Soccer'; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: near \"s\": syntax error",
            "error_type": [
                "OperationalError",
                "syntax error"
            ]
        }
    },
    {
        "id": "147",
        "new_question": "How many events with the status 'Open' of the Student_Club did Sacha Harrison attend?",
        "source": "bird_question_1321",
        "new_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND T1.status = 'Open'",
        "error_sql": "   SELECT COUNT(link_to_event) AS event_count FROM attendance JOIN event ON attendance.link_to_event = event.event_id WHERE event.status = 'Open' AND event.type = 'Student_Club' AND link_to_member = 'Sacha Harrison'; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "149",
        "new_question": "Was each expense in the event with type 'Meeting' approved? In the database, approved = True means expenses was approved; approved = False means expenses was not approved",
        "source": "bird_question_1338",
        "new_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "error_sql": "  SELECT e.expense_id, e.expense_description, e.cost, e.approved  FROM expense e  JOIN event ev ON e.link_to_event = ev.event_id  WHERE ev.type = 'Meeting' AND e.approved = False;  ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: e.link_to_event",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "150",
        "new_question": "Who are the account holders from district with the id 18 and own credit cards and also have loans?",
        "source": "bird_question_146",
        "new_query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.district_id = 18",
        "error_sql": " SELECT DISTINCT account.account_id, client.client_id FROM account JOIN client ON account.district_id = client.district_id JOIN card ON account.account_id = card.account_id JOIN loan ON account.account_id = loan.account_id WHERE district.district_id = 18; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: district.district_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "151",
        "new_question": "What is the total amount withdrawals in cash transactions that the client with the id 3356 makes.In the database, operation = 'VYBER' refers to withdrawal in cash.",
        "source": "bird_question_159",
        "new_query": "SELECT SUM(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "error_sql": "   SELECT SUM(amount) AS total_withdrawals FROM trans WHERE account_id = 3356 AND operation = 'VYBER'; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "152",
        "new_question": "What was the growth rate of the total amount of loans across all accounts for a client from district with the id 73?",
        "source": "bird_question_169",
        "new_query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.district_id = 73 AND T3.type = 'OWNER'",
        "error_sql": "   WITH LoanAmounts AS (     SELECT account_id, SUM(amount) AS total_loan_amount     FROM loan     GROUP BY account_id ), GrowthRate AS (     SELECT account_id, total_loan_amount,             (total_loan_amount - LAG(total_loan_amount) OVER (ORDER BY total_loan_amount)) / LAG(total_loan_amount) OVER (ORDER BY total_loan_amount) AS growth_rate     FROM LoanAmounts ) SELECT client_id, district_id, AVG(growth_rate) AS average_growth_rate FROM GrowthRate JOIN account ON account.account_id = GrowthRate.account_id JOIN client ON client.client_id = account.client_id WHERE district_id = 73 GROUP BY client_id, district_id; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: district_id",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "153",
        "new_question": "What is the average score of posts posted by Matt Parker and have more than 4 votes? In the database, more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker'.",
        "source": "bird_question_635",
        "new_query": "SELECT AVG(T3.Score) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "error_sql": " SELECT AVG(Score)  FROM posts  WHERE OwnerUserId = (SELECT Id FROM users WHERE DisplayName = 'Matt Parker') AND Score > 4; ",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "154",
        "new_question": "List the superheroes with blue eyes and have the super power of 'Agility'.In the database, blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of 'Agility' refers to power_name = 'Agility'.",
        "source": "bird_question_723",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "error_sql": "   SELECT s.superhero_name, s.full_name, c.colour FROM superhero s JOIN hero_attribute ha ON s.id = ha.hero_id JOIN attribute a ON ha.attribute_id = a.id JOIN colour c ON s.eye_colour_id = c.id WHERE a.attribute_name = 'Agility' AND c.colour = 'Blue'; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "156",
        "new_question": "Which publisher published the most intelligent superhero? In the database, the most intelligent superhero refers to attribute_name = 'Intelligence' where MAX(attribute_value).",
        "source": "bird_question_732",
        "new_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Intelligence' ORDER BY T3.attribute_value DESC LIMIT 1",
        "error_sql": "   WITH max_intelligence AS (     SELECT superhero_name, publisher_id     FROM superhero     JOIN hero_attribute ON superhero.id = hero_attribute.hero_id     WHERE attribute_name = 'Intelligence'     GROUP BY superhero_name, publisher_id     HAVING MAX(attribute_value) ), most_intelligent_superhero AS (     SELECT superhero_name, publisher_id     FROM max_intelligence     GROUP BY superhero_name, publisher_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) SELECT publisher_name FROM most_intelligent_superhero JOIN publisher ON most_intelligent_superhero.publisher_id = publisher.id; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: attribute_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "157",
        "new_question": "How many male superheroes have a intelligence value bigger than 95? In the database, male refers to gender = 'Male';intelligence value bigger than 100 refers to attribute_name = 'Intelligence' AND attribute_value > 95.",
        "source": "bird_question_740",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value >  AND T4.gender = 'Male'",
        "error_sql": "   SELECT COUNT(DISTINCT superhero_name) AS male_superheroes_with_high_intelligence FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Male') AND hero_attribute.attribute_value > 95 AND hero_attribute.attribute_name = 'Intelligence'; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: hero_attribute.attribute_name",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "158",
        "new_question": "How many superpowers does female superheroes have? In the database, female refers to gender = 'Female'.",
        "source": "bird_question_751",
        "new_query": "SELECT COUNT(T3.power_name) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Female'",
        "error_sql": "   SELECT COUNT(DISTINCT power_id) AS FemaleSuperpowersCount FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Female'); ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Incorrect Columns"
            ]
        }
    },
    {
        "id": "159",
        "new_question": "Which superhero has the lowest combat published by Dark Horse Comics? In the database, lowest combat refers to MIN(attribute_value) WHERE attribute_name = 'Combat'.",
        "source": "bird_question_769",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Combat' ORDER BY T2.attribute_value ASC LIMIT 1",
        "error_sql": "   SELECT s.superhero_name, h.attribute_value FROM superhero s JOIN hero_attribute h ON s.id = h.hero_id JOIN attribute a ON h.attribute_id = a.id WHERE s.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Dark Horse Comics') AND a.attribute_name = 'Combat' GROUP BY s.superhero_name ORDER BY h.attribute_value ASC LIMIT 1; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Correct",
                "Column Selection Error",
                "Excessive Column"
            ]
        }
    },
    {
        "id": "160",
        "new_question": "List the distinct race of the brown-haired male superhero. In the database, brown-haired refers to colour.colour = 'brown' WHERE hair_colour_id = colour.id; male refers to gender = 'male'.",
        "source": "bird_question_817",
        "new_query": "SELECT DISTINCT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Brown' AND T4.gender = 'Male'",
        "error_sql": "   SELECT DISTINCT race.race FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON hero_attribute.attribute_value = colour.id JOIN gender ON superhero.gender_id = gender.id JOIN race ON superhero.race_id = race.id WHERE hair_colour_id = (SELECT id FROM colour WHERE colour = 'brown') AND gender = 'male'; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "162",
        "new_question": "How many times did Michael Schumacher won from races hosted in the location of Shanghai?In the database, win from races refers to wins=1.",
        "source": "bird_question_903",
        "new_query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.location = 'Shanghai'",
        "error_sql": " SELECT COUNT(*) AS win_count FROM races r JOIN results res ON r.raceId = res.raceId WHERE r.name LIKE '%Shanghai%' AND res.driverId IN (     SELECT driverId     FROM drivers     WHERE surname = 'Schumacher' AND forename = 'Michael') AND wins = 1; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: wins",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "165",
        "new_question": "Locate players with crossing scores of 70 and above, state the country of these players.In the database, crossing scores of 70 and above refers to crossing > 69.",
        "source": "bird_question_1127",
        "new_query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.crossing > 69",
        "error_sql": " SELECT Player.player_name, Country.name AS country FROM Player JOIN Player_Attributes ON Player.id = Player_Attributes.player_api_id JOIN Country ON Player.country_id = Country.id WHERE Player_Attributes.crossing > 69; ",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Player.country_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "167",
        "new_question": "Which student has been entrusted to manage the budget for the event with status 'Open'?",
        "source": "bird_question_1387",
        "new_query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.status = 'Open'",
        "error_sql": "   SELECT m.first_name, m.last_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Open' AND b.event_status = 'Open'; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "168",
        "new_question": "List the members who incurred expenses in more than one event with the type 'Meeting', ordered by the amount from low to high.",
        "source": "bird_question_1451",
        "new_query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.type = 'Meeting' GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY T1.cost",
        "error_sql": "   SELECT m.first_name, m.last_name, SUM(e.cost) AS total_cost FROM expense e JOIN attendance a ON e.link_to_member = a.link_to_member JOIN event eve ON a.link_to_event = eve.event_id JOIN member m ON e.link_to_member = m.member_id WHERE eve.type = 'Meeting' GROUP BY m.member_id HAVING COUNT(DISTINCT eve.event_id) > 1 ORDER BY total_cost ASC; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "171",
        "new_question": "Among the female superheroes from Marvel Comics, how many of them have blue eyes? In the database, the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; female refers to gender = 'Female'",
        "source": "bird_question_728",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue' AND T4.gender = 'Female'",
        "error_sql": "   SELECT COUNT(DISTINCT superhero_name) AS 'Number of Female Superheroes with Blue Eyes' FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id JOIN colour ON hero_attribute.attribute_value = colour.id WHERE superhero.publisher_id = (SELECT id FROM publisher WHERE publisher_name = 'Marvel Comics') AND superhero.gender_id = (SELECT id FROM gender WHERE gender = 'Female') AND colour.colour = 'Blue'; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "173",
        "new_question": "What is the hero's full name and publisher with the highest attribute in strength?",
        "source": "bird_question_766",
        "new_query": "SELECT T1.full_name, T4.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": " WITH max_strength AS (     SELECT hero_id, MAX(attribute_value) AS max_strength     FROM hero_attribute     WHERE attribute_name = 'strength'     GROUP BY hero_id ), hero_publisher AS (     SELECT s.hero_id, p.publisher_name     FROM superhero s     JOIN publisher p ON s.publisher_id = p.id     WHERE s.id IN (SELECT hero_id FROM max_strength) ) SELECT s.superhero_name AS full_name, hp.publisher_name FROM superhero s JOIN hero_publisher hp ON s.id = hp.hero_id; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: s.hero_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "174",
        "new_question": "List the name and race of superheroes with flight power.",
        "source": "bird_question_771",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.power_name = 'Flight'",
        "error_sql": "   SELECT superhero_name, race FROM superhero JOIN hero_power ON superhero.id = hero_power.hero_id JOIN superpower ON hero_power.power_id = superpower.id WHERE power_name = 'Flight'; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: race",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "175",
        "new_question": "Provide superheroes' names and hair colours who have the adaptation power. In the database, hair colour refers to colour where hair_colour_id = colour.id",
        "source": "bird_question_778",
        "new_query": "SELECT T1.superhero_name, T4.colour FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T3.power_name = 'Adaptation'",
        "error_sql": "   SELECT superhero_name, hair_colour_id, colour FROM superhero JOIN hero_attribute ON superhero.id = hero_attribute.hero_id JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Adaptation' AND hair_colour_id IS NOT NULL; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: colour",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "177",
        "new_question": "Which hero was the fastest? What is his/her race?",
        "source": "bird_question_794",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": "   WITH fastest_hero AS (     SELECT superhero.superhero_name, superhero.race_id     FROM superhero     JOIN hero_attribute ON superhero.id = hero_attribute.hero_id     JOIN attribute ON hero_attribute.attribute_id = attribute.id     WHERE attribute.attribute_name = 'Speed'     GROUP BY superhero.id     ORDER BY SUM(hero_attribute.attribute_value) DESC     LIMIT 1 ) SELECT * FROM fastest_hero; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "178",
        "new_question": "What is the race and the gender of the superhero with maximum attribute value?In the database,maximum attribute value refers to MAX(attribute_value).",
        "source": "bird_question_810",
        "new_query": "SELECT T3.race, T4.gender FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id ORDER BY T2.attribute_value DESC LIMIT 1",
        "error_sql": "   WITH MaxAttribute AS (     SELECT hero_id, MAX(attribute_value) AS max_attribute_value     FROM hero_attribute     GROUP BY hero_id ), MaxAttributeValue AS (     SELECT attribute_id, attribute_name     FROM attribute     WHERE id IN (SELECT attribute_id FROM MaxAttribute) )  SELECT s.superhero_name, r.race, g.gender FROM superhero s JOIN MaxAttribute m ON s.id = m.hero_id JOIN race r ON s.race_id = r.id JOIN gender g ON s.gender_id = g.id; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "179",
        "new_question": "Among the bad superheroes, what is the percentage of female superheroes with black eyes? In the database, black eyes refers to colour = 'Black' and eye_colour_id = colour.id.",
        "source": "bird_question_818",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T2.alignment = 'Bad' AND T4.colour = 'Black'",
        "error_sql": "   WITH Female_BlackEyes AS (     SELECT superhero.superhero_name, COUNT(superhero.id) as count     FROM superhero     JOIN gender ON superhero.gender_id = gender.id     JOIN eye_colour ON superhero.eye_colour_id = eye_colour.id     WHERE superhero.alignment_id = '1' AND gender.gender = 'Female' AND eye_colour.colour = 'Black' ), Total_Bad_Superheroes AS (     SELECT COUNT(superhero.id) as total     FROM superhero     WHERE superhero.alignment_id = '1' ) SELECT Female_BlackEyes.count / Total_Bad_Superheroes.total * 100 AS percentage; ",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: Female_BlackEyes.count",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "181",
        "new_question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50 and the status were finished?",
        "source": "bird_question_962",
        "new_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50 AND T4.status = 'Finished', 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.year BETWEEN 2000 AND 2005",
        "error_sql": " WITH DriversBornBefore1985 AS (     SELECT driverId     FROM drivers     WHERE dob < '1985-01-01' ), DriversWithLapOver50 AS (     SELECT distinct raceId, driverId     FROM lapTimes     WHERE lap > 50 ), FinishedStatus AS (     SELECT statusId     FROM status     WHERE status = 'Finished' ) SELECT      ROUND(COUNT(*) / (SELECT COUNT(DISTINCT driverId) FROM DriversBornBefore1985) * 100, 2) AS percentage FROM results WHERE year BETWEEN 2000 AND 2005 AND driverId IN (SELECT driverId FROM DriversBornBefore1985) AND driverId IN (SELECT driverId FROM DriversWithLapOver50) AND statusId IN (SELECT statusId FROM FinishedStatus); ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: year",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "182",
        "new_question": "On what year did the youngest driver had his first qualifying race? State the result in terms of points about him in the race.In the database,youngest driver refers to Max (year(dob));",
        "source": "bird_question_981",
        "new_query": "SELECT T3.year, T4.points FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId INNER JOIN results as T4 on T2.driverId = T4.driverId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "error_sql": " SELECT qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3, points FROM qualifying JOIN drivers ON qualifying.driverId = drivers.driverId WHERE year(drivers.dob) = (SELECT MIN(year(dob)) FROM drivers) ORDER BY qualifyId ASC; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: driverId",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "183",
        "new_question": "How many American drivers have been disqualified from the race named 'Monaco Grand Prix'? In the database, disqualified refers to statusID = 2;",
        "source": "bird_question_982",
        "new_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId INNER JOIN races AS T4 ON T2.raceId = T4.raceId WHERE T3.status = 'Disqualified' AND T1.nationality = 'American' AND T4.name = 'Monaco Grand Prix'",
        "error_sql": " SELECT COUNT(DISTINCT driverId) AS disqualified_drivers FROM drivers JOIN results ON drivers.driverId = results.driverId JOIN races ON results.raceId = races.raceId WHERE nationality = 'American' AND name = 'Monaco Grand Prix' AND statusId = 2; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: ambiguous column name: driverId",
            "error_type": [
                "OperationalError",
                "ambiguous column name"
            ]
        }
    },
    {
        "id": "184",
        "new_question": "List the website of the constructor of the drivers whose status is collision in the 2009 Singapore Grand Prix.",
        "source": "bird_question_990",
        "new_query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T4.status = 'Collision'",
        "error_sql": " SELECT c.url  FROM drivers d JOIN results r ON d.driverId = r.driverId JOIN constructors c ON r.constructorId = c.constructorId WHERE r.statusId IN (SELECT statusId FROM status WHERE status = 'collision') AND r.raceId IN (SELECT raceId FROM races WHERE year = 2009 AND name = 'Singapore Grand Prix'); ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "185",
        "new_question": "Which constructor scored most points from Baku City Circuit between 2010 and 2020? List the score, name and nationality of this Team.",
        "source": "bird_question_994",
        "new_query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.name = 'Baku City Circuit' AND T3.year BETWEEN 2010 AND 2020 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "error_sql": " WITH constructor_points AS (     SELECT constructorId, SUM(points) as points     FROM constructorResults     WHERE circuitId = (SELECT circuitId FROM circuits WHERE name = 'Baku City Circuit')     GROUP BY constructorId ), top_constructor AS (     SELECT *     FROM constructor_points     ORDER BY points DESC     LIMIT 1 ) SELECT c.name, c.nationality, cp.points FROM top_constructor cp JOIN constructors c ON cp.constructorId = c.constructorId; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: circuitId",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "186",
        "new_question": "What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).",
        "source": "bird_question_995",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T4.location = 'Monte-Carlo'",
        "error_sql": " SELECT AVG(points) AS average_score FROM results JOIN races ON results.raceId = races.raceId WHERE races.circuitId IN (     SELECT circuitId     FROM circuits     WHERE location = 'Monte-Carlo' ) AND driverId = (     SELECT driverId     FROM drivers     WHERE forename = 'Lewis' AND surname = 'Hamilton' ); ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "187",
        "new_question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and her constructor's name and the id of the race to which he/she first joined.In the database,full name refers to forename+surname; youngest racer = MAX(dob).",
        "source": "bird_question_1002",
        "new_query": "SELECT T1.forename, T1.surname, T1.nationality, T3.raceId, T5.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId INNER JOIN constructorResults AS T4 on T3.raceId = T4.raceId INNER JOIN constructors AS T5 on T4.constructorId = T5.constructorId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "error_sql": " SELECT d.forename || ' ' || d.surname AS full_name,         n.name AS nationality,         c.name AS constructor_name,         r.raceId FROM drivers d JOIN races r ON d.driverId = r.driverId JOIN constructors c ON d.constructorId = c.constructorId JOIN nationalities n ON d.nationality = n.code WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY d.dob ASC LIMIT 1; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such table: nationalities",
            "error_type": [
                "OperationalError",
                "no such table"
            ]
        }
    },
    {
        "id": "188",
        "new_question": "How many accidents did the driver who had the highest number accidents in the circuit Fuji Speedway have?",
        "source": "bird_question_1003",
        "new_query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T3.statusId = 3 AND T4.name = 'Fuji Speedway' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "error_sql": "   SELECT COUNT(*) AS accidents_count FROM (     SELECT driverId, COUNT(status) AS accidents_count     FROM results     JOIN races ON results.raceId = races.raceId     WHERE races.circuitId = (SELECT circuitId FROM circuits WHERE name = 'Fuji Speedway') AND status = 'Accident'     GROUP BY driverId     ORDER BY accidents_count DESC     LIMIT 1 ) AS t; ",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: status",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "189",
        "new_question": "Please provide name of events for members who have paid more than 50 dollar.In the database,have paid more than 50 dollar refers to cost > 50.",
        "source": "bird_question_1436",
        "new_query": "SELECT DISTINCT T4.event_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event as T4 ON T3.link_to_event = T4.event_id WHERE T1.cost > 50",
        "error_sql": "   SELECT event_name FROM event JOIN attendance ON event.event_id = attendance.link_to_event JOIN member ON attendance.link_to_member = member.member_id WHERE cost > 50; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: cost",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "190",
        "new_question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event, provide the major name of him. In the database,approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'.",
        "source": "bird_question_1437",
        "new_query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event, T4.major_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN major as T4 on T2.link_to_major = T4.major_id WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "error_sql": "   SELECT m.first_name, m.last_name, m.email, m.position, m.t_shirt_size, m.phone, m.zip, m.link_to_major, e.event_id, e.event_name, e.event_date, e.type, e.notes, e.location, e.status, mj.major_name FROM member m JOIN attendance a ON m.member_id = a.link_to_member JOIN event e ON a.link_to_event = e.event_id JOIN major mj ON m.link_to_major = mj.major_id JOIN expense ex ON m.member_id = ex.link_to_member WHERE ex.approved = 'true' AND ex.expense_date BETWEEN '2019-01-10' AND '2019-11-19'; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Excessive Tables"
            ]
        }
    },
    {
        "id": "191",
        "new_question": "What is the name and major of members who had to spend more than a hundred dollars on an expense? which county does his/her from?",
        "source": "bird_question_1449",
        "new_query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name, T4.county FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN zip_code AS T4 on T1.zip = T4.zip_code WHERE T3.cost > 100",
        "error_sql": "   SELECT m.first_name, m.last_name, m.major, zc.county FROM member m JOIN expense e ON m.member_id = e.link_to_member JOIN zip_code zc ON m.zip = zc.zip_code WHERE e.cost > 100; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: m.major",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "192",
        "new_question": "For events with less than average parking cost, list the events name and the link to their member.In the database,less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'.",
        "source": "bird_question_1453",
        "new_query": "SELECT T1.event_name, T4.link_to_member FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN attendance as T4 on T1.event_id = T4.link_to_event WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "error_sql": "   SELECT event_name, link_to_member FROM event JOIN budget ON event.event_id = budget.link_to_event WHERE category = 'Parking' AND cost < (SELECT SUM(cost) / COUNT(event_id) FROM budget WHERE category = 'Parking'); ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: link_to_member",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "193",
        "new_question": "List the full name and the major name of the top five members who spend the most money in the descending order of spending.",
        "source": "bird_question_1456",
        "new_query": "SELECT T3.first_name, T3.last_name, T4.major_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id INNER JOIN major as T4 on T3.link_to_major = T4.major_id ORDER BY T2.spent DESC LIMIT 5",
        "error_sql": "   WITH expense_sum AS (     SELECT link_to_member, SUM(cost) AS total_spent     FROM expense     GROUP BY link_to_member ), top_five AS (     SELECT *     FROM expense_sum     ORDER BY total_spent DESC     LIMIT 5 ) SELECT m.first_name, m.last_name, m.link_to_major, mj.major_name FROM top_five t JOIN member m ON t.link_to_member = m.member_id JOIN major mj ON m.link_to_major = mj.major_id; ",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Incorrect Tables"
            ]
        }
    },
    {
        "id": "195",
        "new_question": "How many female accounts in the south Bohemia region are eligible for loans?In the database, A3 contains the data of region.",
        "source": "bird_question_90",
        "new_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'south Bohemia' AND T3.district_id = ( SELECT district_id FROM client WHERE gender = 'F')",
        "error_sql": " SELECT COUNT(DISTINCT account_id) AS female_accounts_eligible_for_loans FROM client c JOIN account a ON c.client_id = a.client_id WHERE c.gender = 'F' AND a.district_id IN (SELECT district_id FROM district WHERE A3 = 'South Bohemia') AND a.frequency > 0; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: a.client_id",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "196",
        "new_question": "When is the birthday of a client who applied 98832 USD loan in East Bohemia in 1996/1/3?",
        "source": "bird_question_113",
        "new_query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832 AND T3.district_id = (SELECT district_id FROM district WHERE A3 = 'east Bohemia' )",
        "error_sql": "   SELECT client.birth_date FROM client JOIN loan ON client.client_id = loan.account_id WHERE client.district_id = 'East Bohemia' AND loan.amount = 98832 AND loan.date = '1996/01/03'; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "execute error",
            "error_type": [
                "Table Query Error",
                "Missing Tables"
            ]
        }
    },
    {
        "id": "197",
        "new_question": "State the district and type of loan ID '4990'.In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "new_query": "SELECT T2.A2, T2.A3, T4.'type'  FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.account_id = T4.account_id INNER JOIN loan AS T3 ON T4.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "error_sql": "   SELECT DISTRICT.A2, LOAN.type FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE loan.loan_id = '4990'; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: LOAN.type",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    },
    {
        "id": "199",
        "new_question": "List the loan ID, bank, district and average salary loan with duration of 60 months.In the database, A3 refers to regions; A11 refers to average salary.",
        "source": "bird_question_124",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11, T4.bank_to FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN 'order' AS T4 ON T4.account_id = T1.account_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "error_sql": "   SELECT loan_id, bank, district_id, AVG(amount) AS average_salary_loan FROM loan JOIN account ON loan.account_id = account.account_id JOIN district ON account.district_id = district.district_id WHERE duration = 60 GROUP BY loan_id, bank, district_id; ",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "error_info": {
            "error_return": "sqlite3.OperationalError: no such column: bank",
            "error_type": [
                "OperationalError",
                "no such column"
            ]
        }
    }
]