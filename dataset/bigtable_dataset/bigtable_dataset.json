[
    {
        "id": "0",
        "question": "What is the short name of the football Team Queens Park Rangers?",
        "new_question": "What is the short name and fifa ID for Queens Park Rangers Football Team?In the database, short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';fifa ID refers to team_fifa_api_id.",
        "source": "bird_question_1043",
        "gt_table": [
            "Team"
        ],
        "query": "SELECT Team_short_name FROM Team WHERE Team_long_name = 'Queens Park Rangers'",
        "new_query": "SELECT Team_short_name, team_fifa_api_id FROM Team WHERE Team_long_name = 'Queens Park Rangers'",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "team",
                "team_fifa_api_id"
            ],
            [
                "team",
                "team_long_name"
            ],
            [
                "team",
                "team_short_name"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "1",
        "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?",
        "new_question": "What is the eligible free rate for K-12 students in Maya Lin School? In the database, eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_0",
        "gt_table": [
            "frpm"
        ],
        "query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`Free Meal Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `School Name` = 'Maya Lin'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "frpm",
                "Free Meal Count (K-12)"
            ],
            [
                "frpm",
                "Enrollment (K-12)"
            ],
            [
                "frpm",
                "School Name"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "2",
        "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "new_question": "Please list the lowest three eligible free rates for K-12 students in continuation schools.In the database, Eligible free rate for K-12 = `Free Meal Count (K-12)` / `Enrollment (K-12)`",
        "source": "bird_question_1",
        "gt_table": [
            "frpm"
        ],
        "query": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
        "new_query": "SELECT `Free Meal Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (K-12)` / `Enrollment (K-12)` IS NOT NULL ORDER BY `Free Meal Count (K-12)` / `Enrollment (K-12)` ASC LIMIT 3",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "frpm",
                "Free Meal Count (K-12)"
            ],
            [
                "frpm",
                "Enrollment (K-12)"
            ],
            [
                "frpm",
                "Educational Option Type"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "3",
        "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?",
        "new_question": "How many schools in Kings offer over 400 free meals but less than 800 free meals to students aged 5-17?",
        "source": "bird_question_21",
        "gt_table": [
            "frpm"
        ],
        "query": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700",
        "new_query": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Kings' AND `Free Meal Count (Ages 5-17)` > 400 AND `Free Meal Count (Ages 5-17)` < 800",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "frpm",
                "cdscode"
            ],
            [
                "frpm",
                "County Name"
            ],
            [
                "frpm",
                "Free Meal Count (Ages 5-17)"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "4",
        "question": "Which school in Contra Costa has the highest number of test takers?",
        "new_question": "Which school in Alameda has the highest average math score? In the database, AvgScrMath means average math score.",
        "source": "bird_question_22",
        "gt_table": [
            "satscores"
        ],
        "query": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1",
        "new_query": "SELECT sname FROM satscores WHERE cname = 'Alameda' AND sname IS NOT NULL ORDER BY AvgScrMath DESC LIMIT 1",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "satscores",
                "sname"
            ],
            [
                "satscores",
                "cname"
            ],
            [
                "satscores",
                "avgscrmath"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "5",
        "question": "Which different county has the most number of closed schools? Please provide the name of each school as well as the closure date.",
        "new_question": "Which different county has the highest number of merged schools? Please provide the name of the city where each school is located.In the database, 'Merged' was mentioned in schools.StatusType.",
        "source": "bird_question_49",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT DISTINCT County, School, ClosedDate FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Closed' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Closed' AND school IS NOT NULL",
        "new_query": "SELECT DISTINCT County, School, City FROM schools WHERE County = ( SELECT County FROM schools WHERE StatusType = 'Merged' GROUP BY County ORDER BY COUNT(School) DESC LIMIT 1 ) AND StatusType = 'Merged' AND school IS NOT NULL",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "schools",
                "statustype"
            ],
            [
                "schools",
                "county"
            ],
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "city"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "6",
        "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.",
        "new_question": "Please help me check all the schools managed by Paco Furlan and their cities.",
        "source": "bird_question_54",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'",
        "new_query": "SELECT School, City FROM schools WHERE AdmFName1 = 'Paco' AND AdmLName1 = 'Furlan'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "city"
            ],
            [
                "schools",
                "admfname1"
            ],
            [
                "schools",
                "admlname1"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "7",
        "question": "Of the schools with a mailing state address in California, what is the ratio of the schools located in the county of Colusa against the school located in the county of Humboldt?",
        "new_question": "What is the ratio of the number of closed schools to the number of merged schools in California that have mailing state addresses? In the database, Ratio = count(closed schools) / count(merged schools)",
        "source": "bird_question_55",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT CAST(SUM(CASE WHEN County = 'Colusa' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN County = 'Humboldt' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "new_query": "SELECT CAST(SUM(CASE WHEN StatusType = 'Closed' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN StatusType = 'Merged' THEN 1 ELSE 0 END) FROM schools WHERE MailState = 'CA'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "schools",
                "statustype"
            ],
            [
                "schools",
                "mailstate"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "8",
        "question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin?",
        "new_question": "Of all the schools with a mailing state address in California, how many schools are located in Colusa County? In the database, mailing state address in California means MailState = 'CA'.",
        "source": "bird_question_56",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND MailState = 'CA' AND StatusType = 'Active'",
        "new_query": "SELECT COUNT(CDSCode) FROM schools WHERE County = 'Colusa' AND MailState = 'CA'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "county"
            ],
            [
                "schools",
                "mailstate"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "9",
        "question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.",
        "new_question": "What is the city and website of the school with a postal code of 95203-3704? Please indicate the name of the school.",
        "source": "bird_question_58",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'",
        "new_query": "SELECT City, Website, School FROM schools WHERE Zip = '95203-3704'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "city"
            ],
            [
                "schools",
                "zip"
            ],
            [
                "schools",
                "website"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "10",
        "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?",
        "new_question": "Which city are the schools managed by Mike Larson and Dante Alvarez located in respectively?",
        "source": "bird_question_59",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "new_query": "SELECT City FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "city"
            ],
            [
                "schools",
                "admfname1"
            ],
            [
                "schools",
                "admlname1"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "11",
        "question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs",
        "new_question": "In chartered schools with charter number 0665, what are the names of all the administrators? Including the county where the school is located and the type of school status.In the database, Chartered schools refer to Charter = 1 in the table schools; Full name refers to first name, last name.",
        "source": "bird_question_63",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'",
        "new_query": "SELECT AdmFName1, AdmLName1, County, StatusType FROM schools WHERE Charter = 1 AND CharterNum = '0665'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "statustype"
            ],
            [
                "schools",
                "county"
            ],
            [
                "schools",
                "charter"
            ],
            [
                "schools",
                "charternum"
            ],
            [
                "schools",
                "admfname1"
            ],
            [
                "schools",
                "admlname1"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "12",
        "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?",
        "new_question": "What is the total amount of High School District closure in 1989 in the county of Fresno?",
        "source": "bird_question_67",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'",
        "new_query": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND County = 'Fresno' AND DOCType = 'High School District'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "county"
            ],
            [
                "schools",
                "district"
            ],
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "closeddate"
            ],
            [
                "schools",
                "doctype"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "13",
        "question": "How many active and closed District Community Day Schools are there in the county of Alpine?",
        "new_question": "How many active and merged District Community Day Schools are there in the city of Clovis?",
        "source": "bird_question_70",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Closed' OR StatusType = 'Active') AND County = 'Alpine'",
        "new_query": "SELECT COUNT(School) FROM schools WHERE (StatusType = 'Merged' OR StatusType = 'Active') AND City = 'Clovis'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "statustype"
            ],
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "city"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "14",
        "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.",
        "new_question": "What is the administrator's first name that oversees the school with Charter number 00D8? Indicate the street, the city where the school is situated, and the name of the school.",
        "source": "bird_question_86",
        "gt_table": [
            "schools"
        ],
        "query": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'",
        "new_query": "SELECT AdmFName1, Street, City, School FROM schools WHERE CharterNum = '00D8'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "street"
            ],
            [
                "schools",
                "city"
            ],
            [
                "schools",
                "charternum"
            ],
            [
                "schools",
                "admfname1"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "15",
        "question": "List out the accounts who have the earliest trading date in 1995 ?",
        "new_question": "List the accounts and the transaction amount with the earliest transaction date in 1995?",
        "source": "bird_question_101",
        "gt_table": [
            "trans"
        ],
        "query": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "new_query": "SELECT account_id, amount FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "trans",
                "account_id"
            ],
            [
                "trans",
                "date"
            ],
            [
                "trans",
                "amount"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "16",
        "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "new_question": "How many owner and disponent dispositions are there from client number 20 to client number 30?",
        "source": "bird_question_172",
        "gt_table": [
            "disp"
        ],
        "query": "SELECT SUM(type = 'Owner') , SUM(type = 'Disponent') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "new_query": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE client_id BETWEEN 20 AND 30",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "disp",
                "client_id"
            ],
            [
                "disp",
                "type"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "17",
        "question": "How many triple type bonds are there?",
        "new_question": "How many  triple-bond molecules are there? In the database, triple type bonds refers to bond_type = '#'.",
        "source": "bird_question_202",
        "gt_table": [
            "bond"
        ],
        "query": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
        "new_query": "SELECT COUNT(T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "bond",
                "molecule_id"
            ],
            [
                "bond",
                "bond_type"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "18",
        "question": "In how many atoms is there no bromine?",
        "new_question": "How many molecules is there no bromine? In the database, atoms with no bromine refers to element ! = 'br'.",
        "source": "bird_question_203",
        "gt_table": [
            "atom"
        ],
        "query": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'",
        "new_query": "SELECT COUNT(DISTINCT T.molecule_id) FROM atom AS T WHERE T.element <> 'br'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "atom",
                "molecule_id"
            ],
            [
                "atom",
                "element"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "19",
        "question": "Identify by their ID the molecules in which there is silicon.",
        "new_question": "What molecules contain silicon? In the database, silicon refers to element = 'si'.",
        "source": "bird_question_205",
        "gt_table": [
            "atom"
        ],
        "query": "SELECT T.atom_id FROM atom AS T WHERE T.element = 'si'",
        "new_query": "SELECT T.molecule_id FROM atom AS T WHERE T.element = 'si'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "atom",
                "molecule_id"
            ],
            [
                "atom",
                "element"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "20",
        "question": "What are the atom IDs of the bond TR_000_2_5?",
        "new_question": "What are the bond IDs of the atom TR000_2? In the database, TR000_2 is the atom id.",
        "source": "bird_question_223",
        "gt_table": [
            "connected"
        ],
        "query": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'",
        "new_query": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id = 'TR000_2'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "connected",
                "atom_id"
            ],
            [
                "connected",
                "bond_id"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "21",
        "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?",
        "new_question": "What are the atom IDs that have the same atom ID 2 of TR000_2? In the database, TR000_2 is the atom id; atom ID 2 refers to atom_id2.",
        "source": "bird_question_224",
        "gt_table": [
            "connected"
        ],
        "query": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "new_query": "SELECT T.atom_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "connected",
                "atom_id"
            ],
            [
                "connected",
                "atom_id2"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "22",
        "question": "What is the type of bond that molecule TR000 has when involved in any bonds?",
        "new_question": "What is the ID of bond that molecule TR000 has when involved in any bonds?In the database, ID of bond refers to bond_id; TR000 is the molecule id.",
        "source": "bird_question_229",
        "gt_table": [
            "bond"
        ],
        "query": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "new_query": "SELECT DISTINCT T.bond_id FROM bond AS T WHERE T.molecule_id = 'TR000'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "bond",
                "bond_id"
            ],
            [
                "bond",
                "molecule_id"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "23",
        "question": "How many molecules have a triple bond type?",
        "new_question": "How many bonds have a triple bond type?In the database, triple bond refers to bond_type = '#'.",
        "source": "bird_question_238",
        "gt_table": [
            "bond"
        ],
        "query": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'",
        "new_query": "SELECT COUNT(DISTINCT T.bond_id) FROM bond AS T WHERE T.bond_type = '#'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "bond",
                "bond_id"
            ],
            [
                "bond",
                "bond_type"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "24",
        "question": "List down the molecule id for non carcinogenic molecules.",
        "new_question": "List down the molecule id for carcinogenic molecules.In the database, label = '+' means molecules are carcinogenic.",
        "source": "bird_question_265",
        "gt_table": [
            "molecule"
        ],
        "query": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'",
        "new_query": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '+'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "molecule",
                "molecule_id"
            ],
            [
                "molecule",
                "label"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "25",
        "question": "Give me the molecule ID of the double bond type.",
        "new_question": "Give me the bond ID of the double bond type.In the database, double bond refers to bond_type = ' = '.",
        "source": "bird_question_275",
        "gt_table": [
            "bond"
        ],
        "query": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='",
        "new_query": "SELECT DISTINCT T.bond_id FROM bond AS T WHERE T.bond_type = '='",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "bond",
                "bond_id"
            ],
            [
                "bond",
                "bond_type"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "26",
        "question": "Among all chemical compounds that contain molecule TR047, identify the percent that form a double-bond.",
        "new_question": "Determine the percentage of single bonds formed in all compounds containing the molecule TR013. In the database, TR013 is the molecule id; single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(all bond_id)) as percent where molecule_id = 'TR013'.",
        "source": "bird_question_287",
        "gt_table": [
            "bond"
        ],
        "query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '=' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR047'",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T WHERE T.molecule_id = 'TR013'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "bond",
                "bond_id"
            ],
            [
                "bond",
                "molecule_id"
            ],
            [
                "bond",
                "bond_type"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "27",
        "question": "What are the borderless cards available without powerful foils?",
        "new_question": "How many the black cards available without powerful foils? In the database, 'black' refers to borderColor; poweful foils refers to cardKingdomFoilId paired with cardKingdomId AND cardKingdomId is not null.",
        "source": "bird_question_341",
        "gt_table": [
            "cards"
        ],
        "query": "SELECT id FROM cards WHERE borderColor = 'borderless' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "new_query": "SELECT COUNT(id) FROM cards WHERE borderColor = 'black' AND (cardKingdomId IS NULL OR cardKingdomId IS NULL)",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "bordercolor"
            ],
            [
                "cards",
                "cardkingdomid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "28",
        "question": "List the card names with value that cost more converted mana for the face.",
        "new_question": "List the names and availability of cards that consume more face conversion magic points. In the database, more converted mana for the face refers to Max(faceConvertedManaCost).",
        "source": "bird_question_342",
        "gt_table": [
            "cards"
        ],
        "query": "SELECT name FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "new_query": "SELECT name,availability FROM cards ORDER BY faceConvertedManaCost LIMIT 1",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "availability"
            ],
            [
                "cards",
                "faceconvertedmanacost"
            ],
            [
                "cards",
                "name"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "29",
        "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?",
        "new_question": "List the types and availability of cards painted by artist Aaron Boyd for card art? In the database, 'Aaron Boyd' is artist.",
        "source": "bird_question_354",
        "gt_table": [
            "cards"
        ],
        "query": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'",
        "new_query": "SELECT type,availability FROM cards WHERE artist = 'Aaron Boyd'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "availability"
            ],
            [
                "cards",
                "type"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "30",
        "question": "What is the keyword found on card 'Angel of Mercy'?",
        "new_question": "What is the keyword found on card 'Condemn'? In the database, 'Condemn' is the name of card.",
        "source": "bird_question_355",
        "gt_table": [
            "cards"
        ],
        "query": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'",
        "new_query": "SELECT DISTINCT keywords FROM cards WHERE name = 'Condemn'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "keywords"
            ],
            [
                "cards",
                "name"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "31",
        "question": "How many cards have infinite power?",
        "new_question": "What is the name of a card with infinite power? In the database, infinite power refers to power = '*'.",
        "source": "bird_question_356",
        "gt_table": [
            "cards"
        ],
        "query": "SELECT COUNT(*) FROM cards WHERE power = '*'",
        "new_query": "SELECT name FROM cards WHERE power = '*'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "name"
            ],
            [
                "cards",
                "power"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "32",
        "question": "Lists the set code of all cards translated into Spanish.",
        "new_question": "How many set codes are there for all cards translated into Spanish? In the database, Spanish refer to language; set code refers to setCode.",
        "source": "bird_question_400",
        "gt_table": [
            "set_translations"
        ],
        "query": "SELECT setCode FROM set_translations WHERE language = 'Spanish'",
        "new_query": "SELECT COUNT(setCode) FROM set_translations WHERE language = 'Spanish'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "set_translations",
                "language"
            ],
            [
                "set_translations",
                "setcode"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "33",
        "question": "What is the language of the card with the multiverse number 149934?",
        "new_question": "What is the name of the card with the multiverse number 150317? In the database, multiverse number 150317 refers to multiverseid = 150317.",
        "source": "bird_question_422",
        "gt_table": [
            "foreign_data"
        ],
        "query": "SELECT language FROM foreign_data WHERE multiverseid = 149934",
        "new_query": "SELECT name FROM foreign_data WHERE multiverseid = 150317",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "foreign_data",
                "multiverseid"
            ],
            [
                "foreign_data",
                "name"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "34",
        "question": "Which foreign language used by 'A Pedra Fellwar'?",
        "new_question": "What are the names of card games in French? In the database, French refer to language.",
        "source": "bird_question_440",
        "gt_table": [
            "foreign_data"
        ],
        "query": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'",
        "new_query": "SELECT DISTINCT name FROM foreign_data WHERE language = 'French'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "name"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "35",
        "question": "What is the display name of the user who has the most number of views?",
        "new_question": "What is the website URL of the user who has the most number of views? In the database, user who has the most number of view refers to Max(Views).",
        "source": "bird_question_534",
        "gt_table": [
            "users"
        ],
        "query": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "new_query": "SELECT WebsiteUrl FROM users WHERE Views = ( SELECT MAX(Views) FROM users )",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "users",
                "websiteurl"
            ],
            [
                "users",
                "views"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "36",
        "question": "How many views did the post titled 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer' get?",
        "new_question": "What are the tags on the post titled 'What is normality?'?In the database, 'What is normality?' is the Title of post; tags refers to Tags",
        "source": "bird_question_572",
        "gt_table": [
            "posts"
        ],
        "query": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer'",
        "new_query": "SELECT Tags FROM posts WHERE Title = 'What is normality?'",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "posts",
                "title"
            ],
            [
                "posts",
                "tags"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "37",
        "question": "Write the contents of comments with a score of 17.",
        "new_question": "How many the contents of comments with a score of 10?In the database, score of 10 refers to Score = 10; contents of comments refers to Text.",
        "source": "bird_question_573",
        "gt_table": [
            "comments"
        ],
        "query": "SELECT Text FROM comments WHERE Score = 17",
        "new_query": "SELECT COUNT(Text) FROM comments WHERE Score = 10",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "comments",
                "score"
            ],
            [
                "comments",
                "text"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "38",
        "question": "Which user has the website URL listed at 'http://stackoverflow.com'",
        "new_question": "How many users have visited the website URL listed at 'http://stackoverflow.com'. In the database, 'http://stackoverflow.com' is the WebsiteUrl; user refers to DisplayName.",
        "source": "bird_question_574",
        "gt_table": [
            "users"
        ],
        "query": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "new_query": "SELECT COUNT(DisplayName) FROM users WHERE WebsiteUrl = 'http://stackoverflow.com'",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "users",
                "displayname"
            ],
            [
                "users",
                "websiteurl"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "39",
        "question": "Give the total number of comments posted by user ID 13.",
        "new_question": "What are the comments posted by user ID 37?",
        "source": "bird_question_588",
        "gt_table": [
            "comments"
        ],
        "query": "SELECT COUNT(Id) FROM comments WHERE UserId = 13",
        "new_query": "SELECT Text FROM comments WHERE UserId = 37",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "comments",
                "text"
            ],
            [
                "comments",
                "userid"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "40",
        "question": "How many users obtained the 'Announcer' badge?",
        "new_question": "What is the user ID who has obtained the 'Announcer' badge?In the database, 'Announcer' is the Name of badge; user refers to UserId.",
        "source": "bird_question_605",
        "gt_table": [
            "badges"
        ],
        "query": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'",
        "new_query": "SELECT UserId FROM badges WHERE Name = 'Announcer'",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "badges",
                "userid"
            ],
            [
                "badges",
                "name"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "41",
        "question": "What is the name of user with the ID of 30?",
        "new_question": "What is the age of the user with ID 13?",
        "source": "bird_question_624",
        "gt_table": [
            "users"
        ],
        "query": "SELECT DisplayName FROM users WHERE Id = 30",
        "new_query": "SELECT Age FROM users WHERE Id = 13",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "users",
                "id"
            ],
            [
                "users",
                "age"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "42",
        "question": "How many tags have post count between 5,000 to 7,000?",
        "new_question": "What are the tag names with a number of post count between 5000 and 7000? In the database, post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000.",
        "source": "bird_question_659",
        "gt_table": [
            "tags"
        ],
        "query": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "new_query": "SELECT TagName FROM tags WHERE Count BETWEEN 5000 AND 7000",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "tags",
                "tagname"
            ],
            [
                "tags",
                "count"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "43",
        "question": "Give the publisher ID of Star Trek.",
        "new_question": "How many publishers are there in total?",
        "source": "bird_question_745",
        "gt_table": [
            "publisher"
        ],
        "query": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'",
        "new_query": "SELECT COUNT(*) FROM publisher",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "gold_linked_columns": [],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "44",
        "question": "Who is the tallest superhero?",
        "new_question": "Who is the heaviest superhero? In the database, who refers to superhero_name; heaviest superhero refers to MAX(weight_kg);",
        "source": "bird_question_802",
        "gt_table": [
            "superhero"
        ],
        "query": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1",
        "new_query": "SELECT superhero_name FROM superhero ORDER BY weight_kg DESC LIMIT 1",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "superhero",
                "superhero_name"
            ],
            [
                "superhero",
                "weight_kg"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "45",
        "question": "Which year was the first Singapore Grand Prix?",
        "new_question": "Which years do we have the Singapore Grand Prix?",
        "source": "bird_question_882",
        "gt_table": [
            "races"
        ],
        "query": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
        "new_query": "SELECT year FROM races WHERE name = 'Singapore Grand Prix'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "races",
                "year"
            ],
            [
                "races",
                "name"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "46",
        "question": "How many races were there in 2005? Name all the races in descending order.",
        "new_question": "List the names of the 2009 competitions.",
        "source": "bird_question_883",
        "gt_table": [
            "races"
        ],
        "query": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "new_query": "SELECT name FROM races WHERE year = 2009",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "races",
                "year"
            ],
            [
                "races",
                "name"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "47",
        "question": "What's the location coordinates of Silverstone Circuit?",
        "new_question": "What is the location of Bahrain International Circuit?",
        "source": "bird_question_910",
        "gt_table": [
            "circuits"
        ],
        "query": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "new_query": "SELECT location FROM circuits WHERE name = 'Bahrain International Circuit'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "circuits",
                "name"
            ],
            [
                "circuits",
                "location"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "48",
        "question": "How many driver participated in race ID number 18?",
        "new_question": "List the driver IDs for position number 1.",
        "source": "bird_question_966",
        "gt_table": [
            "driverStandings"
        ],
        "query": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
        "new_query": "SELECT driverId FROM driverStandings WHERE position = 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "driverstandings",
                "driverid"
            ],
            [
                "driverstandings",
                "position"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "49",
        "question": "What is the height of the tallest player? Indicate his name.",
        "new_question": "What is the height of the tallest player? Indicate his name and api id.In the database, tallest player refers to MAX(height).",
        "source": "bird_question_1021",
        "gt_table": [
            "Player"
        ],
        "query": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1",
        "new_query": "SELECT player_name, player_api_id FROM Player ORDER BY height DESC LIMIT 1",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "player",
                "player_api_id"
            ],
            [
                "player",
                "player_name"
            ],
            [
                "player",
                "height"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "50",
        "question": "Please list the lowest three eligible free rates for students aged 5-17 in continuation schools.",
        "new_question": "Please list the mailing address of all the charter schools in Livermore Valley Joint Unified.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm.",
        "source": "bird_question_2",
        "gt_table": [
            "frpm",
            "schools"
        ],
        "query": "SELECT `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` FROM frpm WHERE `Educational Option Type` = 'Continuation School' AND `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` IS NOT NULL ORDER BY `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)` ASC LIMIT 3",
        "new_query": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Livermore Valley Joint Unified' AND T1.`Charter School (Y/N)` = 1",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "frpm",
                "cdscode"
            ],
            [
                "frpm",
                "District Name"
            ],
            [
                "frpm",
                "Charter School (Y/N)"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "district"
            ],
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "mailstreet"
            ],
            [
                "schools",
                "charter"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "51",
        "question": "What is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?",
        "new_question": "What is the type the school with the highest FRPM count for K-12 students?",
        "source": "bird_question_3",
        "gt_table": [
            "frpm",
            "schools"
        ],
        "query": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "new_query": "SELECT T2.School Type FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "frpm",
                "cdscode"
            ],
            [
                "frpm",
                "FRPM Count (K-12)"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "school"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "52",
        "question": "Please list the phone numbers of the direct charter-funded schools that are opened after 2000/1/1.",
        "new_question": "Please list the phone numbers of the direct charter-funded schools that are opened before 1985/1/1.In the database, Charter schools refers to `Charter School (Y/N)` = 1 in the frpm.",
        "source": "bird_question_4",
        "gt_table": [
            "frpm",
            "schools"
        ],
        "query": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate > '2000-01-01'",
        "new_query": "SELECT T2.Phone FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`Charter School (Y/N)` = 1 AND T2.OpenDate < '1985-01-01'",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "frpm",
                "cdscode"
            ],
            [
                "frpm",
                "Charter Funding Type"
            ],
            [
                "frpm",
                "Charter School (Y/N)"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "phone"
            ],
            [
                "schools",
                "opendate"
            ],
            [
                "schools",
                "charter"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "53",
        "question": "How many schools with an average score in Math under 400 in the SAT test are exclusively virtual?",
        "new_question": "Please list the schools with an average score in Write above 450 in the SAT test are exclusively virtual?In the database, Exclusively virtual refers to Virtual = 'F'.",
        "source": "bird_question_5",
        "gt_table": [
            "satscores",
            "schools"
        ],
        "query": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath < 400",
        "new_query": "SELECT DISTINCT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrWrite > 450",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "avgscrwrite"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "virtual"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "54",
        "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.",
        "new_question": "Among the schools with the SAT test takers of over 400, what is the number of schools that are magnet schools or offer a magnet program.In the database, Magnet schools or offer a magnet program means that Magnet = 1.",
        "source": "bird_question_6",
        "gt_table": [
            "satscores",
            "schools"
        ],
        "query": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500",
        "new_query": "SELECT COUNT(T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 400",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "numtsttakr"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "school"
            ],
            [
                "schools",
                "magnet"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "55",
        "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?",
        "new_question": "What is the the mailing address of the school that has the highest number of test takers with an SAT score of over 1500?",
        "source": "bird_question_7",
        "gt_table": [
            "satscores",
            "schools"
        ],
        "query": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "new_query": "SELECT T2.MailStreet FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "numge1500"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "mailstreet"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "56",
        "question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?",
        "new_question": "What is the number of SAT test takers of the schools with the highest FRPM count for students aged 5-17?",
        "source": "bird_question_8",
        "gt_table": [
            "satscores",
            "frpm"
        ],
        "query": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )",
        "new_query": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (Ages 5-17)` DESC LIMIT 1 )",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "frpm",
                "cdscode"
            ],
            [
                "frpm",
                "FRPM Count (Ages 5-17)"
            ],
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "numtsttakr"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "57",
        "question": "Among the schools with an SAT excellence rate of over 0.3, what is the highest eligible free rate for students aged 5-17?",
        "new_question": "Among the schools with an SAT excellence rate of over 0.9, what is the lowest eligible free rate for students aged 5-17?In the database, Excellence rate = NumGE1500 / NumTstTakr; Eligible free rates for students aged 5-17 = `Free Meal Count (Ages 5-17)` / `Enrollment (Ages 5-17)`.",
        "source": "bird_question_12",
        "gt_table": [
            "frpm",
            "satscores"
        ],
        "query": "SELECT MAX(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.3",
        "new_query": "SELECT MIN(CAST(T1.`Free Meal Count (Ages 5-17)` AS REAL) / T1.`Enrollment (Ages 5-17)`) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr > 0.9",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "frpm",
                "cdscode"
            ],
            [
                "frpm",
                "Free Meal Count (Ages 5-17)"
            ],
            [
                "frpm",
                "Enrollment (Ages 5-17)"
            ],
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "numtsttakr"
            ],
            [
                "satscores",
                "numge1500"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "58",
        "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.",
        "new_question": "Please list the number of SAT test takers of the schools with the top 3 SAT excellence rate.In the database, Excellence rate = NumGE1500 / NumTstTakr.",
        "source": "bird_question_13",
        "gt_table": [
            "schools",
            "satscores"
        ],
        "query": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "new_query": "SELECT T2.NumTstTakr FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "numtsttakr"
            ],
            [
                "satscores",
                "numge1500"
            ],
            [
                "schools",
                "cdscode"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "59",
        "question": "List the top five schools, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.",
        "new_question": "List the top three schools, by descending order, from the highest to the lowest, the most number of free meal (Ages 5-17). Please give their NCES school identification number.",
        "source": "bird_question_14",
        "gt_table": [
            "schools",
            "frpm"
        ],
        "query": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5",
        "new_query": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Free Meal Count (Ages 5-17)` DESC LIMIT 3",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "frpm",
                "cdscode"
            ],
            [
                "frpm",
                "Free Meal Count (Ages 5-17)"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "ncesschool"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "60",
        "question": "Which active district has the highest average score in Reading?",
        "new_question": "Which active district has the highest average score in Math?",
        "source": "bird_question_15",
        "gt_table": [
            "schools",
            "satscores"
        ],
        "query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1",
        "new_query": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrMath DESC LIMIT 1",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "avgscrmath"
            ],
            [
                "schools",
                "cdscode"
            ],
            [
                "schools",
                "statustype"
            ],
            [
                "schools",
                "district"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "61",
        "question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.",
        "new_question": "What is the number of SAT test takers of the school with the highest number of test takers who received SAT scores of at least 1500?",
        "source": "bird_question_88",
        "gt_table": [
            "satscores",
            "schools"
        ],
        "query": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "new_query": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1",
        "db_id": "california_schools",
        "simplified_ddl": "#frpm(CDSCode, Academic Year, County Code, District Code, School Code, County Name, District Name, School Name, District Type, School Type, Educational Option Type, NSLP Provision Status, Charter School (Y/N), Charter School Number, Charter Funding Type, IRC, Low Grade, High Grade, Enrollment (K-12), Free Meal Count (K-12), Percent (%) Eligible Free (K-12), FRPM Count (K-12), Percent (%) Eligible FRPM (K-12), Enrollment (Ages 5-17), Free Meal Count (Ages 5-17), Percent (%) Eligible Free (Ages 5-17), FRPM Count (Ages 5-17), Percent (%) Eligible FRPM (Ages 5-17), 2013-14 CALPADS Fall 1 Certification Status);\n#satscores(cds, rtype, sname, dname, cname, enroll12, NumTstTakr, AvgScrRead, AvgScrMath, AvgScrWrite, NumGE1500);\n#schools(CDSCode, NCESDist, NCESSchool, StatusType, County, District, School, Street, StreetAbr, City, Zip, State, MailStreet, MailStrAbr, MailCity, MailZip, MailState, Phone, Ext, Website, OpenDate, ClosedDate, Charter, CharterNum, FundingType, DOC, DOCType, SOC, SOCType, EdOpsCode, EdOpsName, EILCode, EILName, GSoffered, GSserved, Virtual, Magnet, Latitude, Longitude, AdmFName1, AdmLName1, AdmEmail1, AdmFName2, AdmLName2, AdmEmail2, AdmFName3, AdmLName3, AdmEmail3, LastUpdate).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "satscores",
                "cds"
            ],
            [
                "satscores",
                "numtsttakr"
            ],
            [
                "satscores",
                "numge1500"
            ],
            [
                "schools",
                "cdscode"
            ]
        ],
        "foreign_key": [
            "frpm(CDSCode) REFERENCES schools(CDSCode)\nsatscores(cds) REFERENCES schools(CDSCode)\n"
        ]
    },
    {
        "id": "62",
        "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?",
        "new_question": "In the carcinogenic molecules, how many contain chlorine atoms?In the database, carcinogenic molecules refers to label = '+'; chlorine atoms refers to element = 'cl'.",
        "source": "bird_question_196",
        "gt_table": [
            "molecule",
            "atom"
        ],
        "query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'",
        "new_query": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '+'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "atom",
                "molecule_id"
            ],
            [
                "atom",
                "element"
            ],
            [
                "molecule",
                "molecule_id"
            ],
            [
                "molecule",
                "label"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "63",
        "question": "Calculate the average number of oxygen atoms in single-bonded molecules.",
        "new_question": "Calculate the max number of hydrogen ygen atoms in single-bonded molecules.In the database, single-bonded molecules refers to bond_type = '-' ; average number of hydrogen ygen atom = AVG(element = 'h').",
        "source": "bird_question_197",
        "gt_table": [
            "atom",
            "bond"
        ],
        "query": "SELECT AVG(oxygen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS oxygen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'o'  GROUP BY T1.molecule_id) AS oxygen_counts",
        "new_query": "SELECT MAX(hydrogen_count) FROM (SELECT T1.molecule_id, COUNT(T1.element) AS hydrogen_count FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id  WHERE T2.bond_type = '-' AND T1.element = 'h'  GROUP BY T1.molecule_id) AS hydrogen_count",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "atom",
                "molecule_id"
            ],
            [
                "atom",
                "element"
            ],
            [
                "bond",
                "molecule_id"
            ],
            [
                "bond",
                "bond_type"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "64",
        "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?",
        "new_question": "In the molecule containing oxygen atoms, how many are carcinogenic?In the database, carcinogenic refers to label = '+'; oxygen atoms refers to element = 'o'.",
        "source": "bird_question_199",
        "gt_table": [
            "atom",
            "molecule"
        ],
        "query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'",
        "new_query": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'",
        "db_id": "toxicology",
        "simplified_ddl": "#atom(atom_id, molecule_id, element);\n#bond(bond_id, molecule_id, bond_type);\n#connected(atom_id, atom_id2, bond_id);\n#molecule(molecule_id, label).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "atom",
                "molecule_id"
            ],
            [
                "atom",
                "element"
            ],
            [
                "molecule",
                "molecule_id"
            ],
            [
                "molecule",
                "label"
            ]
        ],
        "foreign_key": [
            "atom(molecule_id) REFERENCES molecule(molecule_id)\nbond(molecule_id) REFERENCES molecule(molecule_id)\nconnected(bond_id) REFERENCES bond(bond_id)\n"
        ]
    },
    {
        "id": "65",
        "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.",
        "new_question": "Describe the date about rulings for card named 'Sublime Epiphany' with number 74s.In the database, 'Sublime Epiphany' is name of cards; number 74s refers to number = '74s'.",
        "source": "bird_question_348",
        "gt_table": [
            "cards",
            "rulings"
        ],
        "query": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "new_query": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74s'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "name"
            ],
            [
                "cards",
                "number"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "rulings",
                "date"
            ],
            [
                "rulings",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "66",
        "question": "Name the card and artist with the most ruling information. Also state if the card is a promotional printing.",
        "new_question": "Name the card and artist with the most ruling information. Also state the border color of card.In the database, with the most ruling information refers to Max(count(rulings.uuid)).",
        "source": "bird_question_349",
        "gt_table": [
            "cards",
            "rulings"
        ],
        "query": "SELECT T1.name, T1.artist, T1.isPromo FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.artist ORDER BY COUNT(DISTINCT T1.uuid) DESC LIMIT 1",
        "new_query": "SELECT T1.name, T1.artist, T1.borderColor FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.isPromo = 1 GROUP BY T1.artist ORDER BY COUNT(DISTINCT T1.uuid) DESC LIMIT 1",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "bordercolor"
            ],
            [
                "cards",
                "ispromo"
            ],
            [
                "cards",
                "name"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "rulings",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "67",
        "question": "State the alternative languages available for card named Annul numbered 29.",
        "new_question": "State the type for card named Annul numbered 29.In the database, Annul refers to name = 'Annul'; numbered 29 refers to number = '29'.",
        "source": "bird_question_350",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "new_query": "SELECT T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "name"
            ],
            [
                "cards",
                "number"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "type"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "68",
        "question": "Name all the cards which have alternative language in Japanese.",
        "new_question": "How many cards which have alternative language in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_351",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "new_query": "SELECT COUNT(*) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "69",
        "question": "Calculate the percentage of the cards availabe in Chinese Simplified.",
        "new_question": "Calculate the percentage of the cards availabe in Japanese.In the database, 'Japanese' is the language; percentage = Divide(Sum(id where language = 'Japanese'), Count(id)) *100.",
        "source": "bird_question_352",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Chinese Simplified' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "new_query": "SELECT CAST(SUM(CASE WHEN T2.language = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "70",
        "question": "List all the sets available in Italian translation. State the total number of cards per set.",
        "new_question": "List all the sets available in Italian translation. State the type of cards per set.In the database, Italian translation refers to language = 'Italian'.",
        "source": "bird_question_353",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "new_query": "SELECT T1.name, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "name"
            ],
            [
                "sets",
                "type"
            ],
            [
                "set_translations",
                "language"
            ],
            [
                "set_translations",
                "setcode"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "71",
        "question": "cards are not directly linked to language but through table 'set'. you need to add set in covered table & rephrase your question\nWhat are the languages available for the set that card 'Angel of Mercy' is in?",
        "new_question": "What are the translation for the set that card 'Angel of Mercy' is in?In the database, 'Angel of Mercy' is the name of card.",
        "source": "bird_question_360",
        "gt_table": [
            "set_translations",
            "cards"
        ],
        "query": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "new_query": "SELECT translation FROM set_translations WHERE id IN ( SELECT id FROM cards WHERE name = 'Angel of Mercy' )",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "name"
            ],
            [
                "set_translations",
                "id"
            ],
            [
                "set_translations",
                "translation"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "72",
        "question": "What is the status of card \"Cloudchaser Eagle\"?",
        "new_question": "What is the format of card 'Cloudchaser Eagle'?In the database, 'Cloudchaser Eagle' is the name of card.",
        "source": "bird_question_364",
        "gt_table": [
            "cards",
            "legalities"
        ],
        "query": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "new_query": "SELECT DISTINCT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "name"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "legalities",
                "format"
            ],
            [
                "legalities",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "73",
        "question": "List down the name of artists for cards in Chinese Simplified.",
        "new_question": "List down the name of artists for cards in Japanese.In the database, 'Japanese' is the language.",
        "source": "bird_question_381",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'",
        "new_query": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "74",
        "question": "What are the cards that only available in paper and Japanese language?",
        "new_question": "List down the count of artists for cards that only available in paper and Japanese language?In the database, available in paper refers to availability = 'paper'; 'Japanese' is the language.",
        "source": "bird_question_382",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "new_query": "SELECT COUNT(T1.artist) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "availability"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "75",
        "question": "How many cards are having future frame version and what are the legality status of these cards?",
        "new_question": "What are the color of cards that have future frame version and what are the legality status of these cards?In the database, future frame version refers to frameVersion = 'future'.",
        "source": "bird_question_386",
        "gt_table": [
            "cards",
            "legalities"
        ],
        "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "new_query": "SELECT colors FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "colors"
            ],
            [
                "cards",
                "frameversion"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "legalities",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "76",
        "question": "What are the cards for set OGW? State the colour for these cards.",
        "new_question": "What are the cards for set OGW? State the artist for these cards.In the database, set OGW refers to setCode = 'OGW'.",
        "source": "bird_question_387",
        "gt_table": [
            "cards",
            "set_translations"
        ],
        "query": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "new_query": "SELECT id, artist FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "artist"
            ],
            [
                "set_translations",
                "id"
            ],
            [
                "set_translations",
                "setcode"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "77",
        "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?",
        "new_question": "What are the cards in set 10E with converted mana of 5 have translation and what are the translation?In the database, set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5.",
        "source": "bird_question_388",
        "gt_table": [
            "set_translations",
            "cards"
        ],
        "query": "SELECT id, language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "new_query": "SELECT id, translation FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "convertedmanacost"
            ],
            [
                "set_translations",
                "id"
            ],
            [
                "set_translations",
                "setcode"
            ],
            [
                "set_translations",
                "translation"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "78",
        "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.",
        "new_question": "List down the name of cards with original types of Creature - Elf and the information of rulings for these cards.In the database, Creature - Elf is the originalType.",
        "source": "bird_question_389",
        "gt_table": [
            "cards",
            "rulings"
        ],
        "query": "SELECT T1.id, T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "new_query": "SELECT T1.id, T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "originaltype"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "rulings",
                "text"
            ],
            [
                "rulings",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "79",
        "question": "What are the colors of cards from ID 1-20? What are the format of these cards?",
        "new_question": "What are the border color text of cards from ID 1-20? What are the format of these cards?In the database, ID 1-20 refers to id BETWEEN 1 AND 20.",
        "source": "bird_question_390",
        "gt_table": [
            "cards",
            "legalities"
        ],
        "query": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "new_query": "SELECT T1.borderColor, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "bordercolor"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "legalities",
                "format"
            ],
            [
                "legalities",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "80",
        "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.",
        "new_question": "Pick 3 cards with rarity of uncommon, list down the artists for these cards according to ascending order of it's ruling date.In the database, uncommon refers to rarity = 'uncommon'.",
        "source": "bird_question_392",
        "gt_table": [
            "cards",
            "rulings"
        ],
        "query": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "rarity"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "rulings",
                "date"
            ],
            [
                "rulings",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "81",
        "question": "Lists all types of cards in German.",
        "new_question": "Lists availability of cards in German.In the database, German refer to language; availability refer to the availability where subtypes is not null AND supertypes is not null",
        "source": "bird_question_407",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "new_query": "SELECT T1.availability FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.subtypes IS NOT NULL AND T1.supertypes IS NOT NULL",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "cards",
                "availability"
            ],
            [
                "cards",
                "subtypes"
            ],
            [
                "cards",
                "supertypes"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "82",
        "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.",
        "new_question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its all types.In the database, available in paper refers to availability = 'paper'.",
        "source": "bird_question_410",
        "gt_table": [
            "cards",
            "legalities"
        ],
        "query": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "new_query": "SELECT T1.subtypes, T1.supertypes FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "availability"
            ],
            [
                "cards",
                "subtypes"
            ],
            [
                "cards",
                "supertypes"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "legalities",
                "format"
            ],
            [
                "legalities",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "83",
        "question": "What is the foreign name of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?",
        "new_question": "What is the foreign text of the card in French of type Creature, normal layout and black border color, by artist Matthew D. Wilson?In the database, in French refers to language = 'French'; black border color refers to borderColor = 'black'.",
        "source": "bird_question_412",
        "gt_table": [
            "foreign_data",
            "cards"
        ],
        "query": "SELECT name FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "new_query": "SELECT text FROM foreign_data WHERE uuid IN ( SELECT uuid FROM cards WHERE types = 'Creature' AND layout = 'normal' AND borderColor = 'black' AND artist = 'Matthew D. Wilson' ) AND language = 'French'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "bordercolor"
            ],
            [
                "cards",
                "layout"
            ],
            [
                "cards",
                "types"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "text"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "84",
        "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?",
        "new_question": "What translation is the set of 180 cards that belongs to the Ravnica block translated into?In the database, set of 180 cards refers to baseSetSize = 180.",
        "source": "bird_question_414",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "new_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "basesetsize"
            ],
            [
                "sets",
                "block"
            ],
            [
                "sets",
                "code"
            ],
            [
                "set_translations",
                "setcode"
            ],
            [
                "set_translations",
                "translation"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "85",
        "question": "What is the name of set number 5 and its translation?",
        "new_question": "What is the code of set number 5 and its translation?In the database, set number 5 refers to id = 5.",
        "source": "bird_question_428",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "new_query": "SELECT T1.code, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "name"
            ],
            [
                "set_translations",
                "id"
            ],
            [
                "set_translations",
                "setcode"
            ],
            [
                "set_translations",
                "translation"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "86",
        "question": "What is the language and expansion type of set number 206?",
        "new_question": "What is the translation and expansion type of set number 206?In the database, set number 206 refers to id = 206.",
        "source": "bird_question_429",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
        "new_query": "SELECT T2.translation, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "type"
            ],
            [
                "set_translations",
                "id"
            ],
            [
                "set_translations",
                "setcode"
            ],
            [
                "set_translations",
                "translation"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "87",
        "question": "Please list top two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "new_question": "Please list top two sets of cards with their release date that have Italian-language cards and are located in the Shadowmoor block in alphabetical order.",
        "source": "bird_question_430",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' ORDER BY T1.id LIMIT 2",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "id"
            ],
            [
                "sets",
                "block"
            ],
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "name"
            ],
            [
                "sets",
                "releasedate"
            ],
            [
                "set_translations",
                "language"
            ],
            [
                "set_translations",
                "setcode"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "88",
        "question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set ID in your response.",
        "new_question": "Which set is not available outside of the United States and has foil cards with Japanese writing on them? Please include the set release date in your response.In the database, available outside of the United States refers to isForeignOnly = 1; has foil cards refers to isFoilOnly = 1; with Japanese writing on them refers to language = 'Japanese'.",
        "source": "bird_question_431",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T1.name, T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "new_query": "SELECT T1.name, T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Japanese' AND T1.isFoilOnly = 1 AND T1.isForeignOnly = 0",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "isfoilonly"
            ],
            [
                "sets",
                "isforeignonly"
            ],
            [
                "sets",
                "name"
            ],
            [
                "sets",
                "releasedate"
            ],
            [
                "set_translations",
                "language"
            ],
            [
                "set_translations",
                "setcode"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "89",
        "question": "State the set code of the set with release date of 07/13/2007?",
        "new_question": "State the name of the set with release date of 07/13/2007?",
        "source": "bird_question_441",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "new_query": "SELECT T1.name FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "name"
            ],
            [
                "sets",
                "releasedate"
            ],
            [
                "set_translations",
                "setcode"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "90",
        "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".",
        "new_question": "Mention the base set size and translation of the set that was in block named 'Masques' and 'Mirage'.",
        "source": "bird_question_442",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
        "new_query": "SELECT DISTINCT T1.baseSetSize, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "basesetsize"
            ],
            [
                "sets",
                "block"
            ],
            [
                "sets",
                "code"
            ],
            [
                "set_translations",
                "setcode"
            ],
            [
                "set_translations",
                "translation"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "91",
        "question": "Give the code of sets have expansion type of 'expansion'?",
        "new_question": "Give the code of sets have expansion type of 'box'?In the database, code of sets refers to setCode.",
        "source": "bird_question_443",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode",
        "new_query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'box' GROUP BY T2.setCode",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "type"
            ],
            [
                "set_translations",
                "setcode"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "92",
        "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.",
        "new_question": "Name the artist for the card that has boros watermark? List out the type of this card.",
        "source": "bird_question_444",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "new_query": "SELECT DISTINCT T1.artist, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "type"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "cards",
                "watermark"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "93",
        "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.",
        "new_question": "What is the language and type of the card that has colorpie watermark? List out the type of this card.",
        "source": "bird_question_445",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "new_query": "SELECT DISTINCT T2.language, T2.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "uuid"
            ],
            [
                "cards",
                "watermark"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "type"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "94",
        "question": "Give the code of sets have expansion commander type?",
        "new_question": "Give the translation of sets have expansion commander type?In the database, translation of sets refers to translation.",
        "source": "bird_question_447",
        "gt_table": [
            "sets",
            "set_translations"
        ],
        "query": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "new_query": "SELECT T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "type"
            ],
            [
                "set_translations",
                "setcode"
            ],
            [
                "set_translations",
                "translation"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "95",
        "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.",
        "new_question": "Name the foreign name of the card that has abzan watermark? List out the artist of this card.",
        "source": "bird_question_448",
        "gt_table": [
            "cards",
            "foreign_data"
        ],
        "query": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "new_query": "SELECT DISTINCT T1.name, T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "name"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "cards",
                "watermark"
            ],
            [
                "foreign_data",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "96",
        "question": "For the owner user of post No. 65041, what is his/her reputation points?",
        "new_question": "For the owner user of post No. 65041, what is his/her last access date?In the database, post No. 65041 refers to Id = '65041'; last access date refers to LastAccessDate.",
        "source": "bird_question_566",
        "gt_table": [
            "users",
            "posts"
        ],
        "query": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
        "new_query": "SELECT T1.LastAccessDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "posts",
                "id"
            ],
            [
                "posts",
                "owneruserid"
            ],
            [
                "users",
                "id"
            ],
            [
                "users",
                "lastaccessdate"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "97",
        "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?",
        "new_question": "For the user whose display name is 'DatEpicCoderGuyWhoPrograms', what is his/her badge's user id?In the database, 'DatEpicCoderGuyWhoPrograms' is the DisplayName.",
        "source": "bird_question_570",
        "gt_table": [
            "users",
            "badges"
        ],
        "query": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "new_query": "SELECT T2.UserId FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "badges",
                "userid"
            ],
            [
                "users",
                "id"
            ],
            [
                "users",
                "displayname"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "98",
        "question": "What is the attacking work rate of the football playerr Franco Zennaro?",
        "new_question": "What is the overall rating of the football player Franco Zennaro?",
        "source": "bird_question_1045",
        "gt_table": [
            "Player",
            "Player_Attributes"
        ],
        "query": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "new_query": "SELECT DISTINCT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "player_attributes",
                "player_api_id"
            ],
            [
                "player_attributes",
                "overall_rating"
            ],
            [
                "player",
                "player_api_id"
            ],
            [
                "player",
                "player_name"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "99",
        "question": "Which of these players performs the best in crossing actions, Alexis, Ariel Borysiuk or Arouna Kone?",
        "new_question": "Which of these players performs the best in heading accuracy, Alexis, Ariel Borysiuk or Arouna Kone? List the corresponding values.",
        "source": "bird_question_1085",
        "gt_table": [
            "Player",
            "Player_Attributes"
        ],
        "query": "SELECT t1.player_name, t2.crossing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "new_query": "SELECT t1.player_name, t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name IN ('Alexis', 'Ariel Borysiuk', 'Arouna Kone') ORDER BY t2.crossing DESC LIMIT 1",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "player_attributes",
                "player_api_id"
            ],
            [
                "player_attributes",
                "crossing"
            ],
            [
                "player_attributes",
                "heading_accuracy"
            ],
            [
                "player",
                "player_api_id"
            ],
            [
                "player",
                "player_name"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "100",
        "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
        "new_question": "Which client possesses a gold type card, give his/her client id.",
        "source": "bird_question_103",
        "gt_table": [
            "client",
            "disp",
            "card"
        ],
        "query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "new_query": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "card",
                "disp_id"
            ],
            [
                "card",
                "type"
            ],
            [
                "client",
                "client_id"
            ],
            [
                "disp",
                "disp_id"
            ],
            [
                "disp",
                "client_id"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "101",
        "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
        "new_question": "For the client who applied 98832 USD loan in 1996/1/3, what was his/her district_id?",
        "source": "bird_question_113",
        "gt_table": [
            "loan",
            "account",
            "client"
        ],
        "query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "new_query": "SELECT T3.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "date"
            ],
            [
                "loan",
                "amount"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "102",
        "question": "State the district and region for loan ID '4990'.",
        "new_question": "State the district and region for loan ID with status A. In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "gt_table": [
            "account",
            "district",
            "loan"
        ],
        "query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "new_query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status = 'A'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a2"
            ],
            [
                "district",
                "a3"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "status"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "103",
        "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
        "new_question": "Provide the account ID, district and region for loan duration greater than 24 months. In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "gt_table": [
            "account",
            "district",
            "loan"
        ],
        "query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "new_query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration > 24",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a2"
            ],
            [
                "district",
                "a3"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "duration"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "104",
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "new_question": "List the loan ID, district and average salary for loan with payments more than USD2,000. In the database, A2 refers to the names of districts, A11 refers to average salary",
        "source": "bird_question_124",
        "gt_table": [
            "account",
            "district",
            "loan"
        ],
        "query": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.payments > 2000",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a2"
            ],
            [
                "district",
                "a11"
            ],
            [
                "loan",
                "loan_id"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "payments"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "105",
        "question": "How many of the account holders in South Bohemia still do not own credit cards?",
        "new_question": "List the client_id of the account holders in South Bohemia that still do not own credit cards. In the database, A3 contains the region names; South Bohemia is one of region names.",
        "source": "bird_question_130",
        "gt_table": [
            "district",
            "client",
            "disp"
        ],
        "query": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "new_query": "SELECT T3.client_id FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "client",
                "client_id"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "disp",
                "client_id"
            ],
            [
                "disp",
                "type"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a3"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "106",
        "question": "What is the average loan amount by male borrowers?",
        "new_question": "When is the latest loan by male borrowers? In the database, Male refers to gender = 'M'",
        "source": "bird_question_132",
        "gt_table": [
            "client",
            "account",
            "loan"
        ],
        "query": "SELECT AVG(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'",
        "new_query": "SELECT MAX(T3.date) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "client",
                "gender"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "date"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "107",
        "question": "Which districts have transactions greater than USS$10,000 in 1997?",
        "new_question": "Which districts have transactions with average balance greater than -30,300 in 1997?",
        "source": "bird_question_141",
        "gt_table": [
            "account",
            "district",
            "trans"
        ],
        "query": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
        "new_query": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING AVG(T3.balance) > -30000",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "trans",
                "account_id"
            ],
            [
                "trans",
                "date"
            ],
            [
                "trans",
                "balance"
            ],
            [
                "trans",
                "account"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "108",
        "question": "What year was account owner number 130 born?",
        "new_question": "What is the gender of account owner number 130?",
        "source": "bird_question_174",
        "gt_table": [
            "client",
            "disp",
            "account"
        ],
        "query": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "new_query": "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "client",
                "client_id"
            ],
            [
                "client",
                "gender"
            ],
            [
                "disp",
                "client_id"
            ],
            [
                "disp",
                "account_id"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "109",
        "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
        "new_question": "Please provide a list of female clients and whose account branch is in East Bohemia, along with their IDs.",
        "source": "bird_question_180",
        "gt_table": [
            "client",
            "district",
            "account"
        ],
        "query": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "new_query": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id WHERE T2.A3 = 'east Bohemia' AND T1.gender = 'F'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "client",
                "client_id"
            ],
            [
                "client",
                "gender"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a3"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "110",
        "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
        "new_question": "Provide the IDs and gender of the client with high level credit card, which is eligible for loans. In the database, when type is gold, the credit card is high-level",
        "source": "bird_question_194",
        "gt_table": [
            "disp",
            "card",
            "client"
        ],
        "query": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "new_query": "SELECT T1.client_id, T3.gender FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "card",
                "disp_id"
            ],
            [
                "card",
                "type"
            ],
            [
                "client",
                "client_id"
            ],
            [
                "client",
                "gender"
            ],
            [
                "disp",
                "disp_id"
            ],
            [
                "disp",
                "client_id"
            ],
            [
                "disp",
                "type"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "111",
        "question": "Lists by ID all Creature-type cards with legal status.",
        "new_question": "Lists the artist of all Creature-type cards with legal status. In the database, legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Creature'.",
        "source": "bird_question_406",
        "gt_table": [
            "cards",
            "rulings",
            "legalities"
        ],
        "query": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "new_query": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "cards",
                "artist"
            ],
            [
                "cards",
                "types"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "legalities",
                "status"
            ],
            [
                "legalities",
                "uuid"
            ],
            [
                "rulings",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "112",
        "question": "Indicates the number of cards with pre-modern format, ruling text 'This is a triggered mana ability' that do not have multiple faces.",
        "new_question": "Indicates the number of cards with Banned status, ruling text 'This is a triggered mana ability' that do not have multiple faces. In the database, do not have multiple faces refers to side IS NULL.",
        "source": "bird_question_409",
        "gt_table": [
            "cards",
            "legalities",
            "rulings"
        ],
        "query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'premodern' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
        "new_query": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN rulings AS T3 ON T1.uuid = T3.uuid WHERE T2.status = 'Banned' AND T3.text = 'This is a triggered mana ability.' AND T1.Side IS NULL",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "cards",
                "id"
            ],
            [
                "cards",
                "side"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "legalities",
                "status"
            ],
            [
                "legalities",
                "uuid"
            ],
            [
                "rulings",
                "text"
            ],
            [
                "rulings",
                "uuid"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "113",
        "question": "Please list the Italian names of the cards in the set Coldsnap with the highest converted mana cost.",
        "new_question": "Please list the Italian names of the cards in the set Coldsnap whose isFullArt is 1. In the database, card set Coldsnap refers to name = 'Coldsnap'; Italian refers to language = 'Italian'.",
        "source": "bird_question_484",
        "gt_table": [
            "foreign_data",
            "cards",
            "sets"
        ],
        "query": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' ORDER BY T2.convertedManaCost DESC LIMIT 1",
        "new_query": "SELECT T2.name FROM foreign_data AS T1 INNER JOIN cards AS T2 ON T2.uuid = T1.uuid INNER JOIN sets AS T3 ON T3.code = T2.setCode WHERE T3.name = 'Coldsnap' AND T1.language = 'Italian' AND T2.isFullArt = 1",
        "db_id": "card_games",
        "simplified_ddl": "#cards(id, artist, asciiName, availability, borderColor, cardKingdomFoilId, cardKingdomId, colorIdentity, colorIndicator, colors, convertedManaCost, duelDeck, edhrecRank, faceConvertedManaCost, faceName, flavorName, flavorText, frameEffects, frameVersion, hand, hasAlternativeDeckLimit, hasContentWarning, hasFoil, hasNonFoil, isAlternative, isFullArt, isOnlineOnly, isOversized, isPromo, isReprint, isReserved, isStarter, isStorySpotlight, isTextless, isTimeshifted, keywords, layout, leadershipSkills, life, loyalty, manaCost, mcmId, mcmMetaId, mtgArenaId, mtgjsonV4Id, mtgoFoilId, mtgoId, multiverseId, name, number, originalReleaseDate, originalText, originalType, otherFaceIds, power, printings, promoTypes, purchaseUrls, rarity, scryfallId, scryfallIllustrationId, scryfallOracleId, setCode, side, subtypes, supertypes, tcgplayerProductId, text, toughness, type, types, uuid, variations, watermark);\n#foreign_data(id, flavorText, language, multiverseid, name, text, type, uuid);\n#legalities(id, format, status, uuid);\n#sets(id, baseSetSize, block, booster, code, isFoilOnly, isForeignOnly, isNonFoilOnly, isOnlineOnly, isPartialPreview, keyruneCode, mcmId, mcmIdExtras, mcmName, mtgoCode, name, parentCode, releaseDate, tcgplayerGroupId, totalSetSize, type);\n#set_translations(id, language, setCode, translation);\n#rulings(id, date, text, uuid).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "cards",
                "isfullart"
            ],
            [
                "cards",
                "name"
            ],
            [
                "cards",
                "setcode"
            ],
            [
                "cards",
                "uuid"
            ],
            [
                "foreign_data",
                "language"
            ],
            [
                "foreign_data",
                "name"
            ],
            [
                "foreign_data",
                "uuid"
            ],
            [
                "sets",
                "code"
            ],
            [
                "sets",
                "name"
            ]
        ],
        "foreign_key": [
            "foreign_data(uuid) REFERENCES cards(uuid)\nlegalities(uuid) REFERENCES cards(uuid)\nset_translations(setCode) REFERENCES sets(code)\nrulings(uuid) REFERENCES cards(uuid)\n"
        ]
    },
    {
        "id": "114",
        "question": "Among posts by Harvey Motulsky and Noah Snyder, which one has higher popularity?",
        "new_question": "Among posts by user with Id 15 and 20, which one has higher popularity? In the database, Higher view count means the post has higher popularity; MAX(SUM(ViewCount)) where DisplayName = 'Harvey Motulsky' OR DisplayName = 'Noah Snyder'",
        "source": "bird_question_634",
        "gt_table": [
            "users",
            "postHistory",
            "posts"
        ],
        "query": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'Harvey Motulsky' OR T1.DisplayName = 'Noah Snyder' GROUP BY T1.DisplayName ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "new_query": "SELECT T1.Id FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.Id = 15 OR T1.Id = 20 GROUP BY T1.Id ORDER BY SUM(T3.ViewCount) DESC LIMIT 1",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "posthistory",
                "postid"
            ],
            [
                "posthistory",
                "userid"
            ],
            [
                "posts",
                "id"
            ],
            [
                "posts",
                "viewcount"
            ],
            [
                "users",
                "id"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "115",
        "question": "How many negative comments did Neil McGuigan get in his posts?",
        "new_question": "How many comments did Neil McGuigan get in his posts after 2010-07-20? In the database, negative comment refers to score < 60; DisplayName = 'Neil McGuigan'",
        "source": "bird_question_636",
        "gt_table": [
            "users",
            "posts",
            "comments"
        ],
        "query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.Score < 60",
        "new_query": "SELECT COUNT(T3.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T2.Id = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T3.CreationDate > '2010-07-20'",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "comments",
                "postid"
            ],
            [
                "comments",
                "creationdate"
            ],
            [
                "posts",
                "id"
            ],
            [
                "posts",
                "owneruserid"
            ],
            [
                "users",
                "id"
            ],
            [
                "users",
                "displayname"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "116",
        "question": "State all the tags used by Mark Meckes in his posts that doesn't have comments.",
        "new_question": "State all the tags used by Mark Meckes in his posts that has at least five answers. In the database, DisplayName = 'Mark Meckes'",
        "source": "bird_question_637",
        "gt_table": [
            "users",
            "postHistory",
            "posts"
        ],
        "query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.CommentCount = 0",
        "new_query": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T3.Id = T2.PostId WHERE T1.DisplayName = 'Mark Meckes' AND T3.AnswerCount >= 5",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "posthistory",
                "postid"
            ],
            [
                "posthistory",
                "userid"
            ],
            [
                "posts",
                "id"
            ],
            [
                "posts",
                "tags"
            ],
            [
                "posts",
                "answercount"
            ],
            [
                "users",
                "id"
            ],
            [
                "users",
                "displayname"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "117",
        "question": "Mention the display name and location of the user who owned the excerpt post with hypothesis-testing tag.",
        "new_question": "Mention the display name and website url of the user who owned the excerpt post with hypothesis-testing tag. In the database, user who owned the excerpt post with hypothesis-testing tag refers to OwnerUserId WHERE TagName = 'hypothesis-testing'",
        "source": "bird_question_654",
        "gt_table": [
            "tags",
            "posts",
            "users"
        ],
        "query": "SELECT T3.DisplayName, T3.Location FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "new_query": "SELECT T3.DisplayName, T3.WebsiteUrl FROM tags AS T1 INNER JOIN posts AS T2 ON T1.ExcerptPostId = T2.Id INNER JOIN users AS T3 ON T3.Id = T2.OwnerUserId WHERE T1.TagName = 'hypothesis-testing'",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "posts",
                "id"
            ],
            [
                "posts",
                "owneruserid"
            ],
            [
                "posts",
                "tags"
            ],
            [
                "tags",
                "tagname"
            ],
            [
                "tags",
                "excerptpostid"
            ],
            [
                "users",
                "id"
            ],
            [
                "users",
                "displayname"
            ],
            [
                "users",
                "websiteurl"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "118",
        "question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who posted it last time.",
        "new_question": "Identify the total views on the post 'Computer Game Datasets'. Name the user who own it. In the database, views refer to ViewCount; Name the user refers to DisplayName; Text = 'Computer Game Datasets'",
        "source": "bird_question_685",
        "gt_table": [
            "postHistory",
            "posts",
            "users"
        ],
        "query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.LastEditorUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "new_query": "SELECT T2.ViewCount, T3.DisplayName FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id INNER JOIN users AS T3 ON T2.OwnerUserId = T3.Id WHERE T1.Text = 'Computer Game Datasets'",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "posthistory",
                "postid"
            ],
            [
                "posthistory",
                "text"
            ],
            [
                "posts",
                "id"
            ],
            [
                "posts",
                "viewcount"
            ],
            [
                "posts",
                "owneruserid"
            ],
            [
                "users",
                "id"
            ],
            [
                "users",
                "displayname"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "119",
        "question": "Among the superheroes with the super power of 'Super Strength', how many of them have a height of over 200cm?",
        "new_question": "Among the superheroes with the super power of 'Super Strength', how many of them have a weight of over 80kg? In the database, super power of \"Super Strength\" refers to power_name = 'Super Strength'; a weight of over 80kg refers to weight_kg > 80",
        "source": "bird_question_719",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.weight_kg > 80",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "weight_kg"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "120",
        "question": "Who is the dumbest superhero?",
        "new_question": "What is the gender of the dumbest superhero? In the database, the dumbest superhero refers to MIN(attribute_value) where attribute_name = 'Intelligence'.",
        "source": "bird_question_736",
        "gt_table": [
            "superhero",
            "hero_attribute",
            "attribute"
        ],
        "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "new_query": "SELECT T1.gender_id FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Intelligence' ORDER BY T2.attribute_value LIMIT 1",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "attribute",
                "id"
            ],
            [
                "attribute",
                "attribute_name"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "hero_attribute",
                "hero_id"
            ],
            [
                "hero_attribute",
                "attribute_id"
            ],
            [
                "hero_attribute",
                "attribute_value"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "121",
        "question": "What are the names of the superheroes with the power of death touch?",
        "new_question": "What are the publisher of the superheroes with the power of death touch? In the database, publisher of the superheroes refers to publisher_id; the power of death touch refers to power_name = 'Death Touch'",
        "source": "bird_question_739",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "new_query": "SELECT T1.publisher_id FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Death Touch'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "publisher_id"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "122",
        "question": "Provide the superpowers of the superhero called Deathlok.",
        "new_question": "Provide the superpowers of the superhero who have a height of over 200cm. In the database, superpowers refers to power_name.",
        "source": "bird_question_749",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower"
        ],
        "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'",
        "new_query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.height_cm > 200",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "height_cm"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "123",
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "new_question": "For the Bahrain Grand Prix with 3 rounds, how many drivers not finished the game? In the database, drivers who finished the race refers to time has records",
        "source": "bird_question_862",
        "gt_table": [
            "races",
            "results",
            "drivers"
        ],
        "query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "new_query": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.round = 3 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "round"
            ],
            [
                "races",
                "name"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "time"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "124",
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "new_question": "What is the nationality of the driver who finished second in the San Marino Grand Prix in 2006? In the database, finished second refers to position = 2.",
        "source": "bird_question_874",
        "gt_table": [
            "races",
            "results",
            "drivers"
        ],
        "query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "new_query": "SELECT T3.nationality FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "nationality"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "name"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "position"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "125",
        "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
        "new_question": "Name all drivers in the 2010 Singapore Grand Prix order by their points.",
        "source": "bird_question_891",
        "gt_table": [
            "races",
            "driverStandings",
            "drivers"
        ],
        "query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
        "new_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.points ASC",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "name"
            ],
            [
                "driverstandings",
                "raceid"
            ],
            [
                "driverstandings",
                "driverid"
            ],
            [
                "driverstandings",
                "points"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "126",
        "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "new_question": "What is the best lap time recorded? List the code of driver and race with such recorded lap time. In the database, the best lap time refers to min(time).",
        "source": "bird_question_894",
        "gt_table": [
            "drivers",
            "lapTimes",
            "races"
        ],
        "query": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "new_query": "SELECT T2.milliseconds, T1.code, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "code"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "name"
            ],
            [
                "laptimes",
                "raceid"
            ],
            [
                "laptimes",
                "driverid"
            ],
            [
                "laptimes",
                "milliseconds"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "127",
        "question": "What is the average lap time for Sebastian Vettel in the 2009 Chinese Grand Prix?",
        "new_question": "What is the average lap time for Sebastian Vettel since 2009?",
        "source": "bird_question_895",
        "gt_table": [
            "races",
            "lapTimes",
            "drivers"
        ],
        "query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Sebastian' AND T3.surname = 'Vettel' AND T1.year = 2009 AND T1.name = 'Chinese GrAND Prix'",
        "new_query": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Sebastian' AND T3.surname = 'Vettel' AND T1.year >= 2009",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "laptimes",
                "raceid"
            ],
            [
                "laptimes",
                "driverid"
            ],
            [
                "laptimes",
                "milliseconds"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "128",
        "question": "Which race was Alex Yoong in when he was in track number less than 10?",
        "new_question": "State the race and date of race in which Alex Yoong was in track number less than 10. In the database, track number less than 10 refers to position < 10.",
        "source": "bird_question_902",
        "gt_table": [
            "races",
            "driverStandings",
            "drivers"
        ],
        "query": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10",
        "new_query": "SELECT T1.name, T1.date FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "name"
            ],
            [
                "races",
                "date"
            ],
            [
                "driverstandings",
                "raceid"
            ],
            [
                "driverstandings",
                "driverid"
            ],
            [
                "driverstandings",
                "position"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "129",
        "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "new_question": "Which was Lewis Hamilton first race? What was his position recorded for his first race event? In the database, first race refers to min(Year).",
        "source": "bird_question_906",
        "gt_table": [
            "races",
            "driverStandings",
            "drivers"
        ],
        "query": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "new_query": "SELECT T1.name, T2.position FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "name"
            ],
            [
                "driverstandings",
                "raceid"
            ],
            [
                "driverstandings",
                "driverid"
            ],
            [
                "driverstandings",
                "position"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "130",
        "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
        "new_question": "Please list the year of Formula_1 races that Lewis Hamilton participated, remove duplicates.",
        "source": "bird_question_929",
        "gt_table": [
            "races",
            "results",
            "drivers"
        ],
        "query": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "new_query": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "131",
        "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
        "new_question": "What was the fastest lap time for Lewis Hamilton in the 2008 Australian Grand Prix?",
        "source": "bird_question_936",
        "gt_table": [
            "results",
            "races",
            "drivers"
        ],
        "query": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "new_query": "SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "name"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "fastestlaptime"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "132",
        "question": "On what year did the youngest driver had his first qualifying race? State the name, date and time of the race.",
        "new_question": "On what year did the youngest driver had his first qualifying race? where can I know more about the race? In the database, youngest driver refers to Max (year(dob)).",
        "source": "bird_question_981",
        "gt_table": [
            "qualifying",
            "drivers",
            "races"
        ],
        "query": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "new_query": "SELECT T3.year, T3.url FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "dob"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "date"
            ],
            [
                "races",
                "url"
            ],
            [
                "qualifying",
                "raceid"
            ],
            [
                "qualifying",
                "driverid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "133",
        "question": "How many American drivers have been disqualified from the race.",
        "new_question": "How many drivers born after 1980-01-01 have been disqualified from the race. In the database, disqualified refers to statusID = 2.",
        "source": "bird_question_982",
        "gt_table": [
            "drivers",
            "results",
            "status"
        ],
        "query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.nationality = 'American'",
        "new_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.dob >= '1980-01-01'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "dob"
            ],
            [
                "status",
                "statusid"
            ],
            [
                "status",
                "status"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "statusid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "134",
        "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "new_question": "What is the average score of Lewis Hamilton among all the races in 2008? In the database, average score = AVG(points)",
        "source": "bird_question_995",
        "gt_table": [
            "drivers",
            "driverStandings",
            "races"
        ],
        "query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.year = 2008",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "driverstandings",
                "raceid"
            ],
            [
                "driverstandings",
                "driverid"
            ],
            [
                "driverstandings",
                "points"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "135",
        "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
        "new_question": "Please list the name and country of the circuits whose lap record is 1:29.488. In the database, lap records means the fastest time recorded which refers to time.",
        "source": "bird_question_1017",
        "gt_table": [
            "lapTimes",
            "races",
            "circuits"
        ],
        "query": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "new_query": "SELECT T3.name, T3.country FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "circuits",
                "circuitid"
            ],
            [
                "circuits",
                "name"
            ],
            [
                "circuits",
                "country"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "circuitid"
            ],
            [
                "laptimes",
                "raceid"
            ],
            [
                "laptimes",
                "time"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "136",
        "question": "State the name of players who came from Belgium.",
        "new_question": "State the birthday of players who came from Belgium. In the database, Belgium is name of country",
        "source": "bird_question_1126",
        "gt_table": [
            "Country",
            "Match",
            "Player"
        ],
        "query": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "new_query": "SELECT t3.birthday FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "player",
                "player_api_id"
            ],
            [
                "player",
                "birthday"
            ],
            [
                "country",
                "id"
            ],
            [
                "country",
                "name"
            ],
            [
                "match",
                "country_id"
            ],
            [
                "match",
                "home_player_1"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "137",
        "question": "Which country's players have the heaviest average weights?",
        "new_question": "Which country's players have the lowest average heights?",
        "source": "bird_question_1128",
        "gt_table": [
            "Country",
            "Match",
            "Player"
        ],
        "query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.weight) DESC LIMIT 1",
        "new_query": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY AVG(t3.height) ASC LIMIT 1",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "player",
                "player_api_id"
            ],
            [
                "player",
                "height"
            ],
            [
                "country",
                "id"
            ],
            [
                "country",
                "name"
            ],
            [
                "match",
                "country_id"
            ],
            [
                "match",
                "home_player_1"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "138",
        "question": "Among the students from the Student_Club who attended the event 'Women's Soccer', how many of them want a T-shirt that's in medium size?",
        "new_question": "List the email of the students from the Student_Club who attended the event 'Women's Soccer', how many of them want a T-shirt that's in medium size? In the database, Women's Soccer is an event name; T-shirt that is in medium size refers to t_shirt_size = 'Medium'",
        "source": "bird_question_1317",
        "gt_table": [
            "event",
            "attendance",
            "member"
        ],
        "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "new_query": "SELECT T3.email FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer' AND T3.t_shirt_size = 'Medium'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "event_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "email"
            ],
            [
                "member",
                "t_shirt_size"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "139",
        "question": "Please list the event names of all the events attended by Maya Mclean.",
        "new_question": "Please list the event type of all the events attended by Maya Mclean.",
        "source": "bird_question_1320",
        "gt_table": [
            "event",
            "attendance",
            "member"
        ],
        "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "new_query": "SELECT DISTINCT T1.type FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Maya' AND T3.last_name = 'Mclean'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "type"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "first_name"
            ],
            [
                "member",
                "last_name"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "140",
        "question": "List all the members who attended the event 'October Meeting'.",
        "new_question": "List all the first name and last name who attended the event 'October Meeting'. In the database, 'October Meeting' is an event name.",
        "source": "bird_question_1366",
        "gt_table": [
            "event",
            "attendance",
            "member"
        ],
        "query": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "new_query": "SELECT T3.first_name, T3.last_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "event_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "first_name"
            ],
            [
                "member",
                "last_name"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "141",
        "question": "Which event has the lowest cost?",
        "new_question": "What type of event has the lowest cost?",
        "source": "bird_question_1389",
        "gt_table": [
            "event",
            "budget",
            "expense"
        ],
        "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "new_query": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "type"
            ],
            [
                "budget",
                "budget_id"
            ],
            [
                "budget",
                "link_to_event"
            ],
            [
                "expense",
                "cost"
            ],
            [
                "expense",
                "link_to_budget"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "142",
        "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
        "new_question": "Please list the segment of the gas stations with transactions taken place in June, 2013. In the database, June 2013 refers to '201306'.",
        "source": "bird_question_1501",
        "gt_table": [
            "transactions_1k",
            "gasstations",
            "yearmonth"
        ],
        "query": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "new_query": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "db_id": "debit_card_specializing",
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "gasstations",
                "gasstationid"
            ],
            [
                "gasstations",
                "segment"
            ],
            [
                "transactions_1k",
                "customerid"
            ],
            [
                "transactions_1k",
                "gasstationid"
            ],
            [
                "yearmonth",
                "customerid"
            ],
            [
                "yearmonth",
                "date"
            ]
        ],
        "foreign_key": [
            "yearmonth(CustomerID) REFERENCES customers(None)\n"
        ]
    },
    {
        "id": "143",
        "question": "Please list the chains of the gas stations with transactions in euro.",
        "new_question": "Please list the chains of the gas stations with transactions comprise customer whose segment is KAM.",
        "source": "bird_question_1502",
        "gt_table": [
            "transactions_1k",
            "customers",
            "gasstations"
        ],
        "query": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'",
        "new_query": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Segment = 'KAM'",
        "db_id": "debit_card_specializing",
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "customers",
                "customerid"
            ],
            [
                "customers",
                "segment"
            ],
            [
                "gasstations",
                "gasstationid"
            ],
            [
                "gasstations",
                "chainid"
            ],
            [
                "transactions_1k",
                "customerid"
            ],
            [
                "transactions_1k",
                "gasstationid"
            ]
        ],
        "foreign_key": [
            "yearmonth(CustomerID) REFERENCES customers(None)\n"
        ]
    },
    {
        "id": "144",
        "question": "What is the amount spent by customer '38508' at the gas stations? How much had the customer spent in January 2012?",
        "new_question": "What is the consumption by customer '38508' at the gas stations? How much had the customer consumed in January 2012? In the database, January 2012 refers '201201' in the table transactions_1k",
        "source": "bird_question_1529",
        "gt_table": [
            "transactions_1k",
            "gasstations",
            "yearmonth"
        ],
        "query": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Segment = '38508'",
        "new_query": "SELECT SUM(T3.Consumption) , SUM(IIF(T3.Date = '201201', T3.Consumption, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '31543' AND T2.GasStationID = '3704'",
        "db_id": "debit_card_specializing",
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "gasstations",
                "gasstationid"
            ],
            [
                "transactions_1k",
                "customerid"
            ],
            [
                "transactions_1k",
                "gasstationid"
            ],
            [
                "yearmonth",
                "customerid"
            ],
            [
                "yearmonth",
                "date"
            ],
            [
                "yearmonth",
                "consumption"
            ]
        ],
        "foreign_key": [
            "yearmonth(CustomerID) REFERENCES customers(None)\n"
        ]
    },
    {
        "id": "145",
        "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
        "new_question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What is his/her Segment? In the database, average price per single item = price / amount",
        "source": "bird_question_1531",
        "gt_table": [
            "customers",
            "transactions_1k",
            "yearmonth"
        ],
        "query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "new_query": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "db_id": "debit_card_specializing",
        "simplified_ddl": "#customers(CustomerID, Segment, Currency);\n#gasstations(GasStationID, ChainID, Country, Segment);\n#products(ProductID, Description);\n#transactions_1k(TransactionID, Date, Time, CustomerID, CardID, GasStationID, ProductID, Amount, Price);\n#yearmonth(CustomerID, Date, Consumption).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "customers",
                "customerid"
            ],
            [
                "customers",
                "segment"
            ],
            [
                "customers",
                "currency"
            ],
            [
                "transactions_1k",
                "customerid"
            ],
            [
                "transactions_1k",
                "amount"
            ],
            [
                "transactions_1k",
                "price"
            ],
            [
                "yearmonth",
                "consumption"
            ]
        ],
        "foreign_key": [
            "yearmonth(CustomerID) REFERENCES customers(None)\n"
        ]
    },
    {
        "id": "146",
        "question": "Please list the phone numbers of the students from the Student_Club that has attended the event 'Women's Soccer'.",
        "new_question": "Please list the zip of the students from the Student_Club that has attended the event 'Women's Soccer'.In the database,Women's Soccer is an event name.",
        "source": "bird_question_1316",
        "gt_table": [
            "event",
            "attendance",
            "member"
        ],
        "query": "SELECT T3.phone FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
        "new_query": "SELECT T3.zip FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'Women''s Soccer'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "event_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "zip"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "147",
        "question": "How many events of the Student_Club did Sacha Harrison attend in 2019?",
        "new_question": "How many events with the status 'Open' of the Student_Club did Sacha Harrison attend?",
        "source": "bird_question_1321",
        "gt_table": [
            "event",
            "attendance",
            "member"
        ],
        "query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND SUBSTR(T1.event_date, 1, 4) = '2019'",
        "new_query": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Sacha' AND T3.last_name = 'Harrison' AND T1.status = 'Open'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "status"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "first_name"
            ],
            [
                "member",
                "last_name"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "148",
        "question": "List the full name of all the members of the Student_Club who attended the 'Laugh Out Loud' event.",
        "new_question": "List the email and the position of all the members of the Student_Club who attended the 'Laugh Out Loud' event. In the database, 'Laugh Out Loud' is an event name;",
        "source": "bird_question_1327",
        "gt_table": [
            "member",
            "attendance",
            "event"
        ],
        "query": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "new_query": "SELECT T1.email, T1.position FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member INNER JOIN event AS T3 ON T2.link_to_event = T3.event_id WHERE T3.event_name = 'Laugh Out Loud'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "event_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "email"
            ],
            [
                "member",
                "position"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "149",
        "question": "Was each expense in October Meeting on October 8, 2019 approved?",
        "new_question": "Was each expense in the event with type 'Meeting' approved? In the database, approved = True means expenses was approved; approved = False means expenses was not approved",
        "source": "bird_question_1338",
        "gt_table": [
            "event",
            "budget",
            "expense"
        ],
        "query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'October Meeting' AND T1.event_date LIKE '2019-10-08%'",
        "new_query": "SELECT T3.approved FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.type = 'Meeting'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "type"
            ],
            [
                "budget",
                "budget_id"
            ],
            [
                "budget",
                "link_to_event"
            ],
            [
                "expense",
                "approved"
            ],
            [
                "expense",
                "link_to_budget"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "150",
        "question": "Who are the female account holders who own credit cards and also have loans?",
        "new_question": "Who are the account holders from district with the id 18 and own credit cards and also have loans?",
        "source": "bird_question_146",
        "gt_table": [
            "client",
            "disp",
            "loan",
            "card"
        ],
        "query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
        "new_query": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.district_id = 18",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "card",
                "disp_id"
            ],
            [
                "client",
                "client_id"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "disp",
                "disp_id"
            ],
            [
                "disp",
                "client_id"
            ],
            [
                "disp",
                "account_id"
            ],
            [
                "loan",
                "account_id"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "151",
        "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
        "new_question": "What is the total amount withdrawals in cash transactions that the client with the id 3356 makes.In the database, operation = 'VYBER' refers to withdrawal in cash.",
        "source": "bird_question_159",
        "gt_table": [
            "client",
            "disp",
            "account",
            "trans"
        ],
        "query": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "new_query": "SELECT SUM(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "client",
                "client_id"
            ],
            [
                "disp",
                "client_id"
            ],
            [
                "disp",
                "account_id"
            ],
            [
                "trans",
                "account_id"
            ],
            [
                "trans",
                "operation"
            ],
            [
                "trans",
                "amount"
            ],
            [
                "trans",
                "account"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "152",
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "new_question": "What was the growth rate of the total amount of loans across all accounts for a client from district with the id 73?",
        "source": "bird_question_169",
        "gt_table": [
            "loan",
            "account",
            "disp",
            "client"
        ],
        "query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "new_query": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.district_id = 73 AND T3.type = 'OWNER'",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "frequency"
            ],
            [
                "client",
                "client_id"
            ],
            [
                "client",
                "gender"
            ],
            [
                "client",
                "birth_date"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "disp",
                "disp_id"
            ],
            [
                "disp",
                "client_id"
            ],
            [
                "disp",
                "account_id"
            ],
            [
                "disp",
                "type"
            ],
            [
                "loan",
                "loan_id"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "date"
            ],
            [
                "loan",
                "amount"
            ],
            [
                "loan",
                "duration"
            ],
            [
                "loan",
                "payments"
            ],
            [
                "loan",
                "status"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "153",
        "question": "How many posts by Matt Parker have more than 4 votes?",
        "new_question": "What is the average score of posts posted by Matt Parker and have more than 4 votes? In the database, more than 4 votes refer to PostId > 4; DisplayName = 'Matt Parker'.",
        "source": "bird_question_635",
        "gt_table": [
            "users",
            "postHistory",
            "posts",
            "votes"
        ],
        "query": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "new_query": "SELECT AVG(T3.Score) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id INNER JOIN votes AS T4 ON T4.PostId = T3.Id WHERE T1.DisplayName = 'Matt Parker' GROUP BY T2.PostId, T4.Id HAVING COUNT(T4.Id) > 4",
        "db_id": "codebase_community",
        "simplified_ddl": "#badges(Id, UserId, Name, Date);\n#comments(Id, PostId, Score, Text, CreationDate, UserId, UserDisplayName);\n#postHistory(Id, PostHistoryTypeId, PostId, RevisionGUID, CreationDate, UserId, Text, Comment, UserDisplayName);\n#postLinks(Id, CreationDate, PostId, RelatedPostId, LinkTypeId);\n#posts(Id, PostTypeId, AcceptedAnswerId, CreaionDate, Score, ViewCount, Body, OwnerUserId, LasActivityDate, Title, Tags, AnswerCount, CommentCount, FavoriteCount, LastEditorUserId, LastEditDate, CommunityOwnedDate, ParentId, ClosedDate, OwnerDisplayName, LastEditorDisplayName);\n#tags(Id, TagName, Count, ExcerptPostId, WikiPostId);\n#users(Id, Reputation, CreationDate, DisplayName, LastAccessDate, WebsiteUrl, Location, AboutMe, Views, UpVotes, DownVotes, AccountId, Age, ProfileImageUrl);\n#votes(Id, PostId, VoteTypeId, CreationDate, UserId, BountyAmount).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "posthistory",
                "postid"
            ],
            [
                "posthistory",
                "userid"
            ],
            [
                "posts",
                "id"
            ],
            [
                "posts",
                "score"
            ],
            [
                "users",
                "id"
            ],
            [
                "users",
                "displayname"
            ],
            [
                "votes",
                "id"
            ],
            [
                "votes",
                "postid"
            ]
        ],
        "foreign_key": [
            "badges(UserId) REFERENCES users(Id)\ncomments(UserId) REFERENCES users(Id)\npostHistory(UserId) REFERENCES users(Id)\npostLinks(RelatedPostId) REFERENCES posts(Id)\nposts(ParentId) REFERENCES posts(Id)\ntags(ExcerptPostId) REFERENCES posts(Id)\nvotes(UserId) REFERENCES users(Id)\n"
        ]
    },
    {
        "id": "154",
        "question": "Among the superheroes with blue eyes, how many of them have the super power of 'Agility'?",
        "new_question": "List the superheroes with blue eyes and have the super power of 'Agility'.In the database, blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; super power of 'Agility' refers to power_name = 'Agility'.",
        "source": "bird_question_723",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower",
            "colour"
        ],
        "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 ON T1.eye_colour_id = T4.id WHERE T3.power_name = 'Agility' AND T4.colour = 'Blue'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "colour",
                "id"
            ],
            [
                "colour",
                "colour"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "superhero_name"
            ],
            [
                "superhero",
                "eye_colour_id"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "155",
        "question": "Among the superheroes from Marvel Comics, what is the percentage of those who have the super power of 'Super Strength'?",
        "new_question": "Among the superheroes from Marvel Comics, How many of them have the super power of 'Super Strength'?In the database, the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; super power of 'Super Strength' refers to power_name = 'Super Strength'.",
        "source": "bird_question_730",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower",
            "publisher"
        ],
        "query": "SELECT CAST(COUNT(CASE WHEN T3.power_name = 'Super Strength' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics'",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN publisher AS T4 ON T1.publisher_id = T4.id WHERE T4.publisher_name = 'Marvel Comics' AND T3.power_name = 'Super Strength'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "publisher",
                "id"
            ],
            [
                "publisher",
                "publisher_name"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "publisher_id"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "156",
        "question": "Which publisher published the slowest superhero?",
        "new_question": "Which publisher published the most intelligent superhero? In the database, the most intelligent superhero refers to attribute_name = 'Intelligence' where MAX(attribute_value).",
        "source": "bird_question_732",
        "gt_table": [
            "superhero",
            "publisher",
            "hero_attribute",
            "attribute"
        ],
        "query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Speed' ORDER BY T3.attribute_value LIMIT 1",
        "new_query": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN hero_attribute AS T3 ON T1.id = T3.hero_id INNER JOIN attribute AS T4 ON T3.attribute_id = T4.id WHERE T4.attribute_name = 'Intelligence' ORDER BY T3.attribute_value DESC LIMIT 1",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "attribute",
                "id"
            ],
            [
                "attribute",
                "attribute_name"
            ],
            [
                "publisher",
                "id"
            ],
            [
                "publisher",
                "publisher_name"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "publisher_id"
            ],
            [
                "hero_attribute",
                "hero_id"
            ],
            [
                "hero_attribute",
                "attribute_id"
            ],
            [
                "hero_attribute",
                "attribute_value"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "157",
        "question": "How many female superheroes have a strength value of 100?",
        "new_question": "How many male superheroes have a intelligence value bigger than 95? In the database, male refers to gender = 'Male';intelligence value bigger than 100 refers to attribute_name = 'Intelligence' AND attribute_value > 95.",
        "source": "bird_question_740",
        "gt_table": [
            "superhero",
            "hero_attribute",
            "attribute",
            "gender"
        ],
        "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Strength' AND T2.attribute_value = 100 AND T4.gender = 'Female'",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.attribute_name = 'Intelligence' AND T2.attribute_value > 95 AND T4.gender = 'Male'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "attribute",
                "id"
            ],
            [
                "attribute",
                "attribute_name"
            ],
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "hero_attribute",
                "hero_id"
            ],
            [
                "hero_attribute",
                "attribute_id"
            ],
            [
                "hero_attribute",
                "attribute_value"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "158",
        "question": "List down at least five superpowers of male superheroes.",
        "new_question": "How many superpowers does female superheroes have? In the database, female refers to gender = 'Female'.",
        "source": "bird_question_751",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower",
            "gender"
        ],
        "query": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Male' LIMIT 5",
        "new_query": "SELECT COUNT(T3.power_name) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id INNER JOIN gender AS T4 ON T4.id = T1.gender_id WHERE T4.gender = 'Female'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "159",
        "question": "Which superhero has the most durability published by Dark Horse Comics?",
        "new_question": "Which superhero has the lowest combat published by Dark Horse Comics? In the database, lowest combat refers to MIN(attribute_value) WHERE attribute_name = 'Combat'.",
        "source": "bird_question_769",
        "gt_table": [
            "superhero",
            "hero_attribute",
            "attribute",
            "publisher"
        ],
        "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Durability' ORDER BY T2.attribute_value DESC LIMIT 1",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T3.id = T2.attribute_id INNER JOIN publisher AS T4 ON T4.id = T1.publisher_id WHERE T4.publisher_name = 'Dark Horse Comics' AND T3.attribute_name = 'Combat' ORDER BY T2.attribute_value ASC LIMIT 1",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "attribute",
                "id"
            ],
            [
                "attribute",
                "attribute_name"
            ],
            [
                "publisher",
                "id"
            ],
            [
                "publisher",
                "publisher_name"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "superhero_name"
            ],
            [
                "superhero",
                "publisher_id"
            ],
            [
                "hero_attribute",
                "hero_id"
            ],
            [
                "hero_attribute",
                "attribute_id"
            ],
            [
                "hero_attribute",
                "attribute_value"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "160",
        "question": "Give the race of the blue-haired male superhero.",
        "new_question": "List the distinct race of the brown-haired male superhero. In the database, brown-haired refers to colour.colour = 'Brown' WHERE hair_colour_id = colour.id; male refers to gender = 'Male'.",
        "source": "bird_question_817",
        "gt_table": [
            "superhero",
            "colour",
            "race",
            "gender"
        ],
        "query": "SELECT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Blue' AND T4.gender = 'Male'",
        "new_query": "SELECT DISTINCT T3.race FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T2.colour = 'Brown' AND T4.gender = 'Male'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "colour",
                "id"
            ],
            [
                "colour",
                "colour"
            ],
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "race",
                "id"
            ],
            [
                "race",
                "race"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "superhero",
                "hair_colour_id"
            ],
            [
                "superhero",
                "race_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "161",
        "question": "Identify the gender of the superhero who has the ability of Phoenix Force.",
        "new_question": "List thr superhero name of female superheroes who has the ability of Phoenix Force. In the database,ability of Phoenix Force refers to power_name = 'Phoenix Force'.",
        "source": "bird_question_825",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower",
            "gender"
        ],
        "query": "SELECT T4.gender FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force'",
        "new_query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN gender AS T4 ON T1.gender_id = T4.id WHERE T3.power_name = 'Phoenix Force' AND T4.gender = 'Female'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "superhero_name"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "162",
        "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
        "new_question": "How many times did Michael Schumacher won from races hosted in the location of Shanghai?In the database, win from races refers to wins=1.",
        "source": "bird_question_903",
        "gt_table": [
            "drivers",
            "driverStandings",
            "races",
            "circuits"
        ],
        "query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
        "new_query": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.location = 'Shanghai'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "circuits",
                "circuitid"
            ],
            [
                "circuits",
                "location"
            ],
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "circuitid"
            ],
            [
                "driverstandings",
                "raceid"
            ],
            [
                "driverstandings",
                "driverid"
            ],
            [
                "driverstandings",
                "wins"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "163",
        "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "new_question": "What is nationality of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?In the database, Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race.",
        "source": "bird_question_1001",
        "gt_table": [
            "qualifying",
            "drivers",
            "races",
            "circuits"
        ],
        "query": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "new_query": "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "circuits",
                "circuitid"
            ],
            [
                "circuits",
                "name"
            ],
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "nationality"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "circuitid"
            ],
            [
                "qualifying",
                "raceid"
            ],
            [
                "qualifying",
                "driverid"
            ],
            [
                "qualifying",
                "q3"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "164",
        "question": "In Scotland Premier League, which away team won the most during the 2010 season?",
        "new_question": "In Scotland Premier League, which away team won the most during the 2010 season and which country do they belong to?In the database,Scotland Premier League refers to League.name = 'Scotland Premier League'; away team refers to away_team_api_id; away team that won the most refers to MAX(SUBTRACT(away_team_goal, home_team_goal) > 0); 2010 season refers to season = '2009/2010';",
        "source": "bird_question_1028",
        "gt_table": [
            "League",
            "Match",
            "Country",
            "Team"
        ],
        "query": "SELECT teamInfo.team_long_name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "new_query": "SELECT teamInfo.team_long_name,country.name FROM League AS leagueData INNER JOIN Match AS matchData ON leagueData.id = matchData.league_id INNER JOIN Country AS country ON country.id = matchData.country_id  INNER JOIN Team AS teamInfo ON matchData.away_team_api_id = teamInfo.team_api_id WHERE leagueData.name = 'Scotland Premier League' AND matchData.season = '2009/2010' AND matchData.away_team_goal - matchData.home_team_goal > 0 GROUP BY matchData.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "League",
                "id"
            ],
            [
                "Match",
                "league_id"
            ],
            [
                "Match",
                "country_id"
            ],
            [
                "Country",
                "id"
            ],
            [
                "Match",
                "away_team_api_id"
            ],
            [
                "Team",
                "team_api_id"
            ],
            [
                "League",
                "name"
            ],
            [
                "Match",
                "season"
            ],
            [
                "Match",
                "away_team_goal"
            ],
            [
                "Match",
                "home_team_goal"
            ],
            [
                "Team",
                "team_long_name"
            ],
            [
                "Country",
                "name"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "165",
        "question": "Locate players with vision scores of 90 and above, state the country of these players.",
        "new_question": "Locate players with crossing scores of 70 and above, state the country of these players.In the database, crossing scores of 70 and above refers to crossing > 69.",
        "source": "bird_question_1127",
        "gt_table": [
            "Player_Attributes",
            "Player",
            "Match",
            "Country"
        ],
        "query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.vision > 89",
        "new_query": "SELECT DISTINCT t4.name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.player_api_id = t2.player_api_id INNER JOIN Match AS t3 ON t2.player_api_id = t3.home_player_8 INNER JOIN Country AS t4 ON t3.country_id = t4.id WHERE t1.crossing > 69",
        "db_id": "european_football_2",
        "simplified_ddl": "#Player_Attributes(id, player_fifa_api_id, player_api_id, date, overall_rating, potential, preferred_foot, attacking_work_rate, defensive_work_rate, crossing, finishing, heading_accuracy, short_passing, volleys, dribbling, curve, free_kick_accuracy, long_passing, ball_control, acceleration, sprint_speed, agility, reactions, balance, shot_power, jumping, stamina, strength, long_shots, aggression, interceptions, positioning, vision, penalties, marking, standing_tackle, sliding_tackle, gk_diving, gk_handling, gk_kicking, gk_positioning, gk_reflexes);\n#Player(id, player_api_id, player_name, player_fifa_api_id, birthday, height, weight);\n#League(id, country_id, name);\n#Country(id, name);\n#Team(id, team_api_id, team_fifa_api_id, team_long_name, team_short_name);\n#Team_Attributes(id, team_fifa_api_id, team_api_id, date, buildUpPlaySpeed, buildUpPlaySpeedClass, buildUpPlayDribbling, buildUpPlayDribblingClass, buildUpPlayPassing, buildUpPlayPassingClass, buildUpPlayPositioningClass, chanceCreationPassing, chanceCreationPassingClass, chanceCreationCrossing, chanceCreationCrossingClass, chanceCreationShooting, chanceCreationShootingClass, chanceCreationPositioningClass, defencePressure, defencePressureClass, defenceAggression, defenceAggressionClass, defenceTeamWidth, defenceTeamWidthClass, defenceDefenderLineClass);\n#Match(id, country_id, league_id, season, stage, date, match_api_id, home_team_api_id, away_team_api_id, home_team_goal, away_team_goal, home_player_X1, home_player_X2, home_player_X3, home_player_X4, home_player_X5, home_player_X6, home_player_X7, home_player_X8, home_player_X9, home_player_X10, home_player_X11, away_player_X1, away_player_X2, away_player_X3, away_player_X4, away_player_X5, away_player_X6, away_player_X7, away_player_X8, away_player_X9, away_player_X10, away_player_X11, home_player_Y1, home_player_Y2, home_player_Y3, home_player_Y4, home_player_Y5, home_player_Y6, home_player_Y7, home_player_Y8, home_player_Y9, home_player_Y10, home_player_Y11, away_player_Y1, away_player_Y2, away_player_Y3, away_player_Y4, away_player_Y5, away_player_Y6, away_player_Y7, away_player_Y8, away_player_Y9, away_player_Y10, away_player_Y11, home_player_1, home_player_2, home_player_3, home_player_4, home_player_5, home_player_6, home_player_7, home_player_8, home_player_9, home_player_10, home_player_11, away_player_1, away_player_2, away_player_3, away_player_4, away_player_5, away_player_6, away_player_7, away_player_8, away_player_9, away_player_10, away_player_11, goal, shoton, shotoff, foulcommit, card, cross, corner, possession, B365H, B365D, B365A, BWH, BWD, BWA, IWH, IWD, IWA, LBH, LBD, LBA, PSH, PSD, PSA, WHH, WHD, WHA, SJH, SJD, SJA, VCH, VCD, VCA, GBH, GBD, GBA, BSH, BSD, BSA).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "player_attributes",
                "player_api_id"
            ],
            [
                "player_attributes",
                "crossing"
            ],
            [
                "player",
                "player_api_id"
            ],
            [
                "country",
                "id"
            ],
            [
                "country",
                "name"
            ],
            [
                "match",
                "country_id"
            ],
            [
                "match",
                "home_player_8"
            ]
        ],
        "foreign_key": [
            "Player_Attributes(player_api_id) REFERENCES Player(player_api_id)\nLeague(country_id) REFERENCES country(id)\nTeam_Attributes(team_api_id) REFERENCES Team(team_api_id)\nMatch(away_player_11) REFERENCES Player(player_api_id)\n"
        ]
    },
    {
        "id": "166",
        "question": "Among the students majored in interior design, who have attended the Community Theater event?",
        "new_question": "Among the students majored in interior design, who have attended the event located at 'MU 215'? In the database, majored in interior design refers to major_name = 'Interior Design'.",
        "source": "bird_question_1382",
        "gt_table": [
            "major",
            "member",
            "attendance",
            "event"
        ],
        "query": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.event_name = 'Community Theater' AND T1.major_name = 'Interior Design'",
        "new_query": "SELECT T2.first_name, T2.last_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.location = 'MU 215' AND T1.major_name = 'Interior Design'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "location"
            ],
            [
                "major",
                "major_id"
            ],
            [
                "major",
                "major_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "first_name"
            ],
            [
                "member",
                "last_name"
            ],
            [
                "member",
                "link_to_major"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "167",
        "question": "Which student has been entrusted to manage the budget for the Yearly Kickoff?",
        "new_question": "Which student has been entrusted to manage the budget for the event with status 'Open'?",
        "source": "bird_question_1387",
        "gt_table": [
            "event",
            "budget",
            "expense",
            "member"
        ],
        "query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.event_name = 'Yearly Kickoff'",
        "new_query": "SELECT T4.first_name, T4.last_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN member AS T4 ON T3.link_to_member = T4.member_id WHERE T1.status = 'Open'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "status"
            ],
            [
                "budget",
                "budget_id"
            ],
            [
                "budget",
                "link_to_event"
            ],
            [
                "expense",
                "link_to_member"
            ],
            [
                "expense",
                "link_to_budget"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "first_name"
            ],
            [
                "member",
                "last_name"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "168",
        "question": "Among the members who incurred expenses in more than one event, who paid the most amount?",
        "new_question": "List the members who incurred expenses in more than one event with the type 'Meeting', ordered by the amount from low to high.",
        "source": "bird_question_1451",
        "gt_table": [
            "expense",
            "member",
            "budget",
            "event"
        ],
        "query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY SUM(T1.cost) DESC LIMIT 1",
        "new_query": "SELECT T2.member_id FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN budget AS T3 ON T1.link_to_budget = T3.budget_id INNER JOIN event AS T4 ON T3.link_to_event = T4.event_id WHERE T4.type = 'Meeting' GROUP BY T2.member_id HAVING COUNT(DISTINCT T4.event_id) > 1 ORDER BY T1.cost",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "type"
            ],
            [
                "budget",
                "budget_id"
            ],
            [
                "budget",
                "link_to_event"
            ],
            [
                "expense",
                "cost"
            ],
            [
                "expense",
                "link_to_member"
            ],
            [
                "expense",
                "link_to_budget"
            ],
            [
                "member",
                "member_id"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "169",
        "question": "Write the full names of students who received funds on the date of 9/9/2019 and include the amount received.",
        "new_question": "Write the phone of students who received funds on the date of 9/9/2019 and include the amount received.In the database, amount of funds received refers to amount, received funds on date refers to date_received.",
        "source": "bird_question_1464",
        "gt_table": [
            "event",
            "attendance",
            "member",
            "income"
        ],
        "query": "SELECT DISTINCT T3.first_name, T3.last_name, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "new_query": "SELECT DISTINCT T3.phone, T4.amount FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T3.member_id = T2.link_to_member INNER JOIN income AS T4 ON T4.link_to_member = T3.member_id WHERE T4.date_received = '2019-09-09'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "income",
                "date_received"
            ],
            [
                "income",
                "amount"
            ],
            [
                "income",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "phone"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "170",
        "question": "Among the superheroes with the super power of 'Super Strength', how many of them have a height of over 200cm?",
        "new_question": "Among the superheroes with the super power of 'Super Strength', how many of them have a height of over 200cm and have blue eyes? In the database, blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id",
        "source": "bird_question_719",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower",
            "colour"
        ],
        "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 on T1.eye_colour_id = T4.id WHERE T3.power_name = 'Super Strength' AND T1.height_cm > 200 AND T4.colour = 'Blue'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "colour",
                "id"
            ],
            [
                "colour",
                "colour"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "eye_colour_id"
            ],
            [
                "superhero",
                "height_cm"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "171",
        "question": "Among the superheroes from Marvel Comics, how many of them have blue eyes?",
        "new_question": "Among the female superheroes from Marvel Comics, how many of them have blue eyes? In the database, the superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id; female refers to gender = 'Female'",
        "source": "bird_question_728",
        "gt_table": [
            "superhero",
            "publisher",
            "colour",
            "gender"
        ],
        "query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue'",
        "new_query": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id INNER JOIN colour AS T3 ON T1.eye_colour_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id WHERE T2.publisher_name = 'Marvel Comics' AND T3.colour = 'Blue' AND T4.gender = 'Female'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "colour",
                "id"
            ],
            [
                "colour",
                "colour"
            ],
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "publisher",
                "id"
            ],
            [
                "publisher",
                "publisher_name"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "superhero",
                "eye_colour_id"
            ],
            [
                "superhero",
                "publisher_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "172",
        "question": "Provide the hair colour of the human superhero who is 185 cm tall.",
        "new_question": "Provide the hair colour of the human superhero who is 185 cm tall and published by Universal Studios.",
        "source": "bird_question_758",
        "gt_table": [
            "superhero",
            "race",
            "colour",
            "publisher"
        ],
        "query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id WHERE T1.height_cm = 185 AND T2.race = 'Human'",
        "new_query": "SELECT DISTINCT T3.colour FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN colour AS T3 ON T1.hair_colour_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T1.height_cm = 185 AND T2.race = 'Human' AND T4.publisher_name = 'Universal Studios'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "colour",
                "id"
            ],
            [
                "colour",
                "colour"
            ],
            [
                "publisher",
                "id"
            ],
            [
                "publisher",
                "publisher_name"
            ],
            [
                "race",
                "id"
            ],
            [
                "race",
                "race"
            ],
            [
                "superhero",
                "hair_colour_id"
            ],
            [
                "superhero",
                "race_id"
            ],
            [
                "superhero",
                "publisher_id"
            ],
            [
                "superhero",
                "height_cm"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "173",
        "question": "What is the hero's full name with the highest attribute in strength?",
        "new_question": "What is the hero's full name and publisher with the highest attribute in strength?In the database,strength attribute refers to attribute_name = 'Strength'.",
        "source": "bird_question_766",
        "gt_table": [
            "superhero",
            "hero_attribute",
            "attribute",
            "publisher"
        ],
        "query": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "new_query": "SELECT T1.full_name, T4.publisher_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T3.attribute_name = 'Strength' ORDER BY T2.attribute_value DESC LIMIT 1",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "attribute",
                "id"
            ],
            [
                "attribute",
                "attribute_name"
            ],
            [
                "publisher",
                "id"
            ],
            [
                "publisher",
                "publisher_name"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "full_name"
            ],
            [
                "superhero",
                "publisher_id"
            ],
            [
                "hero_attribute",
                "hero_id"
            ],
            [
                "hero_attribute",
                "attribute_id"
            ],
            [
                "hero_attribute",
                "attribute_value"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "174",
        "question": "List the name of superheroes with flight power.",
        "new_question": "List the name and race of superheroes with flight power.",
        "source": "bird_question_771",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower",
            "race"
        ],
        "query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.power_name = 'Flight'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "race",
                "id"
            ],
            [
                "race",
                "race"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "superhero_name"
            ],
            [
                "superhero",
                "race_id"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "175",
        "question": "Provide superheroes' names who have the adaptation power.",
        "new_question": "Provide superheroes' names and hair colours who have the adaptation power. In the database, hair colour refers to colour where hair_colour_id = colour.id;adaptation power refers to power_name = 'Adaptation'",
        "source": "bird_question_778",
        "gt_table": [
            "superhero",
            "hero_power",
            "superpower",
            "colour"
        ],
        "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'",
        "new_query": "SELECT T1.superhero_name, T4.colour FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T3.power_name = 'Adaptation'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "colour",
                "id"
            ],
            [
                "colour",
                "colour"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "superhero_name"
            ],
            [
                "superhero",
                "hair_colour_id"
            ],
            [
                "superpower",
                "id"
            ],
            [
                "superpower",
                "power_name"
            ],
            [
                "hero_power",
                "hero_id"
            ],
            [
                "hero_power",
                "power_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "176",
        "question": "Among the superheroes with the race of god/eternal, how many of them are male",
        "new_question": "Among the superheroes with the race of god/eternal, how many of them are male and are published by ABC Studios?",
        "source": "bird_question_793",
        "gt_table": [
            "superhero",
            "race",
            "gender",
            "publisher"
        ],
        "query": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1",
        "new_query": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id INNER JOIN publisher AS T4 on T1.publisher_id = T4.id WHERE T1.race_id = 21 AND T1.gender_id = 1 AND T4.publisher_name = 'ABC Studios'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "publisher",
                "id"
            ],
            [
                "publisher",
                "publisher_name"
            ],
            [
                "race",
                "id"
            ],
            [
                "race",
                "race"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "superhero",
                "race_id"
            ],
            [
                "superhero",
                "publisher_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "177",
        "question": "Which hero was the fastest?",
        "new_question": "Which hero was the fastest? What is his/her race?",
        "source": "bird_question_794",
        "gt_table": [
            "superhero",
            "hero_attribute",
            "attribute",
            "race"
        ],
        "query": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "new_query": "SELECT T1.superhero_name, T4.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN attribute AS T3 ON T2.attribute_id = T3.id INNER JOIN race AS T4 on T1.race_id = T4.id WHERE T3.attribute_name = 'Speed' ORDER BY T2.attribute_value DESC LIMIT 1",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "attribute",
                "id"
            ],
            [
                "attribute",
                "attribute_name"
            ],
            [
                "race",
                "id"
            ],
            [
                "race",
                "race"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "superhero_name"
            ],
            [
                "superhero",
                "race_id"
            ],
            [
                "hero_attribute",
                "hero_id"
            ],
            [
                "hero_attribute",
                "attribute_id"
            ],
            [
                "hero_attribute",
                "attribute_value"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "178",
        "question": "What is the race of the superhero with maximum attribute value?",
        "new_question": "What is the race and the gender of the superhero with maximum attribute value?In the database,maximum attribute value refers to MAX(attribute_value).",
        "source": "bird_question_810",
        "gt_table": [
            "superhero",
            "hero_attribute",
            "race",
            "gender"
        ],
        "query": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1",
        "new_query": "SELECT T3.race, T4.gender FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id INNER JOIN gender AS T4 on T1.gender_id = T4.id ORDER BY T2.attribute_value DESC LIMIT 1",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "race",
                "id"
            ],
            [
                "race",
                "race"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "superhero",
                "race_id"
            ],
            [
                "hero_attribute",
                "hero_id"
            ],
            [
                "hero_attribute",
                "attribute_value"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "179",
        "question": "Among the bad superheroes, what is the percentage of female superheroes?",
        "new_question": "Among the bad superheroes, what is the percentage of female superheroes with black eyes? In the database, black eyes refers to colour = 'Black' and eye_colour_id = colour.id.",
        "source": "bird_question_818",
        "gt_table": [
            "superhero",
            "alignment",
            "gender",
            "colour"
        ],
        "query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Bad'",
        "new_query": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Female' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id INNER JOIN colour AS T4 on T1.hair_colour_id = T4.id WHERE T2.alignment = 'Bad' AND T4.colour = 'Black'",
        "db_id": "superhero",
        "simplified_ddl": "#alignment(id, alignment);\n#attribute(id, attribute_name);\n#colour(id, colour);\n#gender(id, gender);\n#publisher(id, publisher_name);\n#race(id, race);\n#superhero(id, superhero_name, full_name, gender_id, eye_colour_id, hair_colour_id, skin_colour_id, race_id, publisher_id, alignment_id, height_cm, weight_kg);\n#hero_attribute(hero_id, attribute_id, attribute_value);\n#superpower(id, power_name);\n#hero_power(hero_id, power_id).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "alignment",
                "id"
            ],
            [
                "alignment",
                "alignment"
            ],
            [
                "colour",
                "id"
            ],
            [
                "colour",
                "colour"
            ],
            [
                "gender",
                "id"
            ],
            [
                "gender",
                "gender"
            ],
            [
                "superhero",
                "id"
            ],
            [
                "superhero",
                "gender_id"
            ],
            [
                "superhero",
                "hair_colour_id"
            ],
            [
                "superhero",
                "alignment_id"
            ]
        ],
        "foreign_key": [
            "superhero(skin_colour_id) REFERENCES colour(id)\nhero_attribute(hero_id) REFERENCES superhero(id)\nhero_power(power_id) REFERENCES superpower(id)\n"
        ]
    },
    {
        "id": "180",
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "new_question": "List the name of drivers who finished first in the Yas Marina Circuit in 2010.In the database,finished first refers to position = 1.",
        "source": "bird_question_874",
        "gt_table": [
            "races",
            "results",
            "drivers",
            "circuits"
        ],
        "query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "new_query": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId INNER JOIN circuits AS T4 ON T1.circuitId = T4.circuitId WHERE T1.year = 2010 AND T4.name = 'Yas Marina Circuit' AND T2.position = 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "circuits",
                "circuitid"
            ],
            [
                "circuits",
                "name"
            ],
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "circuitid"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "position"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "181",
        "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
        "new_question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50 and the status were finished?",
        "source": "bird_question_962",
        "gt_table": [
            "results",
            "races",
            "drivers",
            "status"
        ],
        "query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
        "new_query": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50 AND T4.status = 'Finished', 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.year BETWEEN 2000 AND 2005",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "dob"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "status",
                "statusid"
            ],
            [
                "status",
                "status"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "laps"
            ],
            [
                "results",
                "statusid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "182",
        "question": "On what year did the youngest driver had his first qualifying race? State the name, date and time of the race.",
        "new_question": "On what year did the youngest driver had his first qualifying race? State the result in terms of points about him in the race.In the database,youngest driver refers to Max (year(dob));",
        "source": "bird_question_981",
        "gt_table": [
            "qualifying",
            "drivers",
            "races",
            "results"
        ],
        "query": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "new_query": "SELECT T3.year, T4.points FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId INNER JOIN results as T4 on T2.driverId = T4.driverId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "dob"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "date"
            ],
            [
                "qualifying",
                "raceid"
            ],
            [
                "qualifying",
                "driverid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "points"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "183",
        "question": "How many American drivers have been disqualified from the race.",
        "new_question": "How many American drivers have been disqualified from the race named 'Monaco Grand Prix'? In the database, disqualified refers to statusID = 2;",
        "source": "bird_question_982",
        "gt_table": [
            "drivers",
            "results",
            "status",
            "races"
        ],
        "query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.nationality = 'American'",
        "new_query": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId INNER JOIN races AS T4 ON T2.raceId = T4.raceId WHERE T3.status = 'Disqualified' AND T1.nationality = 'American' AND T4.name = 'Monaco Grand Prix'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "nationality"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "name"
            ],
            [
                "status",
                "statusid"
            ],
            [
                "status",
                "status"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "statusid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "184",
        "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
        "new_question": "List the website of the constructor of the drivers whose status is collision in the 2009 Singapore Grand Prix.",
        "source": "bird_question_990",
        "gt_table": [
            "results",
            "races",
            "constructors",
            "status"
        ],
        "query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "new_query": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId INNER JOIN status as T4 on T1.statusId = T4.statusId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T4.status = 'Collision'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "constructors",
                "constructorid"
            ],
            [
                "constructors",
                "constructorref"
            ],
            [
                "constructors",
                "url"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "name"
            ],
            [
                "status",
                "statusid"
            ],
            [
                "status",
                "status"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "constructorid"
            ],
            [
                "results",
                "statusid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "185",
        "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this Team.",
        "new_question": "Which constructor scored most points from Baku City Circuit between 2010 and 2020? List the score, name and nationality of this Team.",
        "source": "bird_question_994",
        "gt_table": [
            "constructorResults",
            "constructors",
            "races",
            "circuits"
        ],
        "query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "new_query": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T4.name = 'Baku City Circuit' AND T3.year BETWEEN 2010 AND 2020 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "circuits",
                "circuitid"
            ],
            [
                "circuits",
                "name"
            ],
            [
                "constructors",
                "constructorid"
            ],
            [
                "constructors",
                "name"
            ],
            [
                "constructors",
                "nationality"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "year"
            ],
            [
                "races",
                "circuitid"
            ],
            [
                "constructorresults",
                "raceid"
            ],
            [
                "constructorresults",
                "constructorid"
            ],
            [
                "constructorresults",
                "points"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "186",
        "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "new_question": "What is the average score of Lewis Hamilton among all the circuits located at Monte-Carlo?In the database,average score = AVG(points).",
        "source": "bird_question_995",
        "gt_table": [
            "drivers",
            "driverStandings",
            "races",
            "circuits"
        ],
        "query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "new_query": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T3.circuitId = T4.circuitId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T4.location = 'Monte-Carlo'",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "circuits",
                "circuitid"
            ],
            [
                "circuits",
                "location"
            ],
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "circuitid"
            ],
            [
                "driverstandings",
                "raceid"
            ],
            [
                "driverstandings",
                "driverid"
            ],
            [
                "driverstandings",
                "points"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "187",
        "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
        "new_question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and her constructor's name and the id of the race to which he/she first joined.In the database,full name refers to forename+surname; youngest racer = MAX(dob).",
        "source": "bird_question_1002",
        "gt_table": [
            "drivers",
            "driverStandings",
            "races",
            "constructorResults",
            "constructors"
        ],
        "query": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "new_query": "SELECT T1.forename, T1.surname, T1.nationality, T3.raceId, T5.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId INNER JOIN constructorResults AS T4 on T3.raceId = T4.raceId INNER JOIN constructors AS T5 on T4.constructorId = T5.constructorId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "constructors",
                "constructorid"
            ],
            [
                "constructors",
                "name"
            ],
            [
                "drivers",
                "driverid"
            ],
            [
                "drivers",
                "forename"
            ],
            [
                "drivers",
                "surname"
            ],
            [
                "drivers",
                "dob"
            ],
            [
                "drivers",
                "nationality"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "constructorresults",
                "raceid"
            ],
            [
                "constructorresults",
                "constructorid"
            ],
            [
                "driverstandings",
                "raceid"
            ],
            [
                "driverstandings",
                "driverid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "188",
        "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
        "new_question": "How many accidents did the driver who had the highest number accidents in the circuit Fuji Speedway have?",
        "source": "bird_question_1003",
        "gt_table": [
            "results",
            "races",
            "status",
            "circuits"
        ],
        "query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "new_query": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T3.statusId = 3 AND T4.name = 'Fuji Speedway' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "db_id": "formula_1",
        "simplified_ddl": "#circuits(circuitId, circuitRef, name, location, country, lat, lng, alt, url);\n#constructors(constructorId, constructorRef, name, nationality, url);\n#drivers(driverId, driverRef, number, code, forename, surname, dob, nationality, url);\n#seasons(year, url);\n#races(raceId, year, round, circuitId, name, date, time, url);\n#constructorResults(constructorResultsId, raceId, constructorId, points, status);\n#constructorStandings(constructorStandingsId, raceId, constructorId, points, position, positionText, wins);\n#driverStandings(driverStandingsId, raceId, driverId, points, position, positionText, wins);\n#lapTimes(raceId, driverId, lap, position, time, milliseconds);\n#pitStops(raceId, driverId, stop, lap, time, duration, milliseconds);\n#qualifying(qualifyId, raceId, driverId, constructorId, number, position, q1, q2, q3);\n#status(statusId, status);\n#results(resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points, laps, time, milliseconds, fastestLap, rank, fastestLapTime, fastestLapSpeed, statusId).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "circuits",
                "circuitid"
            ],
            [
                "circuits",
                "name"
            ],
            [
                "races",
                "raceid"
            ],
            [
                "races",
                "circuitid"
            ],
            [
                "status",
                "statusid"
            ],
            [
                "status",
                "status"
            ],
            [
                "results",
                "raceid"
            ],
            [
                "results",
                "driverid"
            ],
            [
                "results",
                "statusid"
            ]
        ],
        "foreign_key": [
            "races(circuitId) REFERENCES circuits(circuitId)\nconstructorResults(constructorId) REFERENCES constructors(constructorId)\nconstructorStandings(constructorId) REFERENCES constructors(constructorId)\ndriverStandings(driverId) REFERENCES drivers(driverId)\nlapTimes(driverId) REFERENCES drivers(driverId)\npitStops(driverId) REFERENCES drivers(driverId)\nqualifying(constructorId) REFERENCES constructors(constructorId)\nresults(statusId) REFERENCES status(statusId)\n"
        ]
    },
    {
        "id": "189",
        "question": "Please provide links to events for members who have paid more than 50 dollar.",
        "new_question": "Please provide name of events for members who have paid more than 50 dollar.In the database,have paid more than 50 dollar refers to cost > 50.",
        "source": "bird_question_1436",
        "gt_table": [
            "expense",
            "member",
            "attendance",
            "event"
        ],
        "query": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50",
        "new_query": "SELECT DISTINCT T4.event_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN event as T4 ON T3.link_to_event = T4.event_id WHERE T1.cost > 50",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "event_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "expense",
                "cost"
            ],
            [
                "expense",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "190",
        "question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event.",
        "new_question": "Which members who were approved from 1/10/2019 to 11/19/2019? Please identify the member who attended the event and the link to their event, provide the major name of him. In the database,approved from 1/10/2019 to 11/19/2019 refers to approved = 'true' and expense_date BETWEEN '2019-01-10' and '2019-11-19'.",
        "source": "bird_question_1437",
        "gt_table": [
            "expense",
            "member",
            "attendance",
            "major"
        ],
        "query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "new_query": "SELECT DISTINCT T1.link_to_member, T3.link_to_event, T4.major_name FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member INNER JOIN major as T4 on T2.link_to_major = T4.major_id WHERE date(SUBSTR(T1.expense_date, 1, 10)) BETWEEN '2019-01-10' AND '2019-11-19' AND T1.approved = 'true'",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "major",
                "major_id"
            ],
            [
                "major",
                "major_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "expense",
                "expense_date"
            ],
            [
                "expense",
                "approved"
            ],
            [
                "expense",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "link_to_major"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "191",
        "question": "What is the name and major of members who had to spend more than a hundred dollars on an expense?",
        "new_question": "What is the name and major of members who had to spend more than a hundred dollars on an expense? which county does his/her from?",
        "source": "bird_question_1449",
        "gt_table": [
            "member",
            "major",
            "expense",
            "zip_code"
        ],
        "query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member WHERE T3.cost > 100",
        "new_query": "SELECT DISTINCT T1.first_name, T1.last_name, T2.major_name, T4.county FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major INNER JOIN expense AS T3 ON T1.member_id = T3.link_to_member INNER JOIN zip_code AS T4 on T1.zip = T4.zip_code WHERE T3.cost > 100",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "major",
                "major_id"
            ],
            [
                "major",
                "major_name"
            ],
            [
                "zip_code",
                "zip_code"
            ],
            [
                "zip_code",
                "county"
            ],
            [
                "expense",
                "cost"
            ],
            [
                "expense",
                "link_to_member"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "first_name"
            ],
            [
                "member",
                "last_name"
            ],
            [
                "member",
                "zip"
            ],
            [
                "member",
                "link_to_major"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "192",
        "question": "List the name of events with less than average parking cost.",
        "new_question": "For events with less than average parking cost, list the events name and the link to their member.In the database,less than average parking cost refers to cost < DIVIDE(SUM(cost), COUNT(event_id)) where category = 'Parking'.",
        "source": "bird_question_1453",
        "gt_table": [
            "event",
            "budget",
            "expense",
            "attendance"
        ],
        "query": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "new_query": "SELECT T1.event_name, T4.link_to_member FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget INNER JOIN attendance as T4 on T1.event_id = T4.link_to_event WHERE T2.category = 'Parking' AND T3.cost < (SELECT AVG(cost) FROM expense)",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "event",
                "event_id"
            ],
            [
                "event",
                "event_name"
            ],
            [
                "attendance",
                "link_to_event"
            ],
            [
                "attendance",
                "link_to_member"
            ],
            [
                "budget",
                "budget_id"
            ],
            [
                "budget",
                "category"
            ],
            [
                "budget",
                "link_to_event"
            ],
            [
                "expense",
                "cost"
            ],
            [
                "expense",
                "link_to_budget"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "193",
        "question": "List the full name of the top five members who spend the most money in the descending order of spending.",
        "new_question": "List the full name and the major name of the top five members who spend the most money in the descending order of spending.",
        "source": "bird_question_1456",
        "gt_table": [
            "expense",
            "budget",
            "member",
            "major"
        ],
        "query": "SELECT T3.first_name, T3.last_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id ORDER BY T2.spent DESC LIMIT 5",
        "new_query": "SELECT T3.first_name, T3.last_name, T4.major_name FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T1.link_to_member = T3.member_id INNER JOIN major as T4 on T3.link_to_major = T4.major_id ORDER BY T2.spent DESC LIMIT 5",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "moderate",
        "gold_linked_columns": [
            [
                "major",
                "major_id"
            ],
            [
                "major",
                "major_name"
            ],
            [
                "budget",
                "budget_id"
            ],
            [
                "budget",
                "spent"
            ],
            [
                "expense",
                "link_to_member"
            ],
            [
                "expense",
                "link_to_budget"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "first_name"
            ],
            [
                "member",
                "last_name"
            ],
            [
                "member",
                "link_to_major"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "194",
        "question": "Give the full name and contact number of members who had to spend more than average on each expense.",
        "new_question": "For the members who had to spend more than average on each expense, which city do they come from?In the database,had spent more than average on each expense refers to cost > AVG(cost).",
        "source": "bird_question_1457",
        "gt_table": [
            "expense",
            "budget",
            "member"
        ],
        "query": "SELECT DISTINCT T3.first_name, T3.last_name, T3.phone FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
        "new_query": "SELECT DISTINCT T4.city FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member INNER JOIN zip_code as T4 on T3.zip = T4.zip_code WHERE T1.cost > ( SELECT AVG(T1.cost) FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id INNER JOIN member AS T3 ON T3.member_id = T1.link_to_member )",
        "db_id": "student_club",
        "simplified_ddl": "#event(event_id, event_name, event_date, type, notes, location, status);\n#major(major_id, major_name, department, college);\n#zip_code(zip_code, type, city, county, state, short_state);\n#attendance(link_to_event, link_to_member);\n#budget(budget_id, category, spent, remaining, amount, event_status, link_to_event);\n#expense(expense_id, expense_description, expense_date, cost, approved, link_to_member, link_to_budget);\n#income(income_id, date_received, amount, source, notes, link_to_member);\n#member(member_id, first_name, last_name, email, position, t_shirt_size, phone, zip, link_to_major).\n",
        "difficulty": "challenging",
        "gold_linked_columns": [
            [
                "budget",
                "budget_id"
            ],
            [
                "expense",
                "cost"
            ],
            [
                "expense",
                "link_to_member"
            ],
            [
                "expense",
                "link_to_budget"
            ],
            [
                "member",
                "member_id"
            ],
            [
                "member",
                "zip"
            ]
        ],
        "foreign_key": [
            "attendance(link_to_member) REFERENCES member(member_id)\nbudget(link_to_event) REFERENCES event(event_id)\nexpense(link_to_member) REFERENCES member(member_id)\nincome(link_to_member) REFERENCES member(member_id)\nmember(zip) REFERENCES zip_code(zip_code)\n"
        ]
    },
    {
        "id": "195",
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "new_question": "How many female accounts in the south Bohemia region are eligible for loans?In the database, A3 contains the data of region.",
        "source": "bird_question_90",
        "gt_table": [
            "account",
            "loan",
            "district",
            "client"
        ],
        "query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "new_query": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'south Bohemia' AND T3.district_id = ( SELECT district_id FROM client WHERE gender = 'F')",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "client",
                "gender"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a3"
            ],
            [
                "loan",
                "account_id"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "196",
        "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
        "new_question": "When is the birthday of a client who applied 98832 USD loan in East Bohemia in 1996/1/3?",
        "source": "bird_question_113",
        "gt_table": [
            "loan",
            "account",
            "client",
            "district"
        ],
        "query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "new_query": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832 AND T3.district_id = (SELECT district_id FROM district WHERE A3 = 'east Bohemia' )",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "client",
                "birth_date"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a3"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "date"
            ],
            [
                "loan",
                "amount"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "197",
        "question": "State the district and region for loan ID '4990'.",
        "new_question": "State the district and type of loan ID '4990'.In the database, A2, A3 contains the information about district and region respectively.",
        "source": "bird_question_122",
        "gt_table": [
            "account",
            "district",
            "loan",
            "disp"
        ],
        "query": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "new_query": "SELECT T2.A2, T2.A3, T4.'type'  FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.account_id = T4.account_id INNER JOIN loan AS T3 ON T4.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "disp",
                "account_id"
            ],
            [
                "disp",
                "type"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a2"
            ],
            [
                "district",
                "a3"
            ],
            [
                "loan",
                "loan_id"
            ],
            [
                "loan",
                "account_id"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "198",
        "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
        "new_question": "Provide the account ID, user gender\u95c1\u630e\u7a11\u9423\u7833strict and region for loan amount greater than USD300,000.In the database, A2 contains district names and A3 contains region names.",
        "source": "bird_question_123",
        "gt_table": [
            "account",
            "district",
            "loan",
            "client"
        ],
        "query": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "new_query": "SELECT T1.account_id, T2.A2, T2.A3, T4.gender FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T4 ON T4.district_id = T1.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "client",
                "gender"
            ],
            [
                "client",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a2"
            ],
            [
                "district",
                "a3"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "amount"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    },
    {
        "id": "199",
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "new_question": "List the loan ID, bank, district and average salary loan with duration of 60 months.In the database, A3 refers to regions; A11 refers to average salary.",
        "source": "bird_question_124",
        "gt_table": [
            "account",
            "district",
            "loan",
            "order"
        ],
        "query": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "new_query": "SELECT T3.loan_id, T2.A2, T2.A11, T4.bank_to FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN 'order' AS T4 ON T4.account_id = T1.account_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "db_id": "financial",
        "simplified_ddl": "#account(account_id, district_id, frequency, date);\n#card(card_id, disp_id, type, issued);\n#client(client_id, gender, birth_date, district_id);\n#disp(disp_id, client_id, account_id, type);\n#district(district_id, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16);\n#loan(loan_id, account_id, date, amount, duration, payments, status);\n#order(order_id, account_id, bank_to, account_to, amount, k_symbol);\n#trans(trans_id, account_id, date, type, operation, amount, balance, k_symbol, bank, account).\n",
        "difficulty": "simple",
        "gold_linked_columns": [
            [
                "account",
                "account_id"
            ],
            [
                "account",
                "district_id"
            ],
            [
                "district",
                "district_id"
            ],
            [
                "district",
                "a2"
            ],
            [
                "district",
                "a11"
            ],
            [
                "loan",
                "loan_id"
            ],
            [
                "loan",
                "account_id"
            ],
            [
                "loan",
                "duration"
            ],
            [
                "order",
                "account_id"
            ],
            [
                "order",
                "bank_to"
            ]
        ],
        "foreign_key": [
            "account(district_id) REFERENCES district(district_id)\ncard(disp_id) REFERENCES disp(disp_id)\nclient(district_id) REFERENCES district(district_id)\ndisp(client_id) REFERENCES client(client_id)\nloan(account_id) REFERENCES account(account_id)\norder(account_id) REFERENCES account(account_id)\ntrans(account_id) REFERENCES account(account_id)\n"
        ]
    }
]